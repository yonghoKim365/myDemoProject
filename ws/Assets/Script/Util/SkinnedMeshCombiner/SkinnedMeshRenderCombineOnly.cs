//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;


public class SkinnedMeshRenderCombineOnly
{

	public static void CombineOnly(GameObject root, GameObject combineRoot)
	{
		SkinnedMeshRenderer[] SMRs;
		
		int vertCount = 0;
		int normCount = 0;
		int tanCount = 0;
		int triCount = 0;
		int uvCount = 0;
		int boneCount = 0;
		int bpCount = 0;
		int bwCount = 0;
		
		Transform[] bones;
		Matrix4x4[] bindPoses;
		BoneWeight[] weights;
		
		Vector3[] verts;
		Vector3[] norms;
		Vector4[] tans;
		
		int[] tris;
		Vector2[] uvs;
		Texture2D[] textures;
		Texture2D[] normalmaps;
		
		int vertOffset = 0;
		int normOffset = 0;
		int tanOffset = 0;
		int triOffset = 0;
		int uvOffset = 0;
		int meshOffset = 0;		
		int  boneSplit = 0;
		int bNum = 0;
		int[] bCount;
		
		SMRs = root.GetComponentsInChildren<SkinnedMeshRenderer>();

		if(SMRs.Length == 0) return;

		foreach (SkinnedMeshRenderer smr in SMRs) 
		{
			vertCount += smr.sharedMesh.vertices.Length;
			normCount += smr.sharedMesh.normals.Length;
			tanCount += smr.sharedMesh.tangents.Length;
			triCount += smr.sharedMesh.triangles.Length;
			uvCount += smr.sharedMesh.uv.Length;
			boneCount += smr.bones.Length;
			bpCount += smr.sharedMesh.bindposes.Length;
			bwCount += smr.sharedMesh.boneWeights.Length;
			bNum++;
		}
		
		bCount = new int[3];
		bones = new Transform[boneCount];
		weights = new BoneWeight[bwCount];
		bindPoses = new Matrix4x4[bpCount];
		textures = new Texture2D[bNum];
		normalmaps = new Texture2D[bNum];
		
		foreach (SkinnedMeshRenderer smr in SMRs) 
		{
			for(int b1 = 0; b1 < smr.bones.Length; b1++) 
			{
				bones[bCount[0]] = smr.bones[b1];
				bCount[0]++;
			}
			
			for(int b2 = 0; b2 < smr.sharedMesh.boneWeights.Length; b2++) 
			{
				weights[bCount[1]] = smr.sharedMesh.boneWeights[b2];
				weights[bCount[1]].boneIndex0 += boneSplit;
				weights[bCount[1]].boneIndex1 += boneSplit;
				weights[bCount[1]].boneIndex2 += boneSplit;
				weights[bCount[1]].boneIndex3 += boneSplit;
				
				bCount[1]++;
			}
			
			for(int b3 = 0; b3 < smr.sharedMesh.bindposes.Length; b3++) 
			{
				bindPoses[bCount[2]] = smr.sharedMesh.bindposes[b3];
				bCount[2]++;
			}
			boneSplit += smr.bones.Length;
		}
		
		verts = new Vector3[vertCount];
		norms = new Vector3[normCount];
		tans = new Vector4[tanCount];
		tris = new int[triCount];
		uvs = new Vector2[uvCount];
		
		foreach (SkinnedMeshRenderer smr in SMRs) 
		{
			foreach (int i in smr.sharedMesh.triangles) {
				tris[triOffset++] = i + vertOffset;
			}
			
			foreach (Vector3 v in smr.sharedMesh.vertices) {
				verts[vertOffset++] = v;
			}
			
			foreach (Vector3 n in smr.sharedMesh.normals) {
				norms[normOffset++] = n;
			}
			
			foreach (Vector4 t in smr.sharedMesh.tangents) {
				tans[tanOffset++] = t;
			}
			
			foreach (Vector2 uv in smr.sharedMesh.uv) {
				uvs[uvOffset++] = uv;
			}
			
			textures[meshOffset] = (Texture2D) smr.sharedMaterial.GetTexture("_MainTex");
			
			meshOffset++;
		}
		
		
		uvOffset = 0;
		meshOffset = 0;
		
		Shader shader = null;
		foreach (SkinnedMeshRenderer smr in SMRs) 
		{
			shader = smr.sharedMaterial.shader;
			foreach (Vector2 uv in smr.sharedMesh.uv) {
				uvs[uvOffset].x = uv.x;
				uvs[uvOffset].y = uv.y;
				uvOffset ++;
			}
			meshOffset ++;
		}
		
		SkinnedMeshRenderer newSMR = combineRoot.GetComponent<SkinnedMeshRenderer>();
		if(newSMR == null) newSMR = combineRoot.AddComponent<SkinnedMeshRenderer>();
		
		//New Mesh
		Mesh me = newSMR.sharedMesh;
		if(me == null) me = new Mesh();
		else me.Clear();
		
		me.name = root.gameObject.name;
		me.vertices = verts;
		me.normals = norms;
		me.tangents = tans;
		me.boneWeights = weights;
		me.uv = uvs;
		me.triangles = tris;
		me.bindposes = bindPoses;
		
		newSMR.sharedMesh = me;
		newSMR.bones = bones;
		newSMR.updateWhenOffscreen = false;

		newSMR.sharedMaterial = SMRs[0].sharedMaterial;

		//combineRoot.renderer.material = SMRs[0].renderer.material;
	}



}

