// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/PMsgVip.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sw {

  /// <summary>Holder for reflection information generated from protos/PMsgVip.proto</summary>
  public static partial class PMsgVipReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/PMsgVip.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PMsgVipReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRwcm90b3MvUE1zZ1ZpcC5wcm90bxICc3ciJwoRUE1zZ1ZpcFF1ZXJ5SW5m",
            "b0MSEgoKdW5SZXNlcnZlZBgBIAEoBSJxChFQTXNnVmlwUXVlcnlJbmZvUxIS",
            "Cgp1blZpcExldmVsGAEgASgNEhAKCHVuVmlwRXhwGAIgASgNEhkKEXVuU3dl",
            "ZXBUaWNrZXRUaW1lGAMgASgNEhsKE3VuUmVwYWlyU2lnbkluQ291bnQYBCAB",
            "KA0iLgoYUE1zZ1ZpcEZldGNoU3dlZXBUaWNrZXRDEhIKCnVuUmVzZXJ2ZWQY",
            "ASABKAUiQAoYUE1zZ1ZpcEZldGNoU3dlZXBUaWNrZXRTEg8KB3VuQ291bnQY",
            "ASABKA0SEwoLdW5FcnJvckNvZGUYYyABKAUiKgoUUE1zZ1ZpcFJlcGFpclNp",
            "Z25JbkMSEgoKdW5SZXNlcnZlZBgBIAEoBSIrChRQTXNnVmlwUmVwYWlyU2ln",
            "bkluUxITCgt1bkVycm9yQ29kZRhjIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgVipQueryInfoC), global::Sw.PMsgVipQueryInfoC.Parser, new[]{ "UnReserved" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgVipQueryInfoS), global::Sw.PMsgVipQueryInfoS.Parser, new[]{ "UnVipLevel", "UnVipExp", "UnSweepTicketTime", "UnRepairSignInCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgVipFetchSweepTicketC), global::Sw.PMsgVipFetchSweepTicketC.Parser, new[]{ "UnReserved" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgVipFetchSweepTicketS), global::Sw.PMsgVipFetchSweepTicketS.Parser, new[]{ "UnCount", "UnErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgVipRepairSignInC), global::Sw.PMsgVipRepairSignInC.Parser, new[]{ "UnReserved" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgVipRepairSignInS), global::Sw.PMsgVipRepairSignInS.Parser, new[]{ "UnErrorCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 客户端：查询Vip信息
  /// _MSG_VIP_QUERY_INFO_C
  /// </summary>
  public sealed partial class PMsgVipQueryInfoC : pb::IMessage<PMsgVipQueryInfoC> {
    private static readonly pb::MessageParser<PMsgVipQueryInfoC> _parser = new pb::MessageParser<PMsgVipQueryInfoC>(() => new PMsgVipQueryInfoC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgVipQueryInfoC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgVipReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipQueryInfoC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipQueryInfoC(PMsgVipQueryInfoC other) : this() {
      unReserved_ = other.unReserved_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipQueryInfoC Clone() {
      return new PMsgVipQueryInfoC(this);
    }

    /// <summary>Field number for the "unReserved" field.</summary>
    public const int UnReservedFieldNumber = 1;
    private int unReserved_;
    /// <summary>
    /// 保留字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnReserved {
      get { return unReserved_; }
      set {
        unReserved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgVipQueryInfoC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgVipQueryInfoC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnReserved != other.UnReserved) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnReserved != 0) hash ^= UnReserved.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnReserved != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnReserved);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnReserved != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnReserved);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgVipQueryInfoC other) {
      if (other == null) {
        return;
      }
      if (other.UnReserved != 0) {
        UnReserved = other.UnReserved;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnReserved = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端：查询Vip信息回复
  /// _MSG_VIP_QUERY_INFO_S
  /// </summary>
  public sealed partial class PMsgVipQueryInfoS : pb::IMessage<PMsgVipQueryInfoS> {
    private static readonly pb::MessageParser<PMsgVipQueryInfoS> _parser = new pb::MessageParser<PMsgVipQueryInfoS>(() => new PMsgVipQueryInfoS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgVipQueryInfoS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgVipReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipQueryInfoS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipQueryInfoS(PMsgVipQueryInfoS other) : this() {
      unVipLevel_ = other.unVipLevel_;
      unVipExp_ = other.unVipExp_;
      unSweepTicketTime_ = other.unSweepTicketTime_;
      unRepairSignInCount_ = other.unRepairSignInCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipQueryInfoS Clone() {
      return new PMsgVipQueryInfoS(this);
    }

    /// <summary>Field number for the "unVipLevel" field.</summary>
    public const int UnVipLevelFieldNumber = 1;
    private uint unVipLevel_;
    /// <summary>
    /// vip等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnVipLevel {
      get { return unVipLevel_; }
      set {
        unVipLevel_ = value;
      }
    }

    /// <summary>Field number for the "unVipExp" field.</summary>
    public const int UnVipExpFieldNumber = 2;
    private uint unVipExp_;
    /// <summary>
    /// vip经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnVipExp {
      get { return unVipExp_; }
      set {
        unVipExp_ = value;
      }
    }

    /// <summary>Field number for the "unSweepTicketTime" field.</summary>
    public const int UnSweepTicketTimeFieldNumber = 3;
    private uint unSweepTicketTime_;
    /// <summary>
    /// 最近一次领取扫荡券的时间YYYYMMDD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnSweepTicketTime {
      get { return unSweepTicketTime_; }
      set {
        unSweepTicketTime_ = value;
      }
    }

    /// <summary>Field number for the "unRepairSignInCount" field.</summary>
    public const int UnRepairSignInCountFieldNumber = 4;
    private uint unRepairSignInCount_;
    /// <summary>
    /// 当月已补签到次数YYYYMMNN
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnRepairSignInCount {
      get { return unRepairSignInCount_; }
      set {
        unRepairSignInCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgVipQueryInfoS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgVipQueryInfoS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnVipLevel != other.UnVipLevel) return false;
      if (UnVipExp != other.UnVipExp) return false;
      if (UnSweepTicketTime != other.UnSweepTicketTime) return false;
      if (UnRepairSignInCount != other.UnRepairSignInCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnVipLevel != 0) hash ^= UnVipLevel.GetHashCode();
      if (UnVipExp != 0) hash ^= UnVipExp.GetHashCode();
      if (UnSweepTicketTime != 0) hash ^= UnSweepTicketTime.GetHashCode();
      if (UnRepairSignInCount != 0) hash ^= UnRepairSignInCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnVipLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnVipLevel);
      }
      if (UnVipExp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnVipExp);
      }
      if (UnSweepTicketTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UnSweepTicketTime);
      }
      if (UnRepairSignInCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UnRepairSignInCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnVipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnVipLevel);
      }
      if (UnVipExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnVipExp);
      }
      if (UnSweepTicketTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnSweepTicketTime);
      }
      if (UnRepairSignInCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnRepairSignInCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgVipQueryInfoS other) {
      if (other == null) {
        return;
      }
      if (other.UnVipLevel != 0) {
        UnVipLevel = other.UnVipLevel;
      }
      if (other.UnVipExp != 0) {
        UnVipExp = other.UnVipExp;
      }
      if (other.UnSweepTicketTime != 0) {
        UnSweepTicketTime = other.UnSweepTicketTime;
      }
      if (other.UnRepairSignInCount != 0) {
        UnRepairSignInCount = other.UnRepairSignInCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnVipLevel = input.ReadUInt32();
            break;
          }
          case 16: {
            UnVipExp = input.ReadUInt32();
            break;
          }
          case 24: {
            UnSweepTicketTime = input.ReadUInt32();
            break;
          }
          case 32: {
            UnRepairSignInCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：手动领取每日扫荡券请求
  /// _MSG_VIP_FETCH_SWEEP_TICKET_C
  /// </summary>
  public sealed partial class PMsgVipFetchSweepTicketC : pb::IMessage<PMsgVipFetchSweepTicketC> {
    private static readonly pb::MessageParser<PMsgVipFetchSweepTicketC> _parser = new pb::MessageParser<PMsgVipFetchSweepTicketC>(() => new PMsgVipFetchSweepTicketC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgVipFetchSweepTicketC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgVipReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipFetchSweepTicketC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipFetchSweepTicketC(PMsgVipFetchSweepTicketC other) : this() {
      unReserved_ = other.unReserved_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipFetchSweepTicketC Clone() {
      return new PMsgVipFetchSweepTicketC(this);
    }

    /// <summary>Field number for the "unReserved" field.</summary>
    public const int UnReservedFieldNumber = 1;
    private int unReserved_;
    /// <summary>
    /// 保留字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnReserved {
      get { return unReserved_; }
      set {
        unReserved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgVipFetchSweepTicketC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgVipFetchSweepTicketC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnReserved != other.UnReserved) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnReserved != 0) hash ^= UnReserved.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnReserved != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnReserved);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnReserved != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnReserved);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgVipFetchSweepTicketC other) {
      if (other == null) {
        return;
      }
      if (other.UnReserved != 0) {
        UnReserved = other.UnReserved;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnReserved = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端：手动领取每日扫荡券回复
  /// _MSG_VIP_FETCH_SWEEP_TICKET_S
  /// </summary>
  public sealed partial class PMsgVipFetchSweepTicketS : pb::IMessage<PMsgVipFetchSweepTicketS> {
    private static readonly pb::MessageParser<PMsgVipFetchSweepTicketS> _parser = new pb::MessageParser<PMsgVipFetchSweepTicketS>(() => new PMsgVipFetchSweepTicketS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgVipFetchSweepTicketS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgVipReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipFetchSweepTicketS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipFetchSweepTicketS(PMsgVipFetchSweepTicketS other) : this() {
      unCount_ = other.unCount_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipFetchSweepTicketS Clone() {
      return new PMsgVipFetchSweepTicketS(this);
    }

    /// <summary>Field number for the "unCount" field.</summary>
    public const int UnCountFieldNumber = 1;
    private uint unCount_;
    /// <summary>
    /// 获得的扫荡券数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnCount {
      get { return unCount_; }
      set {
        unCount_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgVipFetchSweepTicketS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgVipFetchSweepTicketS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnCount != other.UnCount) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnCount != 0) hash ^= UnCount.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnCount);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnCount);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgVipFetchSweepTicketS other) {
      if (other == null) {
        return;
      }
      if (other.UnCount != 0) {
        UnCount = other.UnCount;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnCount = input.ReadUInt32();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：补签到请求
  /// _MSG_VIP_REPAIR_SIGN_IN_C
  /// </summary>
  public sealed partial class PMsgVipRepairSignInC : pb::IMessage<PMsgVipRepairSignInC> {
    private static readonly pb::MessageParser<PMsgVipRepairSignInC> _parser = new pb::MessageParser<PMsgVipRepairSignInC>(() => new PMsgVipRepairSignInC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgVipRepairSignInC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgVipReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipRepairSignInC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipRepairSignInC(PMsgVipRepairSignInC other) : this() {
      unReserved_ = other.unReserved_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipRepairSignInC Clone() {
      return new PMsgVipRepairSignInC(this);
    }

    /// <summary>Field number for the "unReserved" field.</summary>
    public const int UnReservedFieldNumber = 1;
    private int unReserved_;
    /// <summary>
    /// 保留字段	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnReserved {
      get { return unReserved_; }
      set {
        unReserved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgVipRepairSignInC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgVipRepairSignInC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnReserved != other.UnReserved) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnReserved != 0) hash ^= UnReserved.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnReserved != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnReserved);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnReserved != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnReserved);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgVipRepairSignInC other) {
      if (other == null) {
        return;
      }
      if (other.UnReserved != 0) {
        UnReserved = other.UnReserved;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnReserved = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端：补签到回复
  /// _MSG_VIP_REPAIR_SIGN_IN_S
  /// </summary>
  public sealed partial class PMsgVipRepairSignInS : pb::IMessage<PMsgVipRepairSignInS> {
    private static readonly pb::MessageParser<PMsgVipRepairSignInS> _parser = new pb::MessageParser<PMsgVipRepairSignInS>(() => new PMsgVipRepairSignInS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgVipRepairSignInS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgVipReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipRepairSignInS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipRepairSignInS(PMsgVipRepairSignInS other) : this() {
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgVipRepairSignInS Clone() {
      return new PMsgVipRepairSignInS(this);
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgVipRepairSignInS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgVipRepairSignInS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgVipRepairSignInS other) {
      if (other == null) {
        return;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
