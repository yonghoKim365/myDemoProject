// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/PMsgRoleIdentify.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sw {

  /// <summary>Holder for reflection information generated from protos/PMsgRoleIdentify.proto</summary>
  public static partial class PMsgRoleIdentifyReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/PMsgRoleIdentify.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PMsgRoleIdentifyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1wcm90b3MvUE1zZ1JvbGVJZGVudGlmeS5wcm90bxICc3ciKwoVUE1zZ1Jv",
            "bGVJZGVudGlmeUxpc3RDEhIKCnVuUmVzZXJ2ZWQYASABKAUiZgoQUm9sZUlk",
            "ZW50aWZ5SW5mbxIMCgR1bklkGAEgASgFEg4KBnVuVHlwZRgCIAEoBRIPCgd1",
            "blBvaW50GAMgASgFEg8KB3VuTGV2ZWwYBCABKAUSEgoKdW5Qb3NpdGlvbhgF",
            "IAEoBSJVChVQTXNnUm9sZUlkZW50aWZ5TGlzdFMSDwoHdW5Db3VudBgBIAEo",
            "BRIrCg1jSWRlbnRpZnlJbmZvGAIgAygLMhQuc3cuUm9sZUlkZW50aWZ5SW5m",
            "byIzCh1QTXNnUm9sZUlkZW50aWZ5VW5sb2NrZWRMaXN0QxISCgp1blJlc2Vy",
            "dmVkGAEgASgFIjsKGFJvbGVJZGVudGlmeVVubG9ja2VkSW5mbxIOCgZ1blR5",
            "cGUYASABKAUSDwoHdW5Qb2ludBgCIAEoBSJlCh1QTXNnUm9sZUlkZW50aWZ5",
            "VW5sb2NrZWRMaXN0UxIPCgd1bkNvdW50GAEgASgFEjMKDWNJZGVudGlmeUlu",
            "Zm8YAiADKAsyHC5zdy5Sb2xlSWRlbnRpZnlVbmxvY2tlZEluZm8iKQoXUE1z",
            "Z1JvbGVJZGVudGlmeVVubG9ja0MSDgoGdW5UeXBlGAEgASgFIj4KF1BNc2dS",
            "b2xlSWRlbnRpZnlVbmxvY2tTEg4KBnVuVHlwZRgBIAEoBRITCgt1bkVycm9y",
            "Q29kZRhjIAEoBSIoChhQTXNnUm9sZUlkZW50aWZ5VXBncmFkZUMSDAoEdW5J",
            "ZBgBIAEoBSI9ChhQTXNnUm9sZUlkZW50aWZ5VXBncmFkZVMSDAoEdW5JZBgB",
            "IAEoBRITCgt1bkVycm9yQ29kZRhjIAEoBSIkChRQTXNnUm9sZUlkZW50aWZ5",
            "VXNlQxIMCgR1bklkGAEgASgFIjkKFFBNc2dSb2xlSWRlbnRpZnlVc2VTEgwK",
            "BHVuSWQYASABKAUSEwoLdW5FcnJvckNvZGUYYyABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgRoleIdentifyListC), global::Sw.PMsgRoleIdentifyListC.Parser, new[]{ "UnReserved" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.RoleIdentifyInfo), global::Sw.RoleIdentifyInfo.Parser, new[]{ "UnId", "UnType", "UnPoint", "UnLevel", "UnPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgRoleIdentifyListS), global::Sw.PMsgRoleIdentifyListS.Parser, new[]{ "UnCount", "CIdentifyInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgRoleIdentifyUnlockedListC), global::Sw.PMsgRoleIdentifyUnlockedListC.Parser, new[]{ "UnReserved" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.RoleIdentifyUnlockedInfo), global::Sw.RoleIdentifyUnlockedInfo.Parser, new[]{ "UnType", "UnPoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgRoleIdentifyUnlockedListS), global::Sw.PMsgRoleIdentifyUnlockedListS.Parser, new[]{ "UnCount", "CIdentifyInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgRoleIdentifyUnlockC), global::Sw.PMsgRoleIdentifyUnlockC.Parser, new[]{ "UnType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgRoleIdentifyUnlockS), global::Sw.PMsgRoleIdentifyUnlockS.Parser, new[]{ "UnType", "UnErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgRoleIdentifyUpgradeC), global::Sw.PMsgRoleIdentifyUpgradeC.Parser, new[]{ "UnId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgRoleIdentifyUpgradeS), global::Sw.PMsgRoleIdentifyUpgradeS.Parser, new[]{ "UnId", "UnErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgRoleIdentifyUseC), global::Sw.PMsgRoleIdentifyUseC.Parser, new[]{ "UnId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgRoleIdentifyUseS), global::Sw.PMsgRoleIdentifyUseS.Parser, new[]{ "UnId", "UnErrorCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 客户端：请求角色身份列表
  /// _MSG_ROLE_IDENTIFY_LIST_C
  /// </summary>
  public sealed partial class PMsgRoleIdentifyListC : pb::IMessage<PMsgRoleIdentifyListC> {
    private static readonly pb::MessageParser<PMsgRoleIdentifyListC> _parser = new pb::MessageParser<PMsgRoleIdentifyListC>(() => new PMsgRoleIdentifyListC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgRoleIdentifyListC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgRoleIdentifyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyListC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyListC(PMsgRoleIdentifyListC other) : this() {
      unReserved_ = other.unReserved_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyListC Clone() {
      return new PMsgRoleIdentifyListC(this);
    }

    /// <summary>Field number for the "unReserved" field.</summary>
    public const int UnReservedFieldNumber = 1;
    private int unReserved_;
    /// <summary>
    /// 保留字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnReserved {
      get { return unReserved_; }
      set {
        unReserved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgRoleIdentifyListC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgRoleIdentifyListC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnReserved != other.UnReserved) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnReserved != 0) hash ^= UnReserved.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnReserved != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnReserved);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnReserved != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnReserved);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgRoleIdentifyListC other) {
      if (other == null) {
        return;
      }
      if (other.UnReserved != 0) {
        UnReserved = other.UnReserved;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnReserved = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色身份信息
  /// </summary>
  public sealed partial class RoleIdentifyInfo : pb::IMessage<RoleIdentifyInfo> {
    private static readonly pb::MessageParser<RoleIdentifyInfo> _parser = new pb::MessageParser<RoleIdentifyInfo>(() => new RoleIdentifyInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleIdentifyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgRoleIdentifyReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleIdentifyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleIdentifyInfo(RoleIdentifyInfo other) : this() {
      unId_ = other.unId_;
      unType_ = other.unType_;
      unPoint_ = other.unPoint_;
      unLevel_ = other.unLevel_;
      unPosition_ = other.unPosition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleIdentifyInfo Clone() {
      return new RoleIdentifyInfo(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private int unId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnId {
      get { return unId_; }
      set {
        unId_ = value;
      }
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 2;
    private int unType_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    /// <summary>Field number for the "unPoint" field.</summary>
    public const int UnPointFieldNumber = 3;
    private int unPoint_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPoint {
      get { return unPoint_; }
      set {
        unPoint_ = value;
      }
    }

    /// <summary>Field number for the "unLevel" field.</summary>
    public const int UnLevelFieldNumber = 4;
    private int unLevel_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnLevel {
      get { return unLevel_; }
      set {
        unLevel_ = value;
      }
    }

    /// <summary>Field number for the "unPosition" field.</summary>
    public const int UnPositionFieldNumber = 5;
    private int unPosition_;
    /// <summary>
    /// 佩戴标志
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPosition {
      get { return unPosition_; }
      set {
        unPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleIdentifyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleIdentifyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnId != other.UnId) return false;
      if (UnType != other.UnType) return false;
      if (UnPoint != other.UnPoint) return false;
      if (UnLevel != other.UnLevel) return false;
      if (UnPosition != other.UnPosition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnId != 0) hash ^= UnId.GetHashCode();
      if (UnType != 0) hash ^= UnType.GetHashCode();
      if (UnPoint != 0) hash ^= UnPoint.GetHashCode();
      if (UnLevel != 0) hash ^= UnLevel.GetHashCode();
      if (UnPosition != 0) hash ^= UnPosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnId);
      }
      if (UnType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnType);
      }
      if (UnPoint != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnPoint);
      }
      if (UnLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnLevel);
      }
      if (UnPosition != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UnPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnId);
      }
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      if (UnPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPoint);
      }
      if (UnLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnLevel);
      }
      if (UnPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPosition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleIdentifyInfo other) {
      if (other == null) {
        return;
      }
      if (other.UnId != 0) {
        UnId = other.UnId;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
      if (other.UnPoint != 0) {
        UnPoint = other.UnPoint;
      }
      if (other.UnLevel != 0) {
        UnLevel = other.UnLevel;
      }
      if (other.UnPosition != 0) {
        UnPosition = other.UnPosition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnId = input.ReadInt32();
            break;
          }
          case 16: {
            UnType = input.ReadInt32();
            break;
          }
          case 24: {
            UnPoint = input.ReadInt32();
            break;
          }
          case 32: {
            UnLevel = input.ReadInt32();
            break;
          }
          case 40: {
            UnPosition = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：请求角色身份列表回复
  /// _MSG_ROLE_IDENTIFY_LIST_S
  /// </summary>
  public sealed partial class PMsgRoleIdentifyListS : pb::IMessage<PMsgRoleIdentifyListS> {
    private static readonly pb::MessageParser<PMsgRoleIdentifyListS> _parser = new pb::MessageParser<PMsgRoleIdentifyListS>(() => new PMsgRoleIdentifyListS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgRoleIdentifyListS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgRoleIdentifyReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyListS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyListS(PMsgRoleIdentifyListS other) : this() {
      unCount_ = other.unCount_;
      cIdentifyInfo_ = other.cIdentifyInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyListS Clone() {
      return new PMsgRoleIdentifyListS(this);
    }

    /// <summary>Field number for the "unCount" field.</summary>
    public const int UnCountFieldNumber = 1;
    private int unCount_;
    /// <summary>
    /// 角色身份数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnCount {
      get { return unCount_; }
      set {
        unCount_ = value;
      }
    }

    /// <summary>Field number for the "cIdentifyInfo" field.</summary>
    public const int CIdentifyInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sw.RoleIdentifyInfo> _repeated_cIdentifyInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Sw.RoleIdentifyInfo.Parser);
    private readonly pbc::RepeatedField<global::Sw.RoleIdentifyInfo> cIdentifyInfo_ = new pbc::RepeatedField<global::Sw.RoleIdentifyInfo>();
    /// <summary>
    /// 角色身份信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.RoleIdentifyInfo> CIdentifyInfo {
      get { return cIdentifyInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgRoleIdentifyListS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgRoleIdentifyListS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnCount != other.UnCount) return false;
      if(!cIdentifyInfo_.Equals(other.cIdentifyInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnCount != 0) hash ^= UnCount.GetHashCode();
      hash ^= cIdentifyInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnCount);
      }
      cIdentifyInfo_.WriteTo(output, _repeated_cIdentifyInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnCount);
      }
      size += cIdentifyInfo_.CalculateSize(_repeated_cIdentifyInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgRoleIdentifyListS other) {
      if (other == null) {
        return;
      }
      if (other.UnCount != 0) {
        UnCount = other.UnCount;
      }
      cIdentifyInfo_.Add(other.cIdentifyInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnCount = input.ReadInt32();
            break;
          }
          case 18: {
            cIdentifyInfo_.AddEntriesFrom(input, _repeated_cIdentifyInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：请求角色未解锁身份列表
  /// _MSG_ROLE_IDENTIFY_UNLOCKED_LIST_C
  /// </summary>
  public sealed partial class PMsgRoleIdentifyUnlockedListC : pb::IMessage<PMsgRoleIdentifyUnlockedListC> {
    private static readonly pb::MessageParser<PMsgRoleIdentifyUnlockedListC> _parser = new pb::MessageParser<PMsgRoleIdentifyUnlockedListC>(() => new PMsgRoleIdentifyUnlockedListC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgRoleIdentifyUnlockedListC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgRoleIdentifyReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUnlockedListC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUnlockedListC(PMsgRoleIdentifyUnlockedListC other) : this() {
      unReserved_ = other.unReserved_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUnlockedListC Clone() {
      return new PMsgRoleIdentifyUnlockedListC(this);
    }

    /// <summary>Field number for the "unReserved" field.</summary>
    public const int UnReservedFieldNumber = 1;
    private int unReserved_;
    /// <summary>
    /// 保留字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnReserved {
      get { return unReserved_; }
      set {
        unReserved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgRoleIdentifyUnlockedListC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgRoleIdentifyUnlockedListC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnReserved != other.UnReserved) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnReserved != 0) hash ^= UnReserved.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnReserved != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnReserved);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnReserved != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnReserved);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgRoleIdentifyUnlockedListC other) {
      if (other == null) {
        return;
      }
      if (other.UnReserved != 0) {
        UnReserved = other.UnReserved;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnReserved = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色身份信息
  /// </summary>
  public sealed partial class RoleIdentifyUnlockedInfo : pb::IMessage<RoleIdentifyUnlockedInfo> {
    private static readonly pb::MessageParser<RoleIdentifyUnlockedInfo> _parser = new pb::MessageParser<RoleIdentifyUnlockedInfo>(() => new RoleIdentifyUnlockedInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleIdentifyUnlockedInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgRoleIdentifyReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleIdentifyUnlockedInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleIdentifyUnlockedInfo(RoleIdentifyUnlockedInfo other) : this() {
      unType_ = other.unType_;
      unPoint_ = other.unPoint_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleIdentifyUnlockedInfo Clone() {
      return new RoleIdentifyUnlockedInfo(this);
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 1;
    private int unType_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    /// <summary>Field number for the "unPoint" field.</summary>
    public const int UnPointFieldNumber = 2;
    private int unPoint_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPoint {
      get { return unPoint_; }
      set {
        unPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleIdentifyUnlockedInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleIdentifyUnlockedInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnType != other.UnType) return false;
      if (UnPoint != other.UnPoint) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnType != 0) hash ^= UnType.GetHashCode();
      if (UnPoint != 0) hash ^= UnPoint.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnType);
      }
      if (UnPoint != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnPoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      if (UnPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPoint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleIdentifyUnlockedInfo other) {
      if (other == null) {
        return;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
      if (other.UnPoint != 0) {
        UnPoint = other.UnPoint;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnType = input.ReadInt32();
            break;
          }
          case 16: {
            UnPoint = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：请求角色未解锁身份列表回复
  /// _MSG_ROLE_IDENTIFY_UNLOCKED_LIST_S
  /// </summary>
  public sealed partial class PMsgRoleIdentifyUnlockedListS : pb::IMessage<PMsgRoleIdentifyUnlockedListS> {
    private static readonly pb::MessageParser<PMsgRoleIdentifyUnlockedListS> _parser = new pb::MessageParser<PMsgRoleIdentifyUnlockedListS>(() => new PMsgRoleIdentifyUnlockedListS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgRoleIdentifyUnlockedListS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgRoleIdentifyReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUnlockedListS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUnlockedListS(PMsgRoleIdentifyUnlockedListS other) : this() {
      unCount_ = other.unCount_;
      cIdentifyInfo_ = other.cIdentifyInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUnlockedListS Clone() {
      return new PMsgRoleIdentifyUnlockedListS(this);
    }

    /// <summary>Field number for the "unCount" field.</summary>
    public const int UnCountFieldNumber = 1;
    private int unCount_;
    /// <summary>
    /// 角色身份数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnCount {
      get { return unCount_; }
      set {
        unCount_ = value;
      }
    }

    /// <summary>Field number for the "cIdentifyInfo" field.</summary>
    public const int CIdentifyInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sw.RoleIdentifyUnlockedInfo> _repeated_cIdentifyInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Sw.RoleIdentifyUnlockedInfo.Parser);
    private readonly pbc::RepeatedField<global::Sw.RoleIdentifyUnlockedInfo> cIdentifyInfo_ = new pbc::RepeatedField<global::Sw.RoleIdentifyUnlockedInfo>();
    /// <summary>
    /// 角色未解锁身份信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.RoleIdentifyUnlockedInfo> CIdentifyInfo {
      get { return cIdentifyInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgRoleIdentifyUnlockedListS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgRoleIdentifyUnlockedListS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnCount != other.UnCount) return false;
      if(!cIdentifyInfo_.Equals(other.cIdentifyInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnCount != 0) hash ^= UnCount.GetHashCode();
      hash ^= cIdentifyInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnCount);
      }
      cIdentifyInfo_.WriteTo(output, _repeated_cIdentifyInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnCount);
      }
      size += cIdentifyInfo_.CalculateSize(_repeated_cIdentifyInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgRoleIdentifyUnlockedListS other) {
      if (other == null) {
        return;
      }
      if (other.UnCount != 0) {
        UnCount = other.UnCount;
      }
      cIdentifyInfo_.Add(other.cIdentifyInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnCount = input.ReadInt32();
            break;
          }
          case 18: {
            cIdentifyInfo_.AddEntriesFrom(input, _repeated_cIdentifyInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：请求角色身份解锁
  /// _MSG_ROLE_IDENTIFY_UNLOCK_C
  /// </summary>
  public sealed partial class PMsgRoleIdentifyUnlockC : pb::IMessage<PMsgRoleIdentifyUnlockC> {
    private static readonly pb::MessageParser<PMsgRoleIdentifyUnlockC> _parser = new pb::MessageParser<PMsgRoleIdentifyUnlockC>(() => new PMsgRoleIdentifyUnlockC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgRoleIdentifyUnlockC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgRoleIdentifyReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUnlockC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUnlockC(PMsgRoleIdentifyUnlockC other) : this() {
      unType_ = other.unType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUnlockC Clone() {
      return new PMsgRoleIdentifyUnlockC(this);
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 1;
    private int unType_;
    /// <summary>
    /// 身份类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgRoleIdentifyUnlockC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgRoleIdentifyUnlockC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnType != other.UnType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnType != 0) hash ^= UnType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgRoleIdentifyUnlockC other) {
      if (other == null) {
        return;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：请求角色身份解锁回复
  /// _MSG_ROLE_IDENTIFY_UNLOCK_S
  /// </summary>
  public sealed partial class PMsgRoleIdentifyUnlockS : pb::IMessage<PMsgRoleIdentifyUnlockS> {
    private static readonly pb::MessageParser<PMsgRoleIdentifyUnlockS> _parser = new pb::MessageParser<PMsgRoleIdentifyUnlockS>(() => new PMsgRoleIdentifyUnlockS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgRoleIdentifyUnlockS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgRoleIdentifyReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUnlockS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUnlockS(PMsgRoleIdentifyUnlockS other) : this() {
      unType_ = other.unType_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUnlockS Clone() {
      return new PMsgRoleIdentifyUnlockS(this);
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 1;
    private int unType_;
    /// <summary>
    /// 身份类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgRoleIdentifyUnlockS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgRoleIdentifyUnlockS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnType != other.UnType) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnType != 0) hash ^= UnType.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnType);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgRoleIdentifyUnlockS other) {
      if (other == null) {
        return;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnType = input.ReadInt32();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：请求角色身份升级
  /// _MSG_ROLE_IDENTIFY_UPGRADE_C
  /// </summary>
  public sealed partial class PMsgRoleIdentifyUpgradeC : pb::IMessage<PMsgRoleIdentifyUpgradeC> {
    private static readonly pb::MessageParser<PMsgRoleIdentifyUpgradeC> _parser = new pb::MessageParser<PMsgRoleIdentifyUpgradeC>(() => new PMsgRoleIdentifyUpgradeC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgRoleIdentifyUpgradeC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgRoleIdentifyReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUpgradeC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUpgradeC(PMsgRoleIdentifyUpgradeC other) : this() {
      unId_ = other.unId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUpgradeC Clone() {
      return new PMsgRoleIdentifyUpgradeC(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private int unId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnId {
      get { return unId_; }
      set {
        unId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgRoleIdentifyUpgradeC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgRoleIdentifyUpgradeC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnId != other.UnId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnId != 0) hash ^= UnId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgRoleIdentifyUpgradeC other) {
      if (other == null) {
        return;
      }
      if (other.UnId != 0) {
        UnId = other.UnId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：请求角色身份升级回复
  /// _MSG_ROLE_IDENTIFY_UPGRADE_S
  /// </summary>
  public sealed partial class PMsgRoleIdentifyUpgradeS : pb::IMessage<PMsgRoleIdentifyUpgradeS> {
    private static readonly pb::MessageParser<PMsgRoleIdentifyUpgradeS> _parser = new pb::MessageParser<PMsgRoleIdentifyUpgradeS>(() => new PMsgRoleIdentifyUpgradeS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgRoleIdentifyUpgradeS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgRoleIdentifyReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUpgradeS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUpgradeS(PMsgRoleIdentifyUpgradeS other) : this() {
      unId_ = other.unId_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUpgradeS Clone() {
      return new PMsgRoleIdentifyUpgradeS(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private int unId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnId {
      get { return unId_; }
      set {
        unId_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgRoleIdentifyUpgradeS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgRoleIdentifyUpgradeS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnId != other.UnId) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnId != 0) hash ^= UnId.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnId);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnId);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgRoleIdentifyUpgradeS other) {
      if (other == null) {
        return;
      }
      if (other.UnId != 0) {
        UnId = other.UnId;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnId = input.ReadInt32();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：请求角色身份佩戴
  /// _MSG_ROLE_IDENTIFY_USE_C
  /// </summary>
  public sealed partial class PMsgRoleIdentifyUseC : pb::IMessage<PMsgRoleIdentifyUseC> {
    private static readonly pb::MessageParser<PMsgRoleIdentifyUseC> _parser = new pb::MessageParser<PMsgRoleIdentifyUseC>(() => new PMsgRoleIdentifyUseC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgRoleIdentifyUseC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgRoleIdentifyReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUseC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUseC(PMsgRoleIdentifyUseC other) : this() {
      unId_ = other.unId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUseC Clone() {
      return new PMsgRoleIdentifyUseC(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private int unId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnId {
      get { return unId_; }
      set {
        unId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgRoleIdentifyUseC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgRoleIdentifyUseC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnId != other.UnId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnId != 0) hash ^= UnId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgRoleIdentifyUseC other) {
      if (other == null) {
        return;
      }
      if (other.UnId != 0) {
        UnId = other.UnId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：请求角色身份佩戴回复
  /// _MSG_ROLE_IDENTIFY_USE_S
  /// </summary>
  public sealed partial class PMsgRoleIdentifyUseS : pb::IMessage<PMsgRoleIdentifyUseS> {
    private static readonly pb::MessageParser<PMsgRoleIdentifyUseS> _parser = new pb::MessageParser<PMsgRoleIdentifyUseS>(() => new PMsgRoleIdentifyUseS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgRoleIdentifyUseS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgRoleIdentifyReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUseS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUseS(PMsgRoleIdentifyUseS other) : this() {
      unId_ = other.unId_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgRoleIdentifyUseS Clone() {
      return new PMsgRoleIdentifyUseS(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private int unId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnId {
      get { return unId_; }
      set {
        unId_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgRoleIdentifyUseS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgRoleIdentifyUseS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnId != other.UnId) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnId != 0) hash ^= UnId.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnId);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnId);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgRoleIdentifyUseS other) {
      if (other == null) {
        return;
      }
      if (other.UnId != 0) {
        UnId = other.UnId;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnId = input.ReadInt32();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
