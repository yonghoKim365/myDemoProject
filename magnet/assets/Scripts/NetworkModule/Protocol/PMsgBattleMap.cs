// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/PMsgBattleMap.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sw {

  /// <summary>Holder for reflection information generated from protos/PMsgBattleMap.proto</summary>
  public static partial class PMsgBattleMapReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/PMsgBattleMap.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PMsgBattleMapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chpwcm90b3MvUE1zZ0JhdHRsZU1hcC5wcm90bxICc3ciLgobUE1zZ0JhdHRs",
            "ZU1hcEVudGVyTWFwUmVhZHlDEg8KB3VuTWFwSWQYASABKAUikQIKFlBNc2dC",
            "YXR0bGVNYXBFbnRlck1hcFMSDwoHdW5NYXBJZBgBIAEoBRIRCgl1bk1hcFR5",
            "cGUYAiABKAUSDgoGdW5Qb3NYGAMgASgFEg4KBnVuUG9zWRgEIAEoBRINCgV1",
            "bkRpchgFIAEoBRIPCgd1bkxldmVsGAYgASgFEgwKBHVuSHAYByABKAUSDwoH",
            "dW5NYXhIcBgIIAEoBRITCgt1bkNvc3R1bWVJZBgJIAEoBRIZChF1bkNvc3R1",
            "bWVTaG93RmxhZxgKIAEoBRIVCg11bkVxdWlwbWVudElkGAsgAygFEhQKDHVu",
            "U3VwZXJBcm1vchgMIAEoBRIXCg91bk1heFN1cGVyQXJtb3IYDSABKAUiYwoW",
            "UE1zZ0JhdHRsZU1hcExlYXZlTWFwUxIPCgd1bk1hcElkGAEgASgFEhEKCXVu",
            "TWFwVHlwZRgCIAEoBRIRCgl1bGxSb2xlSWQYAyABKAMSEgoKdW5Sb2xlVHlw",
            "ZRgEIAEoBSLHAwoWUE1zZ0JhdHRsZU1hcFJvbGVJbmZvUxIRCgl1bGxSb2xl",
            "SWQYASABKAMSDgoGc3pOYW1lGAIgASgJEg4KBnVuVHlwZRgDIAEoBRIPCgd1",
            "bkxldmVsGAQgASgFEg4KBnVuUG9zWBgFIAEoBRIOCgZ1blBvc1kYBiABKAUS",
            "DQoFdW5EaXIYByABKAUSDAoEdW5IcBgIIAEoBRIPCgd1bk1heEhwGAkgASgF",
            "EjIKBWNJbmZvGAogAygLMiMuc3cuUE1zZ0JhdHRsZU1hcFJvbGVJbmZvUy5C",
            "dWZmSW5mbxITCgt1bkNvc3R1bWVJZBgLIAEoBRIZChF1bkNvc3R1bWVTaG93",
            "RmxhZxgMIAEoBRIVCg11bkVxdWlwbWVudElkGA0gAygFEhIKCnVuVmlwTGV2",
            "ZWwYDiABKA0SFQoNdW5UaXRsZVByZWZpeBgPIAEoDRIVCg11blRpdGxlU3Vm",
            "Zml4GBAgASgNEhQKDHVuU3VwZXJBcm1vchgRIAEoBRIXCg91bk1heFN1cGVy",
            "QXJtb3IYEiABKAUaLwoIQnVmZkluZm8SEAoIdW5CdWZmSWQYASABKAUSEQoJ",
            "ZkJ1ZmZUaW1lGAIgASgCIk4KDEJhdHRsZU1hcFBvcxIOCgZ1blBvc1gYASAB",
            "KAUSDgoGdW5Qb3NZGAIgASgFEg4KBmZEYXRhMRgDIAEoAhIOCgZmRGF0YTIY",
            "BCABKAIibQoTUE1zZ0JhdHRsZU1hcE1vdmVDUxIPCgd1bk1hcElkGAEgASgF",
            "EiEKB2NNYXBQb3MYAiADKAsyEC5zdy5CYXR0bGVNYXBQb3MSDQoFdW5EaXIY",
            "AyABKAUSEwoLdW5FcnJvckNvZGUYYyABKAUiggEKFlBNc2dCYXR0bGVNYXBN",
            "b3ZlUmVjdlMSEQoJdWxsUm9sZUlkGAEgASgDEhIKCnVuUm9sZVR5cGUYAiAB",
            "KAUSDwoHdW5NYXBJZBgDIAEoBRIhCgdjTWFwUG9zGAQgAygLMhAuc3cuQmF0",
            "dGxlTWFwUG9zEg0KBXVuRGlyGAUgASgFInsKElBNc2dCYXR0bGVNYXBLaWNr",
            "UxIPCgd1bk1hcElkGAEgASgFEg4KBnVuTmV3WBgCIAEoBRIOCgZ1bk5ld1kY",
            "AyABKAUSDQoFdW5EaXIYBCABKAUSEQoJdWxsUm9sZUlkGAUgASgDEhIKCnVu",
            "Um9sZVR5cGUYBiABKAUiegoRUE1zZ0JhdHRsZU1hcEZseVMSEQoJdWxsUm9s",
            "ZUlkGAEgASgDEhIKCnVuUm9sZVR5cGUYAiABKAUSDwoHdW5NYXBJZBgDIAEo",
            "BRIOCgZ1bk5ld1gYBCABKAUSDgoGdW5OZXdZGAUgASgFEg0KBXVuRGlyGAYg",
            "ASgFIuEBChZQTXNnQmF0dGxlTWFwSGVyb0luZm9TEhEKCXVsbEhlcm9JZBgB",
            "IAEoAxIWCg51bGxPd25lclJvbGVJZBgCIAEoAxIOCgZ1blR5cGUYAyABKAUS",
            "DwoHdW5MZXZlbBgEIAEoBRIOCgZ1blBvc1gYBSABKAUSDgoGdW5Qb3NZGAYg",
            "ASgFEg0KBXVuRGlyGAcgASgFEgwKBHVuSHAYCCABKAUSDwoHdW5NYXhIcBgJ",
            "IAEoBRIUCgx1blN1cGVyQXJtb3IYCiABKAUSFwoPdW5NYXhTdXBlckFybW9y",
            "GAsgASgFIn4KElBNc2dCYXR0bGVNYXBNb3ZlQxIRCgl1bGxSb2xlSWQYASAB",
            "KAMSEgoKdW5Sb2xlVHlwZRgCIAEoBRIPCgd1bk1hcElkGAMgASgFEiEKB2NN",
            "YXBQb3MYBCADKAsyEC5zdy5CYXR0bGVNYXBQb3MSDQoFdW5EaXIYBSABKAUi",
            "kwEKElBNc2dCYXR0bGVNYXBNb3ZlUxIRCgl1bGxSb2xlSWQYASABKAMSEgoK",
            "dW5Sb2xlVHlwZRgCIAEoBRIPCgd1bk1hcElkGAMgASgFEiEKB2NNYXBQb3MY",
            "BCADKAsyEC5zdy5CYXR0bGVNYXBQb3MSDQoFdW5EaXIYBSABKAUSEwoLdW5F",
            "cnJvckNvZGUYYyABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleMapEnterMapReadyC), global::Sw.PMsgBattleMapEnterMapReadyC.Parser, new[]{ "UnMapId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleMapEnterMapS), global::Sw.PMsgBattleMapEnterMapS.Parser, new[]{ "UnMapId", "UnMapType", "UnPosX", "UnPosY", "UnDir", "UnLevel", "UnHp", "UnMaxHp", "UnCostumeId", "UnCostumeShowFlag", "UnEquipmentId", "UnSuperArmor", "UnMaxSuperArmor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleMapLeaveMapS), global::Sw.PMsgBattleMapLeaveMapS.Parser, new[]{ "UnMapId", "UnMapType", "UllRoleId", "UnRoleType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleMapRoleInfoS), global::Sw.PMsgBattleMapRoleInfoS.Parser, new[]{ "UllRoleId", "SzName", "UnType", "UnLevel", "UnPosX", "UnPosY", "UnDir", "UnHp", "UnMaxHp", "CInfo", "UnCostumeId", "UnCostumeShowFlag", "UnEquipmentId", "UnVipLevel", "UnTitlePrefix", "UnTitleSuffix", "UnSuperArmor", "UnMaxSuperArmor" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleMapRoleInfoS.Types.BuffInfo), global::Sw.PMsgBattleMapRoleInfoS.Types.BuffInfo.Parser, new[]{ "UnBuffId", "FBuffTime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.BattleMapPos), global::Sw.BattleMapPos.Parser, new[]{ "UnPosX", "UnPosY", "FData1", "FData2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleMapMoveCS), global::Sw.PMsgBattleMapMoveCS.Parser, new[]{ "UnMapId", "CMapPos", "UnDir", "UnErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleMapMoveRecvS), global::Sw.PMsgBattleMapMoveRecvS.Parser, new[]{ "UllRoleId", "UnRoleType", "UnMapId", "CMapPos", "UnDir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleMapKickS), global::Sw.PMsgBattleMapKickS.Parser, new[]{ "UnMapId", "UnNewX", "UnNewY", "UnDir", "UllRoleId", "UnRoleType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleMapFlyS), global::Sw.PMsgBattleMapFlyS.Parser, new[]{ "UllRoleId", "UnRoleType", "UnMapId", "UnNewX", "UnNewY", "UnDir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleMapHeroInfoS), global::Sw.PMsgBattleMapHeroInfoS.Parser, new[]{ "UllHeroId", "UllOwnerRoleId", "UnType", "UnLevel", "UnPosX", "UnPosY", "UnDir", "UnHp", "UnMaxHp", "UnSuperArmor", "UnMaxSuperArmor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleMapMoveC), global::Sw.PMsgBattleMapMoveC.Parser, new[]{ "UllRoleId", "UnRoleType", "UnMapId", "CMapPos", "UnDir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleMapMoveS), global::Sw.PMsgBattleMapMoveS.Parser, new[]{ "UllRoleId", "UnRoleType", "UnMapId", "CMapPos", "UnDir", "UnErrorCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 客户端：准备完毕请求进入地图
  /// _MSG_BATTLE_MAP_ENTER_MAP_READY_C
  /// </summary>
  public sealed partial class PMsgBattleMapEnterMapReadyC : pb::IMessage<PMsgBattleMapEnterMapReadyC> {
    private static readonly pb::MessageParser<PMsgBattleMapEnterMapReadyC> _parser = new pb::MessageParser<PMsgBattleMapEnterMapReadyC>(() => new PMsgBattleMapEnterMapReadyC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleMapEnterMapReadyC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleMapReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapEnterMapReadyC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapEnterMapReadyC(PMsgBattleMapEnterMapReadyC other) : this() {
      unMapId_ = other.unMapId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapEnterMapReadyC Clone() {
      return new PMsgBattleMapEnterMapReadyC(this);
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 1;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleMapEnterMapReadyC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleMapEnterMapReadyC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnMapId != other.UnMapId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnMapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnMapId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleMapEnterMapReadyC other) {
      if (other == null) {
        return;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnMapId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：进入地图（自己）
  /// _MSG_BATTLE_MAP_ENTER_MAP_S
  /// </summary>
  public sealed partial class PMsgBattleMapEnterMapS : pb::IMessage<PMsgBattleMapEnterMapS> {
    private static readonly pb::MessageParser<PMsgBattleMapEnterMapS> _parser = new pb::MessageParser<PMsgBattleMapEnterMapS>(() => new PMsgBattleMapEnterMapS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleMapEnterMapS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleMapReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapEnterMapS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapEnterMapS(PMsgBattleMapEnterMapS other) : this() {
      unMapId_ = other.unMapId_;
      unMapType_ = other.unMapType_;
      unPosX_ = other.unPosX_;
      unPosY_ = other.unPosY_;
      unDir_ = other.unDir_;
      unLevel_ = other.unLevel_;
      unHp_ = other.unHp_;
      unMaxHp_ = other.unMaxHp_;
      unCostumeId_ = other.unCostumeId_;
      unCostumeShowFlag_ = other.unCostumeShowFlag_;
      unEquipmentId_ = other.unEquipmentId_.Clone();
      unSuperArmor_ = other.unSuperArmor_;
      unMaxSuperArmor_ = other.unMaxSuperArmor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapEnterMapS Clone() {
      return new PMsgBattleMapEnterMapS(this);
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 1;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    /// <summary>Field number for the "unMapType" field.</summary>
    public const int UnMapTypeFieldNumber = 2;
    private int unMapType_;
    /// <summary>
    /// 地图类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapType {
      get { return unMapType_; }
      set {
        unMapType_ = value;
      }
    }

    /// <summary>Field number for the "unPosX" field.</summary>
    public const int UnPosXFieldNumber = 3;
    private int unPosX_;
    /// <summary>
    /// 坐标：X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPosX {
      get { return unPosX_; }
      set {
        unPosX_ = value;
      }
    }

    /// <summary>Field number for the "unPosY" field.</summary>
    public const int UnPosYFieldNumber = 4;
    private int unPosY_;
    /// <summary>
    /// 坐标：Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPosY {
      get { return unPosY_; }
      set {
        unPosY_ = value;
      }
    }

    /// <summary>Field number for the "unDir" field.</summary>
    public const int UnDirFieldNumber = 5;
    private int unDir_;
    /// <summary>
    /// 朝向（sw::MAP_DIR）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnDir {
      get { return unDir_; }
      set {
        unDir_ = value;
      }
    }

    /// <summary>Field number for the "unLevel" field.</summary>
    public const int UnLevelFieldNumber = 6;
    private int unLevel_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnLevel {
      get { return unLevel_; }
      set {
        unLevel_ = value;
      }
    }

    /// <summary>Field number for the "unHp" field.</summary>
    public const int UnHpFieldNumber = 7;
    private int unHp_;
    /// <summary>
    /// 血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnHp {
      get { return unHp_; }
      set {
        unHp_ = value;
      }
    }

    /// <summary>Field number for the "unMaxHp" field.</summary>
    public const int UnMaxHpFieldNumber = 8;
    private int unMaxHp_;
    /// <summary>
    /// 血量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMaxHp {
      get { return unMaxHp_; }
      set {
        unMaxHp_ = value;
      }
    }

    /// <summary>Field number for the "unCostumeId" field.</summary>
    public const int UnCostumeIdFieldNumber = 9;
    private int unCostumeId_;
    /// <summary>
    /// 时装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnCostumeId {
      get { return unCostumeId_; }
      set {
        unCostumeId_ = value;
      }
    }

    /// <summary>Field number for the "unCostumeShowFlag" field.</summary>
    public const int UnCostumeShowFlagFieldNumber = 10;
    private int unCostumeShowFlag_;
    /// <summary>
    /// 时装显示状态(sw::COSTUME_FLAG_TYPE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnCostumeShowFlag {
      get { return unCostumeShowFlag_; }
      set {
        unCostumeShowFlag_ = value;
      }
    }

    /// <summary>Field number for the "unEquipmentId" field.</summary>
    public const int UnEquipmentIdFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_unEquipmentId_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> unEquipmentId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 装备id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnEquipmentId {
      get { return unEquipmentId_; }
    }

    /// <summary>Field number for the "unSuperArmor" field.</summary>
    public const int UnSuperArmorFieldNumber = 12;
    private int unSuperArmor_;
    /// <summary>
    /// 破防值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnSuperArmor {
      get { return unSuperArmor_; }
      set {
        unSuperArmor_ = value;
      }
    }

    /// <summary>Field number for the "unMaxSuperArmor" field.</summary>
    public const int UnMaxSuperArmorFieldNumber = 13;
    private int unMaxSuperArmor_;
    /// <summary>
    /// 破防值上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMaxSuperArmor {
      get { return unMaxSuperArmor_; }
      set {
        unMaxSuperArmor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleMapEnterMapS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleMapEnterMapS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnMapId != other.UnMapId) return false;
      if (UnMapType != other.UnMapType) return false;
      if (UnPosX != other.UnPosX) return false;
      if (UnPosY != other.UnPosY) return false;
      if (UnDir != other.UnDir) return false;
      if (UnLevel != other.UnLevel) return false;
      if (UnHp != other.UnHp) return false;
      if (UnMaxHp != other.UnMaxHp) return false;
      if (UnCostumeId != other.UnCostumeId) return false;
      if (UnCostumeShowFlag != other.UnCostumeShowFlag) return false;
      if(!unEquipmentId_.Equals(other.unEquipmentId_)) return false;
      if (UnSuperArmor != other.UnSuperArmor) return false;
      if (UnMaxSuperArmor != other.UnMaxSuperArmor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      if (UnMapType != 0) hash ^= UnMapType.GetHashCode();
      if (UnPosX != 0) hash ^= UnPosX.GetHashCode();
      if (UnPosY != 0) hash ^= UnPosY.GetHashCode();
      if (UnDir != 0) hash ^= UnDir.GetHashCode();
      if (UnLevel != 0) hash ^= UnLevel.GetHashCode();
      if (UnHp != 0) hash ^= UnHp.GetHashCode();
      if (UnMaxHp != 0) hash ^= UnMaxHp.GetHashCode();
      if (UnCostumeId != 0) hash ^= UnCostumeId.GetHashCode();
      if (UnCostumeShowFlag != 0) hash ^= UnCostumeShowFlag.GetHashCode();
      hash ^= unEquipmentId_.GetHashCode();
      if (UnSuperArmor != 0) hash ^= UnSuperArmor.GetHashCode();
      if (UnMaxSuperArmor != 0) hash ^= UnMaxSuperArmor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnMapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnMapId);
      }
      if (UnMapType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnMapType);
      }
      if (UnPosX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnPosX);
      }
      if (UnPosY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnPosY);
      }
      if (UnDir != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UnDir);
      }
      if (UnLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UnLevel);
      }
      if (UnHp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UnHp);
      }
      if (UnMaxHp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UnMaxHp);
      }
      if (UnCostumeId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(UnCostumeId);
      }
      if (UnCostumeShowFlag != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UnCostumeShowFlag);
      }
      unEquipmentId_.WriteTo(output, _repeated_unEquipmentId_codec);
      if (UnSuperArmor != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(UnSuperArmor);
      }
      if (UnMaxSuperArmor != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(UnMaxSuperArmor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      if (UnMapType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapType);
      }
      if (UnPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPosX);
      }
      if (UnPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPosY);
      }
      if (UnDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnDir);
      }
      if (UnLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnLevel);
      }
      if (UnHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnHp);
      }
      if (UnMaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMaxHp);
      }
      if (UnCostumeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnCostumeId);
      }
      if (UnCostumeShowFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnCostumeShowFlag);
      }
      size += unEquipmentId_.CalculateSize(_repeated_unEquipmentId_codec);
      if (UnSuperArmor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnSuperArmor);
      }
      if (UnMaxSuperArmor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMaxSuperArmor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleMapEnterMapS other) {
      if (other == null) {
        return;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
      if (other.UnMapType != 0) {
        UnMapType = other.UnMapType;
      }
      if (other.UnPosX != 0) {
        UnPosX = other.UnPosX;
      }
      if (other.UnPosY != 0) {
        UnPosY = other.UnPosY;
      }
      if (other.UnDir != 0) {
        UnDir = other.UnDir;
      }
      if (other.UnLevel != 0) {
        UnLevel = other.UnLevel;
      }
      if (other.UnHp != 0) {
        UnHp = other.UnHp;
      }
      if (other.UnMaxHp != 0) {
        UnMaxHp = other.UnMaxHp;
      }
      if (other.UnCostumeId != 0) {
        UnCostumeId = other.UnCostumeId;
      }
      if (other.UnCostumeShowFlag != 0) {
        UnCostumeShowFlag = other.UnCostumeShowFlag;
      }
      unEquipmentId_.Add(other.unEquipmentId_);
      if (other.UnSuperArmor != 0) {
        UnSuperArmor = other.UnSuperArmor;
      }
      if (other.UnMaxSuperArmor != 0) {
        UnMaxSuperArmor = other.UnMaxSuperArmor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnMapId = input.ReadInt32();
            break;
          }
          case 16: {
            UnMapType = input.ReadInt32();
            break;
          }
          case 24: {
            UnPosX = input.ReadInt32();
            break;
          }
          case 32: {
            UnPosY = input.ReadInt32();
            break;
          }
          case 40: {
            UnDir = input.ReadInt32();
            break;
          }
          case 48: {
            UnLevel = input.ReadInt32();
            break;
          }
          case 56: {
            UnHp = input.ReadInt32();
            break;
          }
          case 64: {
            UnMaxHp = input.ReadInt32();
            break;
          }
          case 72: {
            UnCostumeId = input.ReadInt32();
            break;
          }
          case 80: {
            UnCostumeShowFlag = input.ReadInt32();
            break;
          }
          case 90:
          case 88: {
            unEquipmentId_.AddEntriesFrom(input, _repeated_unEquipmentId_codec);
            break;
          }
          case 96: {
            UnSuperArmor = input.ReadInt32();
            break;
          }
          case 104: {
            UnMaxSuperArmor = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：离开地图
  /// _MSG_BATTLE_MAP_LEAVE_MAP_S
  /// </summary>
  public sealed partial class PMsgBattleMapLeaveMapS : pb::IMessage<PMsgBattleMapLeaveMapS> {
    private static readonly pb::MessageParser<PMsgBattleMapLeaveMapS> _parser = new pb::MessageParser<PMsgBattleMapLeaveMapS>(() => new PMsgBattleMapLeaveMapS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleMapLeaveMapS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleMapReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapLeaveMapS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapLeaveMapS(PMsgBattleMapLeaveMapS other) : this() {
      unMapId_ = other.unMapId_;
      unMapType_ = other.unMapType_;
      ullRoleId_ = other.ullRoleId_;
      unRoleType_ = other.unRoleType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapLeaveMapS Clone() {
      return new PMsgBattleMapLeaveMapS(this);
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 1;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    /// <summary>Field number for the "unMapType" field.</summary>
    public const int UnMapTypeFieldNumber = 2;
    private int unMapType_;
    /// <summary>
    /// 地图类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapType {
      get { return unMapType_; }
      set {
        unMapType_ = value;
      }
    }

    /// <summary>Field number for the "ullRoleId" field.</summary>
    public const int UllRoleIdFieldNumber = 3;
    private long ullRoleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllRoleId {
      get { return ullRoleId_; }
      set {
        ullRoleId_ = value;
      }
    }

    /// <summary>Field number for the "unRoleType" field.</summary>
    public const int UnRoleTypeFieldNumber = 4;
    private int unRoleType_;
    /// <summary>
    /// 目标类型（sw::ROLE_TYPE）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnRoleType {
      get { return unRoleType_; }
      set {
        unRoleType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleMapLeaveMapS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleMapLeaveMapS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnMapId != other.UnMapId) return false;
      if (UnMapType != other.UnMapType) return false;
      if (UllRoleId != other.UllRoleId) return false;
      if (UnRoleType != other.UnRoleType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      if (UnMapType != 0) hash ^= UnMapType.GetHashCode();
      if (UllRoleId != 0L) hash ^= UllRoleId.GetHashCode();
      if (UnRoleType != 0) hash ^= UnRoleType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnMapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnMapId);
      }
      if (UnMapType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnMapType);
      }
      if (UllRoleId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UllRoleId);
      }
      if (UnRoleType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnRoleType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      if (UnMapType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapType);
      }
      if (UllRoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllRoleId);
      }
      if (UnRoleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnRoleType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleMapLeaveMapS other) {
      if (other == null) {
        return;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
      if (other.UnMapType != 0) {
        UnMapType = other.UnMapType;
      }
      if (other.UllRoleId != 0L) {
        UllRoleId = other.UllRoleId;
      }
      if (other.UnRoleType != 0) {
        UnRoleType = other.UnRoleType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnMapId = input.ReadInt32();
            break;
          }
          case 16: {
            UnMapType = input.ReadInt32();
            break;
          }
          case 24: {
            UllRoleId = input.ReadInt64();
            break;
          }
          case 32: {
            UnRoleType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：角色信息地图广播
  /// _MSG_BATTLE_MAP_ROLE_INFO_S
  /// </summary>
  public sealed partial class PMsgBattleMapRoleInfoS : pb::IMessage<PMsgBattleMapRoleInfoS> {
    private static readonly pb::MessageParser<PMsgBattleMapRoleInfoS> _parser = new pb::MessageParser<PMsgBattleMapRoleInfoS>(() => new PMsgBattleMapRoleInfoS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleMapRoleInfoS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleMapReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapRoleInfoS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapRoleInfoS(PMsgBattleMapRoleInfoS other) : this() {
      ullRoleId_ = other.ullRoleId_;
      szName_ = other.szName_;
      unType_ = other.unType_;
      unLevel_ = other.unLevel_;
      unPosX_ = other.unPosX_;
      unPosY_ = other.unPosY_;
      unDir_ = other.unDir_;
      unHp_ = other.unHp_;
      unMaxHp_ = other.unMaxHp_;
      cInfo_ = other.cInfo_.Clone();
      unCostumeId_ = other.unCostumeId_;
      unCostumeShowFlag_ = other.unCostumeShowFlag_;
      unEquipmentId_ = other.unEquipmentId_.Clone();
      unVipLevel_ = other.unVipLevel_;
      unTitlePrefix_ = other.unTitlePrefix_;
      unTitleSuffix_ = other.unTitleSuffix_;
      unSuperArmor_ = other.unSuperArmor_;
      unMaxSuperArmor_ = other.unMaxSuperArmor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapRoleInfoS Clone() {
      return new PMsgBattleMapRoleInfoS(this);
    }

    /// <summary>Field number for the "ullRoleId" field.</summary>
    public const int UllRoleIdFieldNumber = 1;
    private long ullRoleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllRoleId {
      get { return ullRoleId_; }
      set {
        ullRoleId_ = value;
      }
    }

    /// <summary>Field number for the "szName" field.</summary>
    public const int SzNameFieldNumber = 2;
    private string szName_ = "";
    /// <summary>
    /// 角色名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzName {
      get { return szName_; }
      set {
        szName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 3;
    private int unType_;
    /// <summary>
    /// 角色类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    /// <summary>Field number for the "unLevel" field.</summary>
    public const int UnLevelFieldNumber = 4;
    private int unLevel_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnLevel {
      get { return unLevel_; }
      set {
        unLevel_ = value;
      }
    }

    /// <summary>Field number for the "unPosX" field.</summary>
    public const int UnPosXFieldNumber = 5;
    private int unPosX_;
    /// <summary>
    /// 坐标X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPosX {
      get { return unPosX_; }
      set {
        unPosX_ = value;
      }
    }

    /// <summary>Field number for the "unPosY" field.</summary>
    public const int UnPosYFieldNumber = 6;
    private int unPosY_;
    /// <summary>
    /// 坐标Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPosY {
      get { return unPosY_; }
      set {
        unPosY_ = value;
      }
    }

    /// <summary>Field number for the "unDir" field.</summary>
    public const int UnDirFieldNumber = 7;
    private int unDir_;
    /// <summary>
    /// 朝向（sw::MAP_DIR）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnDir {
      get { return unDir_; }
      set {
        unDir_ = value;
      }
    }

    /// <summary>Field number for the "unHp" field.</summary>
    public const int UnHpFieldNumber = 8;
    private int unHp_;
    /// <summary>
    /// 血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnHp {
      get { return unHp_; }
      set {
        unHp_ = value;
      }
    }

    /// <summary>Field number for the "unMaxHp" field.</summary>
    public const int UnMaxHpFieldNumber = 9;
    private int unMaxHp_;
    /// <summary>
    /// 血量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMaxHp {
      get { return unMaxHp_; }
      set {
        unMaxHp_ = value;
      }
    }

    /// <summary>Field number for the "cInfo" field.</summary>
    public const int CInfoFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Sw.PMsgBattleMapRoleInfoS.Types.BuffInfo> _repeated_cInfo_codec
        = pb::FieldCodec.ForMessage(82, global::Sw.PMsgBattleMapRoleInfoS.Types.BuffInfo.Parser);
    private readonly pbc::RepeatedField<global::Sw.PMsgBattleMapRoleInfoS.Types.BuffInfo> cInfo_ = new pbc::RepeatedField<global::Sw.PMsgBattleMapRoleInfoS.Types.BuffInfo>();
    /// <summary>
    /// Buff信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.PMsgBattleMapRoleInfoS.Types.BuffInfo> CInfo {
      get { return cInfo_; }
    }

    /// <summary>Field number for the "unCostumeId" field.</summary>
    public const int UnCostumeIdFieldNumber = 11;
    private int unCostumeId_;
    /// <summary>
    /// 时装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnCostumeId {
      get { return unCostumeId_; }
      set {
        unCostumeId_ = value;
      }
    }

    /// <summary>Field number for the "unCostumeShowFlag" field.</summary>
    public const int UnCostumeShowFlagFieldNumber = 12;
    private int unCostumeShowFlag_;
    /// <summary>
    /// 时装显示状态(sw::COSTUME_FLAG_TYPE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnCostumeShowFlag {
      get { return unCostumeShowFlag_; }
      set {
        unCostumeShowFlag_ = value;
      }
    }

    /// <summary>Field number for the "unEquipmentId" field.</summary>
    public const int UnEquipmentIdFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_unEquipmentId_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> unEquipmentId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 装备id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnEquipmentId {
      get { return unEquipmentId_; }
    }

    /// <summary>Field number for the "unVipLevel" field.</summary>
    public const int UnVipLevelFieldNumber = 14;
    private uint unVipLevel_;
    /// <summary>
    /// VIP等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnVipLevel {
      get { return unVipLevel_; }
      set {
        unVipLevel_ = value;
      }
    }

    /// <summary>Field number for the "unTitlePrefix" field.</summary>
    public const int UnTitlePrefixFieldNumber = 15;
    private uint unTitlePrefix_;
    /// <summary>
    /// 头衔前缀
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTitlePrefix {
      get { return unTitlePrefix_; }
      set {
        unTitlePrefix_ = value;
      }
    }

    /// <summary>Field number for the "unTitleSuffix" field.</summary>
    public const int UnTitleSuffixFieldNumber = 16;
    private uint unTitleSuffix_;
    /// <summary>
    /// 头衔后缀
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTitleSuffix {
      get { return unTitleSuffix_; }
      set {
        unTitleSuffix_ = value;
      }
    }

    /// <summary>Field number for the "unSuperArmor" field.</summary>
    public const int UnSuperArmorFieldNumber = 17;
    private int unSuperArmor_;
    /// <summary>
    /// 破防值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnSuperArmor {
      get { return unSuperArmor_; }
      set {
        unSuperArmor_ = value;
      }
    }

    /// <summary>Field number for the "unMaxSuperArmor" field.</summary>
    public const int UnMaxSuperArmorFieldNumber = 18;
    private int unMaxSuperArmor_;
    /// <summary>
    /// 破防值上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMaxSuperArmor {
      get { return unMaxSuperArmor_; }
      set {
        unMaxSuperArmor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleMapRoleInfoS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleMapRoleInfoS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UllRoleId != other.UllRoleId) return false;
      if (SzName != other.SzName) return false;
      if (UnType != other.UnType) return false;
      if (UnLevel != other.UnLevel) return false;
      if (UnPosX != other.UnPosX) return false;
      if (UnPosY != other.UnPosY) return false;
      if (UnDir != other.UnDir) return false;
      if (UnHp != other.UnHp) return false;
      if (UnMaxHp != other.UnMaxHp) return false;
      if(!cInfo_.Equals(other.cInfo_)) return false;
      if (UnCostumeId != other.UnCostumeId) return false;
      if (UnCostumeShowFlag != other.UnCostumeShowFlag) return false;
      if(!unEquipmentId_.Equals(other.unEquipmentId_)) return false;
      if (UnVipLevel != other.UnVipLevel) return false;
      if (UnTitlePrefix != other.UnTitlePrefix) return false;
      if (UnTitleSuffix != other.UnTitleSuffix) return false;
      if (UnSuperArmor != other.UnSuperArmor) return false;
      if (UnMaxSuperArmor != other.UnMaxSuperArmor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UllRoleId != 0L) hash ^= UllRoleId.GetHashCode();
      if (SzName.Length != 0) hash ^= SzName.GetHashCode();
      if (UnType != 0) hash ^= UnType.GetHashCode();
      if (UnLevel != 0) hash ^= UnLevel.GetHashCode();
      if (UnPosX != 0) hash ^= UnPosX.GetHashCode();
      if (UnPosY != 0) hash ^= UnPosY.GetHashCode();
      if (UnDir != 0) hash ^= UnDir.GetHashCode();
      if (UnHp != 0) hash ^= UnHp.GetHashCode();
      if (UnMaxHp != 0) hash ^= UnMaxHp.GetHashCode();
      hash ^= cInfo_.GetHashCode();
      if (UnCostumeId != 0) hash ^= UnCostumeId.GetHashCode();
      if (UnCostumeShowFlag != 0) hash ^= UnCostumeShowFlag.GetHashCode();
      hash ^= unEquipmentId_.GetHashCode();
      if (UnVipLevel != 0) hash ^= UnVipLevel.GetHashCode();
      if (UnTitlePrefix != 0) hash ^= UnTitlePrefix.GetHashCode();
      if (UnTitleSuffix != 0) hash ^= UnTitleSuffix.GetHashCode();
      if (UnSuperArmor != 0) hash ^= UnSuperArmor.GetHashCode();
      if (UnMaxSuperArmor != 0) hash ^= UnMaxSuperArmor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UllRoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UllRoleId);
      }
      if (SzName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SzName);
      }
      if (UnType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnType);
      }
      if (UnLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnLevel);
      }
      if (UnPosX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UnPosX);
      }
      if (UnPosY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UnPosY);
      }
      if (UnDir != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UnDir);
      }
      if (UnHp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UnHp);
      }
      if (UnMaxHp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(UnMaxHp);
      }
      cInfo_.WriteTo(output, _repeated_cInfo_codec);
      if (UnCostumeId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(UnCostumeId);
      }
      if (UnCostumeShowFlag != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(UnCostumeShowFlag);
      }
      unEquipmentId_.WriteTo(output, _repeated_unEquipmentId_codec);
      if (UnVipLevel != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(UnVipLevel);
      }
      if (UnTitlePrefix != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(UnTitlePrefix);
      }
      if (UnTitleSuffix != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(UnTitleSuffix);
      }
      if (UnSuperArmor != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(UnSuperArmor);
      }
      if (UnMaxSuperArmor != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(UnMaxSuperArmor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UllRoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllRoleId);
      }
      if (SzName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzName);
      }
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      if (UnLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnLevel);
      }
      if (UnPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPosX);
      }
      if (UnPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPosY);
      }
      if (UnDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnDir);
      }
      if (UnHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnHp);
      }
      if (UnMaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMaxHp);
      }
      size += cInfo_.CalculateSize(_repeated_cInfo_codec);
      if (UnCostumeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnCostumeId);
      }
      if (UnCostumeShowFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnCostumeShowFlag);
      }
      size += unEquipmentId_.CalculateSize(_repeated_unEquipmentId_codec);
      if (UnVipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnVipLevel);
      }
      if (UnTitlePrefix != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnTitlePrefix);
      }
      if (UnTitleSuffix != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UnTitleSuffix);
      }
      if (UnSuperArmor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnSuperArmor);
      }
      if (UnMaxSuperArmor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnMaxSuperArmor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleMapRoleInfoS other) {
      if (other == null) {
        return;
      }
      if (other.UllRoleId != 0L) {
        UllRoleId = other.UllRoleId;
      }
      if (other.SzName.Length != 0) {
        SzName = other.SzName;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
      if (other.UnLevel != 0) {
        UnLevel = other.UnLevel;
      }
      if (other.UnPosX != 0) {
        UnPosX = other.UnPosX;
      }
      if (other.UnPosY != 0) {
        UnPosY = other.UnPosY;
      }
      if (other.UnDir != 0) {
        UnDir = other.UnDir;
      }
      if (other.UnHp != 0) {
        UnHp = other.UnHp;
      }
      if (other.UnMaxHp != 0) {
        UnMaxHp = other.UnMaxHp;
      }
      cInfo_.Add(other.cInfo_);
      if (other.UnCostumeId != 0) {
        UnCostumeId = other.UnCostumeId;
      }
      if (other.UnCostumeShowFlag != 0) {
        UnCostumeShowFlag = other.UnCostumeShowFlag;
      }
      unEquipmentId_.Add(other.unEquipmentId_);
      if (other.UnVipLevel != 0) {
        UnVipLevel = other.UnVipLevel;
      }
      if (other.UnTitlePrefix != 0) {
        UnTitlePrefix = other.UnTitlePrefix;
      }
      if (other.UnTitleSuffix != 0) {
        UnTitleSuffix = other.UnTitleSuffix;
      }
      if (other.UnSuperArmor != 0) {
        UnSuperArmor = other.UnSuperArmor;
      }
      if (other.UnMaxSuperArmor != 0) {
        UnMaxSuperArmor = other.UnMaxSuperArmor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UllRoleId = input.ReadInt64();
            break;
          }
          case 18: {
            SzName = input.ReadString();
            break;
          }
          case 24: {
            UnType = input.ReadInt32();
            break;
          }
          case 32: {
            UnLevel = input.ReadInt32();
            break;
          }
          case 40: {
            UnPosX = input.ReadInt32();
            break;
          }
          case 48: {
            UnPosY = input.ReadInt32();
            break;
          }
          case 56: {
            UnDir = input.ReadInt32();
            break;
          }
          case 64: {
            UnHp = input.ReadInt32();
            break;
          }
          case 72: {
            UnMaxHp = input.ReadInt32();
            break;
          }
          case 82: {
            cInfo_.AddEntriesFrom(input, _repeated_cInfo_codec);
            break;
          }
          case 88: {
            UnCostumeId = input.ReadInt32();
            break;
          }
          case 96: {
            UnCostumeShowFlag = input.ReadInt32();
            break;
          }
          case 106:
          case 104: {
            unEquipmentId_.AddEntriesFrom(input, _repeated_unEquipmentId_codec);
            break;
          }
          case 112: {
            UnVipLevel = input.ReadUInt32();
            break;
          }
          case 120: {
            UnTitlePrefix = input.ReadUInt32();
            break;
          }
          case 128: {
            UnTitleSuffix = input.ReadUInt32();
            break;
          }
          case 136: {
            UnSuperArmor = input.ReadInt32();
            break;
          }
          case 144: {
            UnMaxSuperArmor = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PMsgBattleMapRoleInfoS message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Buff信息
      /// </summary>
      public sealed partial class BuffInfo : pb::IMessage<BuffInfo> {
        private static readonly pb::MessageParser<BuffInfo> _parser = new pb::MessageParser<BuffInfo>(() => new BuffInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BuffInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sw.PMsgBattleMapRoleInfoS.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuffInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuffInfo(BuffInfo other) : this() {
          unBuffId_ = other.unBuffId_;
          fBuffTime_ = other.fBuffTime_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuffInfo Clone() {
          return new BuffInfo(this);
        }

        /// <summary>Field number for the "unBuffId" field.</summary>
        public const int UnBuffIdFieldNumber = 1;
        private int unBuffId_;
        /// <summary>
        /// Buff id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int UnBuffId {
          get { return unBuffId_; }
          set {
            unBuffId_ = value;
          }
        }

        /// <summary>Field number for the "fBuffTime" field.</summary>
        public const int FBuffTimeFieldNumber = 2;
        private float fBuffTime_;
        /// <summary>
        /// buff持续时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float FBuffTime {
          get { return fBuffTime_; }
          set {
            fBuffTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BuffInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BuffInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UnBuffId != other.UnBuffId) return false;
          if (FBuffTime != other.FBuffTime) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (UnBuffId != 0) hash ^= UnBuffId.GetHashCode();
          if (FBuffTime != 0F) hash ^= FBuffTime.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (UnBuffId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(UnBuffId);
          }
          if (FBuffTime != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(FBuffTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (UnBuffId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnBuffId);
          }
          if (FBuffTime != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BuffInfo other) {
          if (other == null) {
            return;
          }
          if (other.UnBuffId != 0) {
            UnBuffId = other.UnBuffId;
          }
          if (other.FBuffTime != 0F) {
            FBuffTime = other.FBuffTime;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                UnBuffId = input.ReadInt32();
                break;
              }
              case 21: {
                FBuffTime = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 地图坐标信息
  /// </summary>
  public sealed partial class BattleMapPos : pb::IMessage<BattleMapPos> {
    private static readonly pb::MessageParser<BattleMapPos> _parser = new pb::MessageParser<BattleMapPos>(() => new BattleMapPos());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleMapPos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleMapReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMapPos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMapPos(BattleMapPos other) : this() {
      unPosX_ = other.unPosX_;
      unPosY_ = other.unPosY_;
      fData1_ = other.fData1_;
      fData2_ = other.fData2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMapPos Clone() {
      return new BattleMapPos(this);
    }

    /// <summary>Field number for the "unPosX" field.</summary>
    public const int UnPosXFieldNumber = 1;
    private int unPosX_;
    /// <summary>
    /// 坐标X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPosX {
      get { return unPosX_; }
      set {
        unPosX_ = value;
      }
    }

    /// <summary>Field number for the "unPosY" field.</summary>
    public const int UnPosYFieldNumber = 2;
    private int unPosY_;
    /// <summary>
    /// 坐标Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPosY {
      get { return unPosY_; }
      set {
        unPosY_ = value;
      }
    }

    /// <summary>Field number for the "fData1" field.</summary>
    public const int FData1FieldNumber = 3;
    private float fData1_;
    /// <summary>
    /// 数据1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FData1 {
      get { return fData1_; }
      set {
        fData1_ = value;
      }
    }

    /// <summary>Field number for the "fData2" field.</summary>
    public const int FData2FieldNumber = 4;
    private float fData2_;
    /// <summary>
    /// 数据2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FData2 {
      get { return fData2_; }
      set {
        fData2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleMapPos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleMapPos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnPosX != other.UnPosX) return false;
      if (UnPosY != other.UnPosY) return false;
      if (FData1 != other.FData1) return false;
      if (FData2 != other.FData2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnPosX != 0) hash ^= UnPosX.GetHashCode();
      if (UnPosY != 0) hash ^= UnPosY.GetHashCode();
      if (FData1 != 0F) hash ^= FData1.GetHashCode();
      if (FData2 != 0F) hash ^= FData2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnPosX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnPosX);
      }
      if (UnPosY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnPosY);
      }
      if (FData1 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(FData1);
      }
      if (FData2 != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(FData2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPosX);
      }
      if (UnPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPosY);
      }
      if (FData1 != 0F) {
        size += 1 + 4;
      }
      if (FData2 != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleMapPos other) {
      if (other == null) {
        return;
      }
      if (other.UnPosX != 0) {
        UnPosX = other.UnPosX;
      }
      if (other.UnPosY != 0) {
        UnPosY = other.UnPosY;
      }
      if (other.FData1 != 0F) {
        FData1 = other.FData1;
      }
      if (other.FData2 != 0F) {
        FData2 = other.FData2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnPosX = input.ReadInt32();
            break;
          }
          case 16: {
            UnPosY = input.ReadInt32();
            break;
          }
          case 29: {
            FData1 = input.ReadFloat();
            break;
          }
          case 37: {
            FData2 = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器&lt;->客户端：请求角色移动
  /// _MSG_BATTLE_MAP_MOVE_CS
  /// </summary>
  public sealed partial class PMsgBattleMapMoveCS : pb::IMessage<PMsgBattleMapMoveCS> {
    private static readonly pb::MessageParser<PMsgBattleMapMoveCS> _parser = new pb::MessageParser<PMsgBattleMapMoveCS>(() => new PMsgBattleMapMoveCS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleMapMoveCS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleMapReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapMoveCS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapMoveCS(PMsgBattleMapMoveCS other) : this() {
      unMapId_ = other.unMapId_;
      cMapPos_ = other.cMapPos_.Clone();
      unDir_ = other.unDir_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapMoveCS Clone() {
      return new PMsgBattleMapMoveCS(this);
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 1;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    /// <summary>Field number for the "cMapPos" field.</summary>
    public const int CMapPosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sw.BattleMapPos> _repeated_cMapPos_codec
        = pb::FieldCodec.ForMessage(18, global::Sw.BattleMapPos.Parser);
    private readonly pbc::RepeatedField<global::Sw.BattleMapPos> cMapPos_ = new pbc::RepeatedField<global::Sw.BattleMapPos>();
    /// <summary>
    /// 角色移动的路径坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.BattleMapPos> CMapPos {
      get { return cMapPos_; }
    }

    /// <summary>Field number for the "unDir" field.</summary>
    public const int UnDirFieldNumber = 3;
    private int unDir_;
    /// <summary>
    /// 朝向（sw::MAP_DIR）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnDir {
      get { return unDir_; }
      set {
        unDir_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleMapMoveCS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleMapMoveCS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnMapId != other.UnMapId) return false;
      if(!cMapPos_.Equals(other.cMapPos_)) return false;
      if (UnDir != other.UnDir) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      hash ^= cMapPos_.GetHashCode();
      if (UnDir != 0) hash ^= UnDir.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnMapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnMapId);
      }
      cMapPos_.WriteTo(output, _repeated_cMapPos_codec);
      if (UnDir != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnDir);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      size += cMapPos_.CalculateSize(_repeated_cMapPos_codec);
      if (UnDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnDir);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleMapMoveCS other) {
      if (other == null) {
        return;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
      cMapPos_.Add(other.cMapPos_);
      if (other.UnDir != 0) {
        UnDir = other.UnDir;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnMapId = input.ReadInt32();
            break;
          }
          case 18: {
            cMapPos_.AddEntriesFrom(input, _repeated_cMapPos_codec);
            break;
          }
          case 24: {
            UnDir = input.ReadInt32();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：广播角色移动
  /// _MSG_BATTLE_MAP_MOVE_REVC_S
  /// </summary>
  public sealed partial class PMsgBattleMapMoveRecvS : pb::IMessage<PMsgBattleMapMoveRecvS> {
    private static readonly pb::MessageParser<PMsgBattleMapMoveRecvS> _parser = new pb::MessageParser<PMsgBattleMapMoveRecvS>(() => new PMsgBattleMapMoveRecvS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleMapMoveRecvS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleMapReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapMoveRecvS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapMoveRecvS(PMsgBattleMapMoveRecvS other) : this() {
      ullRoleId_ = other.ullRoleId_;
      unRoleType_ = other.unRoleType_;
      unMapId_ = other.unMapId_;
      cMapPos_ = other.cMapPos_.Clone();
      unDir_ = other.unDir_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapMoveRecvS Clone() {
      return new PMsgBattleMapMoveRecvS(this);
    }

    /// <summary>Field number for the "ullRoleId" field.</summary>
    public const int UllRoleIdFieldNumber = 1;
    private long ullRoleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllRoleId {
      get { return ullRoleId_; }
      set {
        ullRoleId_ = value;
      }
    }

    /// <summary>Field number for the "unRoleType" field.</summary>
    public const int UnRoleTypeFieldNumber = 2;
    private int unRoleType_;
    /// <summary>
    /// 目标类型（sw::ROLE_TYPE）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnRoleType {
      get { return unRoleType_; }
      set {
        unRoleType_ = value;
      }
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 3;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    /// <summary>Field number for the "cMapPos" field.</summary>
    public const int CMapPosFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Sw.BattleMapPos> _repeated_cMapPos_codec
        = pb::FieldCodec.ForMessage(34, global::Sw.BattleMapPos.Parser);
    private readonly pbc::RepeatedField<global::Sw.BattleMapPos> cMapPos_ = new pbc::RepeatedField<global::Sw.BattleMapPos>();
    /// <summary>
    /// 角色移动的路径坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.BattleMapPos> CMapPos {
      get { return cMapPos_; }
    }

    /// <summary>Field number for the "unDir" field.</summary>
    public const int UnDirFieldNumber = 5;
    private int unDir_;
    /// <summary>
    /// 朝向（sw::MAP_DIR）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnDir {
      get { return unDir_; }
      set {
        unDir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleMapMoveRecvS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleMapMoveRecvS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UllRoleId != other.UllRoleId) return false;
      if (UnRoleType != other.UnRoleType) return false;
      if (UnMapId != other.UnMapId) return false;
      if(!cMapPos_.Equals(other.cMapPos_)) return false;
      if (UnDir != other.UnDir) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UllRoleId != 0L) hash ^= UllRoleId.GetHashCode();
      if (UnRoleType != 0) hash ^= UnRoleType.GetHashCode();
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      hash ^= cMapPos_.GetHashCode();
      if (UnDir != 0) hash ^= UnDir.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UllRoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UllRoleId);
      }
      if (UnRoleType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnRoleType);
      }
      if (UnMapId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnMapId);
      }
      cMapPos_.WriteTo(output, _repeated_cMapPos_codec);
      if (UnDir != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UnDir);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UllRoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllRoleId);
      }
      if (UnRoleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnRoleType);
      }
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      size += cMapPos_.CalculateSize(_repeated_cMapPos_codec);
      if (UnDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnDir);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleMapMoveRecvS other) {
      if (other == null) {
        return;
      }
      if (other.UllRoleId != 0L) {
        UllRoleId = other.UllRoleId;
      }
      if (other.UnRoleType != 0) {
        UnRoleType = other.UnRoleType;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
      cMapPos_.Add(other.cMapPos_);
      if (other.UnDir != 0) {
        UnDir = other.UnDir;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UllRoleId = input.ReadInt64();
            break;
          }
          case 16: {
            UnRoleType = input.ReadInt32();
            break;
          }
          case 24: {
            UnMapId = input.ReadInt32();
            break;
          }
          case 34: {
            cMapPos_.AddEntriesFrom(input, _repeated_cMapPos_codec);
            break;
          }
          case 40: {
            UnDir = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：踢回地图上某个坐标
  /// _MSG_BATTLE_MAP_KICK_S
  /// </summary>
  public sealed partial class PMsgBattleMapKickS : pb::IMessage<PMsgBattleMapKickS> {
    private static readonly pb::MessageParser<PMsgBattleMapKickS> _parser = new pb::MessageParser<PMsgBattleMapKickS>(() => new PMsgBattleMapKickS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleMapKickS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleMapReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapKickS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapKickS(PMsgBattleMapKickS other) : this() {
      unMapId_ = other.unMapId_;
      unNewX_ = other.unNewX_;
      unNewY_ = other.unNewY_;
      unDir_ = other.unDir_;
      ullRoleId_ = other.ullRoleId_;
      unRoleType_ = other.unRoleType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapKickS Clone() {
      return new PMsgBattleMapKickS(this);
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 1;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    /// <summary>Field number for the "unNewX" field.</summary>
    public const int UnNewXFieldNumber = 2;
    private int unNewX_;
    /// <summary>
    /// 新坐标X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnNewX {
      get { return unNewX_; }
      set {
        unNewX_ = value;
      }
    }

    /// <summary>Field number for the "unNewY" field.</summary>
    public const int UnNewYFieldNumber = 3;
    private int unNewY_;
    /// <summary>
    /// 新坐标Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnNewY {
      get { return unNewY_; }
      set {
        unNewY_ = value;
      }
    }

    /// <summary>Field number for the "unDir" field.</summary>
    public const int UnDirFieldNumber = 4;
    private int unDir_;
    /// <summary>
    /// 朝向（sw::MAP_DIR）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnDir {
      get { return unDir_; }
      set {
        unDir_ = value;
      }
    }

    /// <summary>Field number for the "ullRoleId" field.</summary>
    public const int UllRoleIdFieldNumber = 5;
    private long ullRoleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllRoleId {
      get { return ullRoleId_; }
      set {
        ullRoleId_ = value;
      }
    }

    /// <summary>Field number for the "unRoleType" field.</summary>
    public const int UnRoleTypeFieldNumber = 6;
    private int unRoleType_;
    /// <summary>
    /// 目标类型（sw::ROLE_TYPE）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnRoleType {
      get { return unRoleType_; }
      set {
        unRoleType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleMapKickS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleMapKickS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnMapId != other.UnMapId) return false;
      if (UnNewX != other.UnNewX) return false;
      if (UnNewY != other.UnNewY) return false;
      if (UnDir != other.UnDir) return false;
      if (UllRoleId != other.UllRoleId) return false;
      if (UnRoleType != other.UnRoleType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      if (UnNewX != 0) hash ^= UnNewX.GetHashCode();
      if (UnNewY != 0) hash ^= UnNewY.GetHashCode();
      if (UnDir != 0) hash ^= UnDir.GetHashCode();
      if (UllRoleId != 0L) hash ^= UllRoleId.GetHashCode();
      if (UnRoleType != 0) hash ^= UnRoleType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnMapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnMapId);
      }
      if (UnNewX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnNewX);
      }
      if (UnNewY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnNewY);
      }
      if (UnDir != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnDir);
      }
      if (UllRoleId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(UllRoleId);
      }
      if (UnRoleType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UnRoleType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      if (UnNewX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnNewX);
      }
      if (UnNewY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnNewY);
      }
      if (UnDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnDir);
      }
      if (UllRoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllRoleId);
      }
      if (UnRoleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnRoleType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleMapKickS other) {
      if (other == null) {
        return;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
      if (other.UnNewX != 0) {
        UnNewX = other.UnNewX;
      }
      if (other.UnNewY != 0) {
        UnNewY = other.UnNewY;
      }
      if (other.UnDir != 0) {
        UnDir = other.UnDir;
      }
      if (other.UllRoleId != 0L) {
        UllRoleId = other.UllRoleId;
      }
      if (other.UnRoleType != 0) {
        UnRoleType = other.UnRoleType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnMapId = input.ReadInt32();
            break;
          }
          case 16: {
            UnNewX = input.ReadInt32();
            break;
          }
          case 24: {
            UnNewY = input.ReadInt32();
            break;
          }
          case 32: {
            UnDir = input.ReadInt32();
            break;
          }
          case 40: {
            UllRoleId = input.ReadInt64();
            break;
          }
          case 48: {
            UnRoleType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：地图飞行（瞬间移动）
  /// _MSG_BATTLE_MAP_FLY_S
  /// </summary>
  public sealed partial class PMsgBattleMapFlyS : pb::IMessage<PMsgBattleMapFlyS> {
    private static readonly pb::MessageParser<PMsgBattleMapFlyS> _parser = new pb::MessageParser<PMsgBattleMapFlyS>(() => new PMsgBattleMapFlyS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleMapFlyS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleMapReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapFlyS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapFlyS(PMsgBattleMapFlyS other) : this() {
      ullRoleId_ = other.ullRoleId_;
      unRoleType_ = other.unRoleType_;
      unMapId_ = other.unMapId_;
      unNewX_ = other.unNewX_;
      unNewY_ = other.unNewY_;
      unDir_ = other.unDir_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapFlyS Clone() {
      return new PMsgBattleMapFlyS(this);
    }

    /// <summary>Field number for the "ullRoleId" field.</summary>
    public const int UllRoleIdFieldNumber = 1;
    private long ullRoleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllRoleId {
      get { return ullRoleId_; }
      set {
        ullRoleId_ = value;
      }
    }

    /// <summary>Field number for the "unRoleType" field.</summary>
    public const int UnRoleTypeFieldNumber = 2;
    private int unRoleType_;
    /// <summary>
    /// 目标类型（sw::ROLE_TYPE）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnRoleType {
      get { return unRoleType_; }
      set {
        unRoleType_ = value;
      }
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 3;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    /// <summary>Field number for the "unNewX" field.</summary>
    public const int UnNewXFieldNumber = 4;
    private int unNewX_;
    /// <summary>
    /// 新坐标X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnNewX {
      get { return unNewX_; }
      set {
        unNewX_ = value;
      }
    }

    /// <summary>Field number for the "unNewY" field.</summary>
    public const int UnNewYFieldNumber = 5;
    private int unNewY_;
    /// <summary>
    /// 新坐标Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnNewY {
      get { return unNewY_; }
      set {
        unNewY_ = value;
      }
    }

    /// <summary>Field number for the "unDir" field.</summary>
    public const int UnDirFieldNumber = 6;
    private int unDir_;
    /// <summary>
    /// 朝向（sw::MAP_DIR）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnDir {
      get { return unDir_; }
      set {
        unDir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleMapFlyS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleMapFlyS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UllRoleId != other.UllRoleId) return false;
      if (UnRoleType != other.UnRoleType) return false;
      if (UnMapId != other.UnMapId) return false;
      if (UnNewX != other.UnNewX) return false;
      if (UnNewY != other.UnNewY) return false;
      if (UnDir != other.UnDir) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UllRoleId != 0L) hash ^= UllRoleId.GetHashCode();
      if (UnRoleType != 0) hash ^= UnRoleType.GetHashCode();
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      if (UnNewX != 0) hash ^= UnNewX.GetHashCode();
      if (UnNewY != 0) hash ^= UnNewY.GetHashCode();
      if (UnDir != 0) hash ^= UnDir.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UllRoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UllRoleId);
      }
      if (UnRoleType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnRoleType);
      }
      if (UnMapId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnMapId);
      }
      if (UnNewX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnNewX);
      }
      if (UnNewY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UnNewY);
      }
      if (UnDir != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UnDir);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UllRoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllRoleId);
      }
      if (UnRoleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnRoleType);
      }
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      if (UnNewX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnNewX);
      }
      if (UnNewY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnNewY);
      }
      if (UnDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnDir);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleMapFlyS other) {
      if (other == null) {
        return;
      }
      if (other.UllRoleId != 0L) {
        UllRoleId = other.UllRoleId;
      }
      if (other.UnRoleType != 0) {
        UnRoleType = other.UnRoleType;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
      if (other.UnNewX != 0) {
        UnNewX = other.UnNewX;
      }
      if (other.UnNewY != 0) {
        UnNewY = other.UnNewY;
      }
      if (other.UnDir != 0) {
        UnDir = other.UnDir;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UllRoleId = input.ReadInt64();
            break;
          }
          case 16: {
            UnRoleType = input.ReadInt32();
            break;
          }
          case 24: {
            UnMapId = input.ReadInt32();
            break;
          }
          case 32: {
            UnNewX = input.ReadInt32();
            break;
          }
          case 40: {
            UnNewY = input.ReadInt32();
            break;
          }
          case 48: {
            UnDir = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：伙伴信息地图广播
  /// _MSG_BATTLE_MAP_HERO_INFO_S
  /// </summary>
  public sealed partial class PMsgBattleMapHeroInfoS : pb::IMessage<PMsgBattleMapHeroInfoS> {
    private static readonly pb::MessageParser<PMsgBattleMapHeroInfoS> _parser = new pb::MessageParser<PMsgBattleMapHeroInfoS>(() => new PMsgBattleMapHeroInfoS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleMapHeroInfoS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleMapReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapHeroInfoS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapHeroInfoS(PMsgBattleMapHeroInfoS other) : this() {
      ullHeroId_ = other.ullHeroId_;
      ullOwnerRoleId_ = other.ullOwnerRoleId_;
      unType_ = other.unType_;
      unLevel_ = other.unLevel_;
      unPosX_ = other.unPosX_;
      unPosY_ = other.unPosY_;
      unDir_ = other.unDir_;
      unHp_ = other.unHp_;
      unMaxHp_ = other.unMaxHp_;
      unSuperArmor_ = other.unSuperArmor_;
      unMaxSuperArmor_ = other.unMaxSuperArmor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapHeroInfoS Clone() {
      return new PMsgBattleMapHeroInfoS(this);
    }

    /// <summary>Field number for the "ullHeroId" field.</summary>
    public const int UllHeroIdFieldNumber = 1;
    private long ullHeroId_;
    /// <summary>
    /// 伙伴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllHeroId {
      get { return ullHeroId_; }
      set {
        ullHeroId_ = value;
      }
    }

    /// <summary>Field number for the "ullOwnerRoleId" field.</summary>
    public const int UllOwnerRoleIdFieldNumber = 2;
    private long ullOwnerRoleId_;
    /// <summary>
    /// 所属角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllOwnerRoleId {
      get { return ullOwnerRoleId_; }
      set {
        ullOwnerRoleId_ = value;
      }
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 3;
    private int unType_;
    /// <summary>
    /// 伙伴类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    /// <summary>Field number for the "unLevel" field.</summary>
    public const int UnLevelFieldNumber = 4;
    private int unLevel_;
    /// <summary>
    /// 伙伴等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnLevel {
      get { return unLevel_; }
      set {
        unLevel_ = value;
      }
    }

    /// <summary>Field number for the "unPosX" field.</summary>
    public const int UnPosXFieldNumber = 5;
    private int unPosX_;
    /// <summary>
    /// 坐标X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPosX {
      get { return unPosX_; }
      set {
        unPosX_ = value;
      }
    }

    /// <summary>Field number for the "unPosY" field.</summary>
    public const int UnPosYFieldNumber = 6;
    private int unPosY_;
    /// <summary>
    /// 坐标Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPosY {
      get { return unPosY_; }
      set {
        unPosY_ = value;
      }
    }

    /// <summary>Field number for the "unDir" field.</summary>
    public const int UnDirFieldNumber = 7;
    private int unDir_;
    /// <summary>
    /// 朝向（sw::MAP_DIR）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnDir {
      get { return unDir_; }
      set {
        unDir_ = value;
      }
    }

    /// <summary>Field number for the "unHp" field.</summary>
    public const int UnHpFieldNumber = 8;
    private int unHp_;
    /// <summary>
    /// 血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnHp {
      get { return unHp_; }
      set {
        unHp_ = value;
      }
    }

    /// <summary>Field number for the "unMaxHp" field.</summary>
    public const int UnMaxHpFieldNumber = 9;
    private int unMaxHp_;
    /// <summary>
    /// 血量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMaxHp {
      get { return unMaxHp_; }
      set {
        unMaxHp_ = value;
      }
    }

    /// <summary>Field number for the "unSuperArmor" field.</summary>
    public const int UnSuperArmorFieldNumber = 10;
    private int unSuperArmor_;
    /// <summary>
    /// 破防值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnSuperArmor {
      get { return unSuperArmor_; }
      set {
        unSuperArmor_ = value;
      }
    }

    /// <summary>Field number for the "unMaxSuperArmor" field.</summary>
    public const int UnMaxSuperArmorFieldNumber = 11;
    private int unMaxSuperArmor_;
    /// <summary>
    /// 破防值上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMaxSuperArmor {
      get { return unMaxSuperArmor_; }
      set {
        unMaxSuperArmor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleMapHeroInfoS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleMapHeroInfoS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UllHeroId != other.UllHeroId) return false;
      if (UllOwnerRoleId != other.UllOwnerRoleId) return false;
      if (UnType != other.UnType) return false;
      if (UnLevel != other.UnLevel) return false;
      if (UnPosX != other.UnPosX) return false;
      if (UnPosY != other.UnPosY) return false;
      if (UnDir != other.UnDir) return false;
      if (UnHp != other.UnHp) return false;
      if (UnMaxHp != other.UnMaxHp) return false;
      if (UnSuperArmor != other.UnSuperArmor) return false;
      if (UnMaxSuperArmor != other.UnMaxSuperArmor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UllHeroId != 0L) hash ^= UllHeroId.GetHashCode();
      if (UllOwnerRoleId != 0L) hash ^= UllOwnerRoleId.GetHashCode();
      if (UnType != 0) hash ^= UnType.GetHashCode();
      if (UnLevel != 0) hash ^= UnLevel.GetHashCode();
      if (UnPosX != 0) hash ^= UnPosX.GetHashCode();
      if (UnPosY != 0) hash ^= UnPosY.GetHashCode();
      if (UnDir != 0) hash ^= UnDir.GetHashCode();
      if (UnHp != 0) hash ^= UnHp.GetHashCode();
      if (UnMaxHp != 0) hash ^= UnMaxHp.GetHashCode();
      if (UnSuperArmor != 0) hash ^= UnSuperArmor.GetHashCode();
      if (UnMaxSuperArmor != 0) hash ^= UnMaxSuperArmor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UllHeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UllHeroId);
      }
      if (UllOwnerRoleId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UllOwnerRoleId);
      }
      if (UnType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnType);
      }
      if (UnLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnLevel);
      }
      if (UnPosX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UnPosX);
      }
      if (UnPosY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UnPosY);
      }
      if (UnDir != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UnDir);
      }
      if (UnHp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UnHp);
      }
      if (UnMaxHp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(UnMaxHp);
      }
      if (UnSuperArmor != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UnSuperArmor);
      }
      if (UnMaxSuperArmor != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(UnMaxSuperArmor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UllHeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllHeroId);
      }
      if (UllOwnerRoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllOwnerRoleId);
      }
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      if (UnLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnLevel);
      }
      if (UnPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPosX);
      }
      if (UnPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPosY);
      }
      if (UnDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnDir);
      }
      if (UnHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnHp);
      }
      if (UnMaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMaxHp);
      }
      if (UnSuperArmor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnSuperArmor);
      }
      if (UnMaxSuperArmor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMaxSuperArmor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleMapHeroInfoS other) {
      if (other == null) {
        return;
      }
      if (other.UllHeroId != 0L) {
        UllHeroId = other.UllHeroId;
      }
      if (other.UllOwnerRoleId != 0L) {
        UllOwnerRoleId = other.UllOwnerRoleId;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
      if (other.UnLevel != 0) {
        UnLevel = other.UnLevel;
      }
      if (other.UnPosX != 0) {
        UnPosX = other.UnPosX;
      }
      if (other.UnPosY != 0) {
        UnPosY = other.UnPosY;
      }
      if (other.UnDir != 0) {
        UnDir = other.UnDir;
      }
      if (other.UnHp != 0) {
        UnHp = other.UnHp;
      }
      if (other.UnMaxHp != 0) {
        UnMaxHp = other.UnMaxHp;
      }
      if (other.UnSuperArmor != 0) {
        UnSuperArmor = other.UnSuperArmor;
      }
      if (other.UnMaxSuperArmor != 0) {
        UnMaxSuperArmor = other.UnMaxSuperArmor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UllHeroId = input.ReadInt64();
            break;
          }
          case 16: {
            UllOwnerRoleId = input.ReadInt64();
            break;
          }
          case 24: {
            UnType = input.ReadInt32();
            break;
          }
          case 32: {
            UnLevel = input.ReadInt32();
            break;
          }
          case 40: {
            UnPosX = input.ReadInt32();
            break;
          }
          case 48: {
            UnPosY = input.ReadInt32();
            break;
          }
          case 56: {
            UnDir = input.ReadInt32();
            break;
          }
          case 64: {
            UnHp = input.ReadInt32();
            break;
          }
          case 72: {
            UnMaxHp = input.ReadInt32();
            break;
          }
          case 80: {
            UnSuperArmor = input.ReadInt32();
            break;
          }
          case 88: {
            UnMaxSuperArmor = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：请求角色移动
  /// _MSG_BATTLE_MAP_MOVE_C
  /// </summary>
  public sealed partial class PMsgBattleMapMoveC : pb::IMessage<PMsgBattleMapMoveC> {
    private static readonly pb::MessageParser<PMsgBattleMapMoveC> _parser = new pb::MessageParser<PMsgBattleMapMoveC>(() => new PMsgBattleMapMoveC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleMapMoveC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleMapReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapMoveC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapMoveC(PMsgBattleMapMoveC other) : this() {
      ullRoleId_ = other.ullRoleId_;
      unRoleType_ = other.unRoleType_;
      unMapId_ = other.unMapId_;
      cMapPos_ = other.cMapPos_.Clone();
      unDir_ = other.unDir_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapMoveC Clone() {
      return new PMsgBattleMapMoveC(this);
    }

    /// <summary>Field number for the "ullRoleId" field.</summary>
    public const int UllRoleIdFieldNumber = 1;
    private long ullRoleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllRoleId {
      get { return ullRoleId_; }
      set {
        ullRoleId_ = value;
      }
    }

    /// <summary>Field number for the "unRoleType" field.</summary>
    public const int UnRoleTypeFieldNumber = 2;
    private int unRoleType_;
    /// <summary>
    /// 角色类型（sw::ROLE_TYPE）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnRoleType {
      get { return unRoleType_; }
      set {
        unRoleType_ = value;
      }
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 3;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    /// <summary>Field number for the "cMapPos" field.</summary>
    public const int CMapPosFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Sw.BattleMapPos> _repeated_cMapPos_codec
        = pb::FieldCodec.ForMessage(34, global::Sw.BattleMapPos.Parser);
    private readonly pbc::RepeatedField<global::Sw.BattleMapPos> cMapPos_ = new pbc::RepeatedField<global::Sw.BattleMapPos>();
    /// <summary>
    /// 角色移动的路径坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.BattleMapPos> CMapPos {
      get { return cMapPos_; }
    }

    /// <summary>Field number for the "unDir" field.</summary>
    public const int UnDirFieldNumber = 5;
    private int unDir_;
    /// <summary>
    /// 朝向（sw::MAP_DIR）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnDir {
      get { return unDir_; }
      set {
        unDir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleMapMoveC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleMapMoveC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UllRoleId != other.UllRoleId) return false;
      if (UnRoleType != other.UnRoleType) return false;
      if (UnMapId != other.UnMapId) return false;
      if(!cMapPos_.Equals(other.cMapPos_)) return false;
      if (UnDir != other.UnDir) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UllRoleId != 0L) hash ^= UllRoleId.GetHashCode();
      if (UnRoleType != 0) hash ^= UnRoleType.GetHashCode();
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      hash ^= cMapPos_.GetHashCode();
      if (UnDir != 0) hash ^= UnDir.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UllRoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UllRoleId);
      }
      if (UnRoleType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnRoleType);
      }
      if (UnMapId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnMapId);
      }
      cMapPos_.WriteTo(output, _repeated_cMapPos_codec);
      if (UnDir != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UnDir);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UllRoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllRoleId);
      }
      if (UnRoleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnRoleType);
      }
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      size += cMapPos_.CalculateSize(_repeated_cMapPos_codec);
      if (UnDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnDir);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleMapMoveC other) {
      if (other == null) {
        return;
      }
      if (other.UllRoleId != 0L) {
        UllRoleId = other.UllRoleId;
      }
      if (other.UnRoleType != 0) {
        UnRoleType = other.UnRoleType;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
      cMapPos_.Add(other.cMapPos_);
      if (other.UnDir != 0) {
        UnDir = other.UnDir;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UllRoleId = input.ReadInt64();
            break;
          }
          case 16: {
            UnRoleType = input.ReadInt32();
            break;
          }
          case 24: {
            UnMapId = input.ReadInt32();
            break;
          }
          case 34: {
            cMapPos_.AddEntriesFrom(input, _repeated_cMapPos_codec);
            break;
          }
          case 40: {
            UnDir = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：请求角色移动回复
  /// _MSG_BATTLE_MAP_MOVE_S
  /// </summary>
  public sealed partial class PMsgBattleMapMoveS : pb::IMessage<PMsgBattleMapMoveS> {
    private static readonly pb::MessageParser<PMsgBattleMapMoveS> _parser = new pb::MessageParser<PMsgBattleMapMoveS>(() => new PMsgBattleMapMoveS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleMapMoveS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleMapReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapMoveS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapMoveS(PMsgBattleMapMoveS other) : this() {
      ullRoleId_ = other.ullRoleId_;
      unRoleType_ = other.unRoleType_;
      unMapId_ = other.unMapId_;
      cMapPos_ = other.cMapPos_.Clone();
      unDir_ = other.unDir_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleMapMoveS Clone() {
      return new PMsgBattleMapMoveS(this);
    }

    /// <summary>Field number for the "ullRoleId" field.</summary>
    public const int UllRoleIdFieldNumber = 1;
    private long ullRoleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllRoleId {
      get { return ullRoleId_; }
      set {
        ullRoleId_ = value;
      }
    }

    /// <summary>Field number for the "unRoleType" field.</summary>
    public const int UnRoleTypeFieldNumber = 2;
    private int unRoleType_;
    /// <summary>
    /// 角色类型（sw::ROLE_TYPE）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnRoleType {
      get { return unRoleType_; }
      set {
        unRoleType_ = value;
      }
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 3;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    /// <summary>Field number for the "cMapPos" field.</summary>
    public const int CMapPosFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Sw.BattleMapPos> _repeated_cMapPos_codec
        = pb::FieldCodec.ForMessage(34, global::Sw.BattleMapPos.Parser);
    private readonly pbc::RepeatedField<global::Sw.BattleMapPos> cMapPos_ = new pbc::RepeatedField<global::Sw.BattleMapPos>();
    /// <summary>
    /// 角色移动的路径坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.BattleMapPos> CMapPos {
      get { return cMapPos_; }
    }

    /// <summary>Field number for the "unDir" field.</summary>
    public const int UnDirFieldNumber = 5;
    private int unDir_;
    /// <summary>
    /// 朝向（sw::MAP_DIR）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnDir {
      get { return unDir_; }
      set {
        unDir_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleMapMoveS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleMapMoveS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UllRoleId != other.UllRoleId) return false;
      if (UnRoleType != other.UnRoleType) return false;
      if (UnMapId != other.UnMapId) return false;
      if(!cMapPos_.Equals(other.cMapPos_)) return false;
      if (UnDir != other.UnDir) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UllRoleId != 0L) hash ^= UllRoleId.GetHashCode();
      if (UnRoleType != 0) hash ^= UnRoleType.GetHashCode();
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      hash ^= cMapPos_.GetHashCode();
      if (UnDir != 0) hash ^= UnDir.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UllRoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UllRoleId);
      }
      if (UnRoleType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnRoleType);
      }
      if (UnMapId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnMapId);
      }
      cMapPos_.WriteTo(output, _repeated_cMapPos_codec);
      if (UnDir != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UnDir);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UllRoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllRoleId);
      }
      if (UnRoleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnRoleType);
      }
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      size += cMapPos_.CalculateSize(_repeated_cMapPos_codec);
      if (UnDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnDir);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleMapMoveS other) {
      if (other == null) {
        return;
      }
      if (other.UllRoleId != 0L) {
        UllRoleId = other.UllRoleId;
      }
      if (other.UnRoleType != 0) {
        UnRoleType = other.UnRoleType;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
      cMapPos_.Add(other.cMapPos_);
      if (other.UnDir != 0) {
        UnDir = other.UnDir;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UllRoleId = input.ReadInt64();
            break;
          }
          case 16: {
            UnRoleType = input.ReadInt32();
            break;
          }
          case 24: {
            UnMapId = input.ReadInt32();
            break;
          }
          case 34: {
            cMapPos_.AddEntriesFrom(input, _repeated_cMapPos_codec);
            break;
          }
          case 40: {
            UnDir = input.ReadInt32();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
