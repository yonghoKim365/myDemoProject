// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/PMsgEquipment.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sw {

  /// <summary>Holder for reflection information generated from protos/PMsgEquipment.proto</summary>
  public static partial class PMsgEquipmentReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/PMsgEquipment.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PMsgEquipmentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chpwcm90b3MvUE1zZ0VxdWlwbWVudC5wcm90bxICc3ciKQoTUE1zZ0VxdWlw",
            "bWVudFF1ZXJ5QxISCgp1blJlc2VydmVkGAEgASgFIqwBCg1FcXVpcG1lbnRJ",
            "bmZvEgwKBHVuSWQYASABKAUSDgoGdW5UeXBlGAIgASgFEhIKCnVuUG9zaXRp",
            "b24YAyABKAUSFQoNdW5FbmNoYW50VGltZRgEIAEoBRIVCg11bkJhc2ljT3B0",
            "aW9uGAUgAygFEhQKDHVuQmFzaWNWYWx1ZRgGIAMoBRIQCgh1bkF0dGFjaxgH",
            "IAEoBRITCgt1blRpbWVzdGFtcBgIIAEoBSJaChNQTXNnRXF1aXBtZW50UXVl",
            "cnlTEhgKEHVuRXF1aXBtZW50Q291bnQYASABKAUSKQoOY0VxdWlwbWVudElu",
            "Zm8YAiADKAsyES5zdy5FcXVpcG1lbnRJbmZvIjEKEVBNc2dFcXVpcG1lbnRE",
            "ZWxTEgwKBHVuSWQYASABKAUSDgoGdW5UeXBlGAIgASgFIjUKFVBNc2dFcXVp",
            "cG1lbnRFbmNoYW50QxIMCgR1bklkGAEgASgFEg4KBnVuVHlwZRgCIAEoBSJK",
            "ChVQTXNnRXF1aXBtZW50RW5jaGFudFMSDAoEdW5JZBgBIAEoBRIOCgZ1blR5",
            "cGUYAiABKAUSEwoLdW5FcnJvckNvZGUYYyABKAUiSwoaUE1zZ0VxdWlwbWVu",
            "dEVuY2hhbnRUdXJib0MSDAoEdW5JZBgBIAEoBRIOCgZ1blR5cGUYAiABKAUS",
            "DwoHdW5UaW1lcxgDIAEoBSJ1ChpQTXNnRXF1aXBtZW50RW5jaGFudFR1cmJv",
            "UxIMCgR1bklkGAEgASgFEg4KBnVuVHlwZRgCIAEoBRIPCgd1blRpbWVzGAMg",
            "ASgFEhMKC3VuUmVhbFRpbWVzGAQgASgFEhMKC3VuRXJyb3JDb2RlGGMgASgF",
            "IjQKFFBNc2dFcXVpcG1lbnRFdm9sdmVDEgwKBHVuSWQYASABKAUSDgoGdW5U",
            "eXBlGAIgASgFIkkKFFBNc2dFcXVpcG1lbnRFdm9sdmVTEgwKBHVuSWQYASAB",
            "KAUSDgoGdW5UeXBlGAIgASgFEhMKC3VuRXJyb3JDb2RlGGMgASgFIiMKE1BN",
            "c2dFcXVpcG1lbnRCcmVha0MSDAoEdW5JZBgBIAMoBSK4AQoTUE1zZ0VxdWlw",
            "bWVudEJyZWFrUxIMCgR1bklkGAEgAygFEg4KBnVuQ29pbhgDIAEoBRI5CgVj",
            "SW5mbxgEIAMoCzIqLnN3LlBNc2dFcXVpcG1lbnRCcmVha1MuRXF1aXBtZW50",
            "QnJlYWtJbmZvEhMKC3VuRXJyb3JDb2RlGGMgASgFGjMKEkVxdWlwbWVudEJy",
            "ZWFrSW5mbxIOCgZ1blR5cGUYASABKAUSDQoFdW5OdW0YAiABKAUiRgoSUE1z",
            "Z0VxdWlwbWVudFVzZXJDEgwKBHVuSWQYASABKAUSDgoGdW5UeXBlGAIgASgF",
            "EhIKCnVuUm9sZUZsYWcYAyABKAUiWwoSUE1zZ0VxdWlwbWVudFVzZXJTEgwK",
            "BHVuSWQYASABKAUSDgoGdW5UeXBlGAIgASgFEhIKCnVuUm9sZUZsYWcYAyAB",
            "KAUSEwoLdW5FcnJvckNvZGUYYyABKAUiIQoRRXF1aXBtZW50U2VsbEluZm8S",
            "DAoEdW5JZBgBIAEoBSI6ChJQTXNnRXF1aXBtZW50U2VsbEMSJAoFY0luZm8Y",
            "ASADKAsyFS5zdy5FcXVpcG1lbnRTZWxsSW5mbyJfChJQTXNnRXF1aXBtZW50",
            "U2VsbFMSJAoFY0luZm8YASADKAsyFS5zdy5FcXVpcG1lbnRTZWxsSW5mbxIO",
            "CgZ1bkNvaW4YAiABKAUSEwoLdW5FcnJvckNvZGUYYyABKAUiLAoWUE1zZ0Vx",
            "dWlwbWVudFNldFF1ZXJ5QxISCgp1blJlc2VydmVkGAEgASgFIkEKFlBNc2dF",
            "cXVpcG1lbnRTZXRRdWVyeVMSFgoOdW5DdXJyZW50U2V0SWQYASABKAUSDwoH",
            "dW5TZXRJZBgCIAMoBSIqChdQTXNnRXF1aXBtZW50U2V0U2VsZWN0QxIPCgd1",
            "blNldElkGAEgASgFIj8KF1BNc2dFcXVpcG1lbnRTZXRTZWxlY3RTEg8KB3Vu",
            "U2V0SWQYASABKAUSEwoLdW5FcnJvckNvZGUYYyABKAUiKgoXUE1zZ0VxdWlw",
            "bWVudFNldENoYW5nZUMSDwoHdW5TZXRJZBgBIAEoBSI/ChdQTXNnRXF1aXBt",
            "ZW50U2V0Q2hhbmdlUxIPCgd1blNldElkGAEgASgFEhMKC3VuRXJyb3JDb2Rl",
            "GGMgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentQueryC), global::Sw.PMsgEquipmentQueryC.Parser, new[]{ "UnReserved" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.EquipmentInfo), global::Sw.EquipmentInfo.Parser, new[]{ "UnId", "UnType", "UnPosition", "UnEnchantTime", "UnBasicOption", "UnBasicValue", "UnAttack", "UnTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentQueryS), global::Sw.PMsgEquipmentQueryS.Parser, new[]{ "UnEquipmentCount", "CEquipmentInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentDelS), global::Sw.PMsgEquipmentDelS.Parser, new[]{ "UnId", "UnType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentEnchantC), global::Sw.PMsgEquipmentEnchantC.Parser, new[]{ "UnId", "UnType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentEnchantS), global::Sw.PMsgEquipmentEnchantS.Parser, new[]{ "UnId", "UnType", "UnErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentEnchantTurboC), global::Sw.PMsgEquipmentEnchantTurboC.Parser, new[]{ "UnId", "UnType", "UnTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentEnchantTurboS), global::Sw.PMsgEquipmentEnchantTurboS.Parser, new[]{ "UnId", "UnType", "UnTimes", "UnRealTimes", "UnErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentEvolveC), global::Sw.PMsgEquipmentEvolveC.Parser, new[]{ "UnId", "UnType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentEvolveS), global::Sw.PMsgEquipmentEvolveS.Parser, new[]{ "UnId", "UnType", "UnErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentBreakC), global::Sw.PMsgEquipmentBreakC.Parser, new[]{ "UnId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentBreakS), global::Sw.PMsgEquipmentBreakS.Parser, new[]{ "UnId", "UnCoin", "CInfo", "UnErrorCode" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentBreakS.Types.EquipmentBreakInfo), global::Sw.PMsgEquipmentBreakS.Types.EquipmentBreakInfo.Parser, new[]{ "UnType", "UnNum" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentUserC), global::Sw.PMsgEquipmentUserC.Parser, new[]{ "UnId", "UnType", "UnRoleFlag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentUserS), global::Sw.PMsgEquipmentUserS.Parser, new[]{ "UnId", "UnType", "UnRoleFlag", "UnErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.EquipmentSellInfo), global::Sw.EquipmentSellInfo.Parser, new[]{ "UnId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentSellC), global::Sw.PMsgEquipmentSellC.Parser, new[]{ "CInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentSellS), global::Sw.PMsgEquipmentSellS.Parser, new[]{ "CInfo", "UnCoin", "UnErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentSetQueryC), global::Sw.PMsgEquipmentSetQueryC.Parser, new[]{ "UnReserved" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentSetQueryS), global::Sw.PMsgEquipmentSetQueryS.Parser, new[]{ "UnCurrentSetId", "UnSetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentSetSelectC), global::Sw.PMsgEquipmentSetSelectC.Parser, new[]{ "UnSetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentSetSelectS), global::Sw.PMsgEquipmentSetSelectS.Parser, new[]{ "UnSetId", "UnErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentSetChangeC), global::Sw.PMsgEquipmentSetChangeC.Parser, new[]{ "UnSetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgEquipmentSetChangeS), global::Sw.PMsgEquipmentSetChangeS.Parser, new[]{ "UnSetId", "UnErrorCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 客户端：查询装备列表
  /// _MSG_EQUIPMENT_QUERY_C
  /// </summary>
  public sealed partial class PMsgEquipmentQueryC : pb::IMessage<PMsgEquipmentQueryC> {
    private static readonly pb::MessageParser<PMsgEquipmentQueryC> _parser = new pb::MessageParser<PMsgEquipmentQueryC>(() => new PMsgEquipmentQueryC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentQueryC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentQueryC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentQueryC(PMsgEquipmentQueryC other) : this() {
      unReserved_ = other.unReserved_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentQueryC Clone() {
      return new PMsgEquipmentQueryC(this);
    }

    /// <summary>Field number for the "unReserved" field.</summary>
    public const int UnReservedFieldNumber = 1;
    private int unReserved_;
    /// <summary>
    /// 保留字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnReserved {
      get { return unReserved_; }
      set {
        unReserved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentQueryC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentQueryC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnReserved != other.UnReserved) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnReserved != 0) hash ^= UnReserved.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnReserved != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnReserved);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnReserved != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnReserved);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentQueryC other) {
      if (other == null) {
        return;
      }
      if (other.UnReserved != 0) {
        UnReserved = other.UnReserved;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnReserved = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 道具基本信息
  /// </summary>
  public sealed partial class EquipmentInfo : pb::IMessage<EquipmentInfo> {
    private static readonly pb::MessageParser<EquipmentInfo> _parser = new pb::MessageParser<EquipmentInfo>(() => new EquipmentInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipmentInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentInfo(EquipmentInfo other) : this() {
      unId_ = other.unId_;
      unType_ = other.unType_;
      unPosition_ = other.unPosition_;
      unEnchantTime_ = other.unEnchantTime_;
      unBasicOption_ = other.unBasicOption_.Clone();
      unBasicValue_ = other.unBasicValue_.Clone();
      unAttack_ = other.unAttack_;
      unTimestamp_ = other.unTimestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentInfo Clone() {
      return new EquipmentInfo(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private int unId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnId {
      get { return unId_; }
      set {
        unId_ = value;
      }
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 2;
    private int unType_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    /// <summary>Field number for the "unPosition" field.</summary>
    public const int UnPositionFieldNumber = 3;
    private int unPosition_;
    /// <summary>
    /// 装备栏位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPosition {
      get { return unPosition_; }
      set {
        unPosition_ = value;
      }
    }

    /// <summary>Field number for the "unEnchantTime" field.</summary>
    public const int UnEnchantTimeFieldNumber = 4;
    private int unEnchantTime_;
    /// <summary>
    /// 强化次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnEnchantTime {
      get { return unEnchantTime_; }
      set {
        unEnchantTime_ = value;
      }
    }

    /// <summary>Field number for the "unBasicOption" field.</summary>
    public const int UnBasicOptionFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_unBasicOption_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> unBasicOption_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 固定属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnBasicOption {
      get { return unBasicOption_; }
    }

    /// <summary>Field number for the "unBasicValue" field.</summary>
    public const int UnBasicValueFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_unBasicValue_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> unBasicValue_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 固定属性值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnBasicValue {
      get { return unBasicValue_; }
    }

    /// <summary>Field number for the "unAttack" field.</summary>
    public const int UnAttackFieldNumber = 7;
    private int unAttack_;
    /// <summary>
    /// 战斗力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnAttack {
      get { return unAttack_; }
      set {
        unAttack_ = value;
      }
    }

    /// <summary>Field number for the "unTimestamp" field.</summary>
    public const int UnTimestampFieldNumber = 8;
    private int unTimestamp_;
    /// <summary>
    /// 有效期：>0表示剩余时间（秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnTimestamp {
      get { return unTimestamp_; }
      set {
        unTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipmentInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipmentInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnId != other.UnId) return false;
      if (UnType != other.UnType) return false;
      if (UnPosition != other.UnPosition) return false;
      if (UnEnchantTime != other.UnEnchantTime) return false;
      if(!unBasicOption_.Equals(other.unBasicOption_)) return false;
      if(!unBasicValue_.Equals(other.unBasicValue_)) return false;
      if (UnAttack != other.UnAttack) return false;
      if (UnTimestamp != other.UnTimestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnId != 0) hash ^= UnId.GetHashCode();
      if (UnType != 0) hash ^= UnType.GetHashCode();
      if (UnPosition != 0) hash ^= UnPosition.GetHashCode();
      if (UnEnchantTime != 0) hash ^= UnEnchantTime.GetHashCode();
      hash ^= unBasicOption_.GetHashCode();
      hash ^= unBasicValue_.GetHashCode();
      if (UnAttack != 0) hash ^= UnAttack.GetHashCode();
      if (UnTimestamp != 0) hash ^= UnTimestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnId);
      }
      if (UnType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnType);
      }
      if (UnPosition != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnPosition);
      }
      if (UnEnchantTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnEnchantTime);
      }
      unBasicOption_.WriteTo(output, _repeated_unBasicOption_codec);
      unBasicValue_.WriteTo(output, _repeated_unBasicValue_codec);
      if (UnAttack != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UnAttack);
      }
      if (UnTimestamp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UnTimestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnId);
      }
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      if (UnPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPosition);
      }
      if (UnEnchantTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnEnchantTime);
      }
      size += unBasicOption_.CalculateSize(_repeated_unBasicOption_codec);
      size += unBasicValue_.CalculateSize(_repeated_unBasicValue_codec);
      if (UnAttack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnAttack);
      }
      if (UnTimestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnTimestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipmentInfo other) {
      if (other == null) {
        return;
      }
      if (other.UnId != 0) {
        UnId = other.UnId;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
      if (other.UnPosition != 0) {
        UnPosition = other.UnPosition;
      }
      if (other.UnEnchantTime != 0) {
        UnEnchantTime = other.UnEnchantTime;
      }
      unBasicOption_.Add(other.unBasicOption_);
      unBasicValue_.Add(other.unBasicValue_);
      if (other.UnAttack != 0) {
        UnAttack = other.UnAttack;
      }
      if (other.UnTimestamp != 0) {
        UnTimestamp = other.UnTimestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnId = input.ReadInt32();
            break;
          }
          case 16: {
            UnType = input.ReadInt32();
            break;
          }
          case 24: {
            UnPosition = input.ReadInt32();
            break;
          }
          case 32: {
            UnEnchantTime = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            unBasicOption_.AddEntriesFrom(input, _repeated_unBasicOption_codec);
            break;
          }
          case 50:
          case 48: {
            unBasicValue_.AddEntriesFrom(input, _repeated_unBasicValue_codec);
            break;
          }
          case 56: {
            UnAttack = input.ReadInt32();
            break;
          }
          case 64: {
            UnTimestamp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：查询装备列表回复
  /// _MSG_EQUIPMENT_QUERY_S
  /// </summary>
  public sealed partial class PMsgEquipmentQueryS : pb::IMessage<PMsgEquipmentQueryS> {
    private static readonly pb::MessageParser<PMsgEquipmentQueryS> _parser = new pb::MessageParser<PMsgEquipmentQueryS>(() => new PMsgEquipmentQueryS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentQueryS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentQueryS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentQueryS(PMsgEquipmentQueryS other) : this() {
      unEquipmentCount_ = other.unEquipmentCount_;
      cEquipmentInfo_ = other.cEquipmentInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentQueryS Clone() {
      return new PMsgEquipmentQueryS(this);
    }

    /// <summary>Field number for the "unEquipmentCount" field.</summary>
    public const int UnEquipmentCountFieldNumber = 1;
    private int unEquipmentCount_;
    /// <summary>
    /// 装备数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnEquipmentCount {
      get { return unEquipmentCount_; }
      set {
        unEquipmentCount_ = value;
      }
    }

    /// <summary>Field number for the "cEquipmentInfo" field.</summary>
    public const int CEquipmentInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sw.EquipmentInfo> _repeated_cEquipmentInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Sw.EquipmentInfo.Parser);
    private readonly pbc::RepeatedField<global::Sw.EquipmentInfo> cEquipmentInfo_ = new pbc::RepeatedField<global::Sw.EquipmentInfo>();
    /// <summary>
    /// 装备信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.EquipmentInfo> CEquipmentInfo {
      get { return cEquipmentInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentQueryS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentQueryS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnEquipmentCount != other.UnEquipmentCount) return false;
      if(!cEquipmentInfo_.Equals(other.cEquipmentInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnEquipmentCount != 0) hash ^= UnEquipmentCount.GetHashCode();
      hash ^= cEquipmentInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnEquipmentCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnEquipmentCount);
      }
      cEquipmentInfo_.WriteTo(output, _repeated_cEquipmentInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnEquipmentCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnEquipmentCount);
      }
      size += cEquipmentInfo_.CalculateSize(_repeated_cEquipmentInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentQueryS other) {
      if (other == null) {
        return;
      }
      if (other.UnEquipmentCount != 0) {
        UnEquipmentCount = other.UnEquipmentCount;
      }
      cEquipmentInfo_.Add(other.cEquipmentInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnEquipmentCount = input.ReadInt32();
            break;
          }
          case 18: {
            cEquipmentInfo_.AddEntriesFrom(input, _repeated_cEquipmentInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：装备删除
  /// _MSG_EQUIPMENT_DEL_S
  /// </summary>
  public sealed partial class PMsgEquipmentDelS : pb::IMessage<PMsgEquipmentDelS> {
    private static readonly pb::MessageParser<PMsgEquipmentDelS> _parser = new pb::MessageParser<PMsgEquipmentDelS>(() => new PMsgEquipmentDelS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentDelS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentDelS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentDelS(PMsgEquipmentDelS other) : this() {
      unId_ = other.unId_;
      unType_ = other.unType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentDelS Clone() {
      return new PMsgEquipmentDelS(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private int unId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnId {
      get { return unId_; }
      set {
        unId_ = value;
      }
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 2;
    private int unType_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentDelS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentDelS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnId != other.UnId) return false;
      if (UnType != other.UnType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnId != 0) hash ^= UnId.GetHashCode();
      if (UnType != 0) hash ^= UnType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnId);
      }
      if (UnType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnId);
      }
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentDelS other) {
      if (other == null) {
        return;
      }
      if (other.UnId != 0) {
        UnId = other.UnId;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnId = input.ReadInt32();
            break;
          }
          case 16: {
            UnType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：装备强化
  /// _MSG_EQUIPMENT_ENCHANT_C
  /// </summary>
  public sealed partial class PMsgEquipmentEnchantC : pb::IMessage<PMsgEquipmentEnchantC> {
    private static readonly pb::MessageParser<PMsgEquipmentEnchantC> _parser = new pb::MessageParser<PMsgEquipmentEnchantC>(() => new PMsgEquipmentEnchantC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentEnchantC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEnchantC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEnchantC(PMsgEquipmentEnchantC other) : this() {
      unId_ = other.unId_;
      unType_ = other.unType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEnchantC Clone() {
      return new PMsgEquipmentEnchantC(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private int unId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnId {
      get { return unId_; }
      set {
        unId_ = value;
      }
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 2;
    private int unType_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentEnchantC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentEnchantC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnId != other.UnId) return false;
      if (UnType != other.UnType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnId != 0) hash ^= UnId.GetHashCode();
      if (UnType != 0) hash ^= UnType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnId);
      }
      if (UnType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnId);
      }
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentEnchantC other) {
      if (other == null) {
        return;
      }
      if (other.UnId != 0) {
        UnId = other.UnId;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnId = input.ReadInt32();
            break;
          }
          case 16: {
            UnType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：装备强化回复
  /// _MSG_EQUIPMENT_ENCHANT_S
  /// </summary>
  public sealed partial class PMsgEquipmentEnchantS : pb::IMessage<PMsgEquipmentEnchantS> {
    private static readonly pb::MessageParser<PMsgEquipmentEnchantS> _parser = new pb::MessageParser<PMsgEquipmentEnchantS>(() => new PMsgEquipmentEnchantS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentEnchantS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEnchantS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEnchantS(PMsgEquipmentEnchantS other) : this() {
      unId_ = other.unId_;
      unType_ = other.unType_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEnchantS Clone() {
      return new PMsgEquipmentEnchantS(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private int unId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnId {
      get { return unId_; }
      set {
        unId_ = value;
      }
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 2;
    private int unType_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentEnchantS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentEnchantS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnId != other.UnId) return false;
      if (UnType != other.UnType) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnId != 0) hash ^= UnId.GetHashCode();
      if (UnType != 0) hash ^= UnType.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnId);
      }
      if (UnType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnType);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnId);
      }
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentEnchantS other) {
      if (other == null) {
        return;
      }
      if (other.UnId != 0) {
        UnId = other.UnId;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnId = input.ReadInt32();
            break;
          }
          case 16: {
            UnType = input.ReadInt32();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：装备一键强化
  /// _MSG_EQUIPMENT_ENCHANT_TURBO_C
  /// </summary>
  public sealed partial class PMsgEquipmentEnchantTurboC : pb::IMessage<PMsgEquipmentEnchantTurboC> {
    private static readonly pb::MessageParser<PMsgEquipmentEnchantTurboC> _parser = new pb::MessageParser<PMsgEquipmentEnchantTurboC>(() => new PMsgEquipmentEnchantTurboC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentEnchantTurboC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEnchantTurboC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEnchantTurboC(PMsgEquipmentEnchantTurboC other) : this() {
      unId_ = other.unId_;
      unType_ = other.unType_;
      unTimes_ = other.unTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEnchantTurboC Clone() {
      return new PMsgEquipmentEnchantTurboC(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private int unId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnId {
      get { return unId_; }
      set {
        unId_ = value;
      }
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 2;
    private int unType_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    /// <summary>Field number for the "unTimes" field.</summary>
    public const int UnTimesFieldNumber = 3;
    private int unTimes_;
    /// <summary>
    /// 强化次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnTimes {
      get { return unTimes_; }
      set {
        unTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentEnchantTurboC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentEnchantTurboC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnId != other.UnId) return false;
      if (UnType != other.UnType) return false;
      if (UnTimes != other.UnTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnId != 0) hash ^= UnId.GetHashCode();
      if (UnType != 0) hash ^= UnType.GetHashCode();
      if (UnTimes != 0) hash ^= UnTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnId);
      }
      if (UnType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnType);
      }
      if (UnTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnId);
      }
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      if (UnTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentEnchantTurboC other) {
      if (other == null) {
        return;
      }
      if (other.UnId != 0) {
        UnId = other.UnId;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
      if (other.UnTimes != 0) {
        UnTimes = other.UnTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnId = input.ReadInt32();
            break;
          }
          case 16: {
            UnType = input.ReadInt32();
            break;
          }
          case 24: {
            UnTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：装备一键强化回复
  /// _MSG_EQUIPMENT_ENCHANT_TURBO_S
  /// </summary>
  public sealed partial class PMsgEquipmentEnchantTurboS : pb::IMessage<PMsgEquipmentEnchantTurboS> {
    private static readonly pb::MessageParser<PMsgEquipmentEnchantTurboS> _parser = new pb::MessageParser<PMsgEquipmentEnchantTurboS>(() => new PMsgEquipmentEnchantTurboS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentEnchantTurboS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEnchantTurboS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEnchantTurboS(PMsgEquipmentEnchantTurboS other) : this() {
      unId_ = other.unId_;
      unType_ = other.unType_;
      unTimes_ = other.unTimes_;
      unRealTimes_ = other.unRealTimes_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEnchantTurboS Clone() {
      return new PMsgEquipmentEnchantTurboS(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private int unId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnId {
      get { return unId_; }
      set {
        unId_ = value;
      }
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 2;
    private int unType_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    /// <summary>Field number for the "unTimes" field.</summary>
    public const int UnTimesFieldNumber = 3;
    private int unTimes_;
    /// <summary>
    /// 强化次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnTimes {
      get { return unTimes_; }
      set {
        unTimes_ = value;
      }
    }

    /// <summary>Field number for the "unRealTimes" field.</summary>
    public const int UnRealTimesFieldNumber = 4;
    private int unRealTimes_;
    /// <summary>
    /// 实际强化次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnRealTimes {
      get { return unRealTimes_; }
      set {
        unRealTimes_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentEnchantTurboS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentEnchantTurboS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnId != other.UnId) return false;
      if (UnType != other.UnType) return false;
      if (UnTimes != other.UnTimes) return false;
      if (UnRealTimes != other.UnRealTimes) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnId != 0) hash ^= UnId.GetHashCode();
      if (UnType != 0) hash ^= UnType.GetHashCode();
      if (UnTimes != 0) hash ^= UnTimes.GetHashCode();
      if (UnRealTimes != 0) hash ^= UnRealTimes.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnId);
      }
      if (UnType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnType);
      }
      if (UnTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnTimes);
      }
      if (UnRealTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnRealTimes);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnId);
      }
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      if (UnTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnTimes);
      }
      if (UnRealTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnRealTimes);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentEnchantTurboS other) {
      if (other == null) {
        return;
      }
      if (other.UnId != 0) {
        UnId = other.UnId;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
      if (other.UnTimes != 0) {
        UnTimes = other.UnTimes;
      }
      if (other.UnRealTimes != 0) {
        UnRealTimes = other.UnRealTimes;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnId = input.ReadInt32();
            break;
          }
          case 16: {
            UnType = input.ReadInt32();
            break;
          }
          case 24: {
            UnTimes = input.ReadInt32();
            break;
          }
          case 32: {
            UnRealTimes = input.ReadInt32();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：装备精炼
  /// _MSG_EQUIPMENT_EVOLVE_C
  /// </summary>
  public sealed partial class PMsgEquipmentEvolveC : pb::IMessage<PMsgEquipmentEvolveC> {
    private static readonly pb::MessageParser<PMsgEquipmentEvolveC> _parser = new pb::MessageParser<PMsgEquipmentEvolveC>(() => new PMsgEquipmentEvolveC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentEvolveC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEvolveC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEvolveC(PMsgEquipmentEvolveC other) : this() {
      unId_ = other.unId_;
      unType_ = other.unType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEvolveC Clone() {
      return new PMsgEquipmentEvolveC(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private int unId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnId {
      get { return unId_; }
      set {
        unId_ = value;
      }
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 2;
    private int unType_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentEvolveC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentEvolveC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnId != other.UnId) return false;
      if (UnType != other.UnType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnId != 0) hash ^= UnId.GetHashCode();
      if (UnType != 0) hash ^= UnType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnId);
      }
      if (UnType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnId);
      }
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentEvolveC other) {
      if (other == null) {
        return;
      }
      if (other.UnId != 0) {
        UnId = other.UnId;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnId = input.ReadInt32();
            break;
          }
          case 16: {
            UnType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：装备精炼回复
  /// _MSG_EQUIPMENT_EVOLVE_S
  /// </summary>
  public sealed partial class PMsgEquipmentEvolveS : pb::IMessage<PMsgEquipmentEvolveS> {
    private static readonly pb::MessageParser<PMsgEquipmentEvolveS> _parser = new pb::MessageParser<PMsgEquipmentEvolveS>(() => new PMsgEquipmentEvolveS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentEvolveS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEvolveS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEvolveS(PMsgEquipmentEvolveS other) : this() {
      unId_ = other.unId_;
      unType_ = other.unType_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentEvolveS Clone() {
      return new PMsgEquipmentEvolveS(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private int unId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnId {
      get { return unId_; }
      set {
        unId_ = value;
      }
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 2;
    private int unType_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentEvolveS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentEvolveS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnId != other.UnId) return false;
      if (UnType != other.UnType) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnId != 0) hash ^= UnId.GetHashCode();
      if (UnType != 0) hash ^= UnType.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnId);
      }
      if (UnType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnType);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnId);
      }
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentEvolveS other) {
      if (other == null) {
        return;
      }
      if (other.UnId != 0) {
        UnId = other.UnId;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnId = input.ReadInt32();
            break;
          }
          case 16: {
            UnType = input.ReadInt32();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：装备分解（一键分解）
  /// _MSG_EQUIPMENT_BREAK_C
  /// </summary>
  public sealed partial class PMsgEquipmentBreakC : pb::IMessage<PMsgEquipmentBreakC> {
    private static readonly pb::MessageParser<PMsgEquipmentBreakC> _parser = new pb::MessageParser<PMsgEquipmentBreakC>(() => new PMsgEquipmentBreakC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentBreakC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentBreakC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentBreakC(PMsgEquipmentBreakC other) : this() {
      unId_ = other.unId_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentBreakC Clone() {
      return new PMsgEquipmentBreakC(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_unId_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> unId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 装备id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnId {
      get { return unId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentBreakC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentBreakC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!unId_.Equals(other.unId_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= unId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      unId_.WriteTo(output, _repeated_unId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += unId_.CalculateSize(_repeated_unId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentBreakC other) {
      if (other == null) {
        return;
      }
      unId_.Add(other.unId_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            unId_.AddEntriesFrom(input, _repeated_unId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：装备分解回复（一键分解）
  /// _MSG_EQUIPMENT_BREAK_S
  /// </summary>
  public sealed partial class PMsgEquipmentBreakS : pb::IMessage<PMsgEquipmentBreakS> {
    private static readonly pb::MessageParser<PMsgEquipmentBreakS> _parser = new pb::MessageParser<PMsgEquipmentBreakS>(() => new PMsgEquipmentBreakS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentBreakS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentBreakS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentBreakS(PMsgEquipmentBreakS other) : this() {
      unId_ = other.unId_.Clone();
      unCoin_ = other.unCoin_;
      cInfo_ = other.cInfo_.Clone();
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentBreakS Clone() {
      return new PMsgEquipmentBreakS(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_unId_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> unId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 装备id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnId {
      get { return unId_; }
    }

    /// <summary>Field number for the "unCoin" field.</summary>
    public const int UnCoinFieldNumber = 3;
    private int unCoin_;
    /// <summary>
    /// 返还的铜币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnCoin {
      get { return unCoin_; }
      set {
        unCoin_ = value;
      }
    }

    /// <summary>Field number for the "cInfo" field.</summary>
    public const int CInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Sw.PMsgEquipmentBreakS.Types.EquipmentBreakInfo> _repeated_cInfo_codec
        = pb::FieldCodec.ForMessage(34, global::Sw.PMsgEquipmentBreakS.Types.EquipmentBreakInfo.Parser);
    private readonly pbc::RepeatedField<global::Sw.PMsgEquipmentBreakS.Types.EquipmentBreakInfo> cInfo_ = new pbc::RepeatedField<global::Sw.PMsgEquipmentBreakS.Types.EquipmentBreakInfo>();
    /// <summary>
    /// 分解获得的道具信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.PMsgEquipmentBreakS.Types.EquipmentBreakInfo> CInfo {
      get { return cInfo_; }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentBreakS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentBreakS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!unId_.Equals(other.unId_)) return false;
      if (UnCoin != other.UnCoin) return false;
      if(!cInfo_.Equals(other.cInfo_)) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= unId_.GetHashCode();
      if (UnCoin != 0) hash ^= UnCoin.GetHashCode();
      hash ^= cInfo_.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      unId_.WriteTo(output, _repeated_unId_codec);
      if (UnCoin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnCoin);
      }
      cInfo_.WriteTo(output, _repeated_cInfo_codec);
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += unId_.CalculateSize(_repeated_unId_codec);
      if (UnCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnCoin);
      }
      size += cInfo_.CalculateSize(_repeated_cInfo_codec);
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentBreakS other) {
      if (other == null) {
        return;
      }
      unId_.Add(other.unId_);
      if (other.UnCoin != 0) {
        UnCoin = other.UnCoin;
      }
      cInfo_.Add(other.cInfo_);
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            unId_.AddEntriesFrom(input, _repeated_unId_codec);
            break;
          }
          case 24: {
            UnCoin = input.ReadInt32();
            break;
          }
          case 34: {
            cInfo_.AddEntriesFrom(input, _repeated_cInfo_codec);
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PMsgEquipmentBreakS message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// 分解获得的道具信息
      /// </summary>
      public sealed partial class EquipmentBreakInfo : pb::IMessage<EquipmentBreakInfo> {
        private static readonly pb::MessageParser<EquipmentBreakInfo> _parser = new pb::MessageParser<EquipmentBreakInfo>(() => new EquipmentBreakInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EquipmentBreakInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sw.PMsgEquipmentBreakS.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EquipmentBreakInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EquipmentBreakInfo(EquipmentBreakInfo other) : this() {
          unType_ = other.unType_;
          unNum_ = other.unNum_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EquipmentBreakInfo Clone() {
          return new EquipmentBreakInfo(this);
        }

        /// <summary>Field number for the "unType" field.</summary>
        public const int UnTypeFieldNumber = 1;
        private int unType_;
        /// <summary>
        /// 类型
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int UnType {
          get { return unType_; }
          set {
            unType_ = value;
          }
        }

        /// <summary>Field number for the "unNum" field.</summary>
        public const int UnNumFieldNumber = 2;
        private int unNum_;
        /// <summary>
        /// 数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int UnNum {
          get { return unNum_; }
          set {
            unNum_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EquipmentBreakInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EquipmentBreakInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UnType != other.UnType) return false;
          if (UnNum != other.UnNum) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (UnType != 0) hash ^= UnType.GetHashCode();
          if (UnNum != 0) hash ^= UnNum.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (UnType != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(UnType);
          }
          if (UnNum != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(UnNum);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (UnType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
          }
          if (UnNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnNum);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EquipmentBreakInfo other) {
          if (other == null) {
            return;
          }
          if (other.UnType != 0) {
            UnType = other.UnType;
          }
          if (other.UnNum != 0) {
            UnNum = other.UnNum;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                UnType = input.ReadInt32();
                break;
              }
              case 16: {
                UnNum = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 客户端：使用装备
  /// _MSG_EQUIPMENT_USE_C
  /// </summary>
  public sealed partial class PMsgEquipmentUserC : pb::IMessage<PMsgEquipmentUserC> {
    private static readonly pb::MessageParser<PMsgEquipmentUserC> _parser = new pb::MessageParser<PMsgEquipmentUserC>(() => new PMsgEquipmentUserC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentUserC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentUserC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentUserC(PMsgEquipmentUserC other) : this() {
      unId_ = other.unId_;
      unType_ = other.unType_;
      unRoleFlag_ = other.unRoleFlag_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentUserC Clone() {
      return new PMsgEquipmentUserC(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private int unId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnId {
      get { return unId_; }
      set {
        unId_ = value;
      }
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 2;
    private int unType_;
    /// <summary>
    /// 类型：1-穿上，2-脱下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    /// <summary>Field number for the "unRoleFlag" field.</summary>
    public const int UnRoleFlagFieldNumber = 3;
    private int unRoleFlag_;
    /// <summary>
    /// 角色标志：1-角色，2-伙伴（预留）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnRoleFlag {
      get { return unRoleFlag_; }
      set {
        unRoleFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentUserC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentUserC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnId != other.UnId) return false;
      if (UnType != other.UnType) return false;
      if (UnRoleFlag != other.UnRoleFlag) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnId != 0) hash ^= UnId.GetHashCode();
      if (UnType != 0) hash ^= UnType.GetHashCode();
      if (UnRoleFlag != 0) hash ^= UnRoleFlag.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnId);
      }
      if (UnType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnType);
      }
      if (UnRoleFlag != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnRoleFlag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnId);
      }
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      if (UnRoleFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnRoleFlag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentUserC other) {
      if (other == null) {
        return;
      }
      if (other.UnId != 0) {
        UnId = other.UnId;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
      if (other.UnRoleFlag != 0) {
        UnRoleFlag = other.UnRoleFlag;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnId = input.ReadInt32();
            break;
          }
          case 16: {
            UnType = input.ReadInt32();
            break;
          }
          case 24: {
            UnRoleFlag = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：使用装备回复
  /// _MSG_EQUIPMENT_USE_S
  /// </summary>
  public sealed partial class PMsgEquipmentUserS : pb::IMessage<PMsgEquipmentUserS> {
    private static readonly pb::MessageParser<PMsgEquipmentUserS> _parser = new pb::MessageParser<PMsgEquipmentUserS>(() => new PMsgEquipmentUserS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentUserS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentUserS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentUserS(PMsgEquipmentUserS other) : this() {
      unId_ = other.unId_;
      unType_ = other.unType_;
      unRoleFlag_ = other.unRoleFlag_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentUserS Clone() {
      return new PMsgEquipmentUserS(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private int unId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnId {
      get { return unId_; }
      set {
        unId_ = value;
      }
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 2;
    private int unType_;
    /// <summary>
    /// 使用类型：1-穿上，2-脱下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    /// <summary>Field number for the "unRoleFlag" field.</summary>
    public const int UnRoleFlagFieldNumber = 3;
    private int unRoleFlag_;
    /// <summary>
    /// 角色标志：1-角色，2-伙伴（预留）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnRoleFlag {
      get { return unRoleFlag_; }
      set {
        unRoleFlag_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentUserS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentUserS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnId != other.UnId) return false;
      if (UnType != other.UnType) return false;
      if (UnRoleFlag != other.UnRoleFlag) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnId != 0) hash ^= UnId.GetHashCode();
      if (UnType != 0) hash ^= UnType.GetHashCode();
      if (UnRoleFlag != 0) hash ^= UnRoleFlag.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnId);
      }
      if (UnType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnType);
      }
      if (UnRoleFlag != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnRoleFlag);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnId);
      }
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      if (UnRoleFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnRoleFlag);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentUserS other) {
      if (other == null) {
        return;
      }
      if (other.UnId != 0) {
        UnId = other.UnId;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
      if (other.UnRoleFlag != 0) {
        UnRoleFlag = other.UnRoleFlag;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnId = input.ReadInt32();
            break;
          }
          case 16: {
            UnType = input.ReadInt32();
            break;
          }
          case 24: {
            UnRoleFlag = input.ReadInt32();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 出售的装备信息
  /// </summary>
  public sealed partial class EquipmentSellInfo : pb::IMessage<EquipmentSellInfo> {
    private static readonly pb::MessageParser<EquipmentSellInfo> _parser = new pb::MessageParser<EquipmentSellInfo>(() => new EquipmentSellInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipmentSellInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentSellInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentSellInfo(EquipmentSellInfo other) : this() {
      unId_ = other.unId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentSellInfo Clone() {
      return new EquipmentSellInfo(this);
    }

    /// <summary>Field number for the "unId" field.</summary>
    public const int UnIdFieldNumber = 1;
    private int unId_;
    /// <summary>
    /// 装备id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnId {
      get { return unId_; }
      set {
        unId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipmentSellInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipmentSellInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnId != other.UnId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnId != 0) hash ^= UnId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipmentSellInfo other) {
      if (other == null) {
        return;
      }
      if (other.UnId != 0) {
        UnId = other.UnId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：装备出售
  /// _MSG_EQUIPMENT_SELL_C
  /// </summary>
  public sealed partial class PMsgEquipmentSellC : pb::IMessage<PMsgEquipmentSellC> {
    private static readonly pb::MessageParser<PMsgEquipmentSellC> _parser = new pb::MessageParser<PMsgEquipmentSellC>(() => new PMsgEquipmentSellC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentSellC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSellC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSellC(PMsgEquipmentSellC other) : this() {
      cInfo_ = other.cInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSellC Clone() {
      return new PMsgEquipmentSellC(this);
    }

    /// <summary>Field number for the "cInfo" field.</summary>
    public const int CInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sw.EquipmentSellInfo> _repeated_cInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Sw.EquipmentSellInfo.Parser);
    private readonly pbc::RepeatedField<global::Sw.EquipmentSellInfo> cInfo_ = new pbc::RepeatedField<global::Sw.EquipmentSellInfo>();
    /// <summary>
    /// 出售的装备信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.EquipmentSellInfo> CInfo {
      get { return cInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentSellC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentSellC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cInfo_.Equals(other.cInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cInfo_.WriteTo(output, _repeated_cInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cInfo_.CalculateSize(_repeated_cInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentSellC other) {
      if (other == null) {
        return;
      }
      cInfo_.Add(other.cInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cInfo_.AddEntriesFrom(input, _repeated_cInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：装备出售回复
  /// _MSG_EQUIPMENT_SELL_S
  /// </summary>
  public sealed partial class PMsgEquipmentSellS : pb::IMessage<PMsgEquipmentSellS> {
    private static readonly pb::MessageParser<PMsgEquipmentSellS> _parser = new pb::MessageParser<PMsgEquipmentSellS>(() => new PMsgEquipmentSellS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentSellS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSellS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSellS(PMsgEquipmentSellS other) : this() {
      cInfo_ = other.cInfo_.Clone();
      unCoin_ = other.unCoin_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSellS Clone() {
      return new PMsgEquipmentSellS(this);
    }

    /// <summary>Field number for the "cInfo" field.</summary>
    public const int CInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sw.EquipmentSellInfo> _repeated_cInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Sw.EquipmentSellInfo.Parser);
    private readonly pbc::RepeatedField<global::Sw.EquipmentSellInfo> cInfo_ = new pbc::RepeatedField<global::Sw.EquipmentSellInfo>();
    /// <summary>
    /// 出售的装备信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.EquipmentSellInfo> CInfo {
      get { return cInfo_; }
    }

    /// <summary>Field number for the "unCoin" field.</summary>
    public const int UnCoinFieldNumber = 2;
    private int unCoin_;
    /// <summary>
    /// 获得的铜币总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnCoin {
      get { return unCoin_; }
      set {
        unCoin_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentSellS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentSellS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cInfo_.Equals(other.cInfo_)) return false;
      if (UnCoin != other.UnCoin) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cInfo_.GetHashCode();
      if (UnCoin != 0) hash ^= UnCoin.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cInfo_.WriteTo(output, _repeated_cInfo_codec);
      if (UnCoin != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnCoin);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cInfo_.CalculateSize(_repeated_cInfo_codec);
      if (UnCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnCoin);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentSellS other) {
      if (other == null) {
        return;
      }
      cInfo_.Add(other.cInfo_);
      if (other.UnCoin != 0) {
        UnCoin = other.UnCoin;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cInfo_.AddEntriesFrom(input, _repeated_cInfo_codec);
            break;
          }
          case 16: {
            UnCoin = input.ReadInt32();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：查询套装列表
  /// _MSG_EQUIPMENT_SET_QUERY_C
  /// </summary>
  public sealed partial class PMsgEquipmentSetQueryC : pb::IMessage<PMsgEquipmentSetQueryC> {
    private static readonly pb::MessageParser<PMsgEquipmentSetQueryC> _parser = new pb::MessageParser<PMsgEquipmentSetQueryC>(() => new PMsgEquipmentSetQueryC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentSetQueryC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetQueryC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetQueryC(PMsgEquipmentSetQueryC other) : this() {
      unReserved_ = other.unReserved_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetQueryC Clone() {
      return new PMsgEquipmentSetQueryC(this);
    }

    /// <summary>Field number for the "unReserved" field.</summary>
    public const int UnReservedFieldNumber = 1;
    private int unReserved_;
    /// <summary>
    /// 保留字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnReserved {
      get { return unReserved_; }
      set {
        unReserved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentSetQueryC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentSetQueryC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnReserved != other.UnReserved) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnReserved != 0) hash ^= UnReserved.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnReserved != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnReserved);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnReserved != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnReserved);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentSetQueryC other) {
      if (other == null) {
        return;
      }
      if (other.UnReserved != 0) {
        UnReserved = other.UnReserved;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnReserved = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：查询套装列表回复
  /// _MSG_EQUIPMENT_SET_QUERY_S
  /// </summary>
  public sealed partial class PMsgEquipmentSetQueryS : pb::IMessage<PMsgEquipmentSetQueryS> {
    private static readonly pb::MessageParser<PMsgEquipmentSetQueryS> _parser = new pb::MessageParser<PMsgEquipmentSetQueryS>(() => new PMsgEquipmentSetQueryS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentSetQueryS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetQueryS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetQueryS(PMsgEquipmentSetQueryS other) : this() {
      unCurrentSetId_ = other.unCurrentSetId_;
      unSetId_ = other.unSetId_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetQueryS Clone() {
      return new PMsgEquipmentSetQueryS(this);
    }

    /// <summary>Field number for the "unCurrentSetId" field.</summary>
    public const int UnCurrentSetIdFieldNumber = 1;
    private int unCurrentSetId_;
    /// <summary>
    /// 当前套装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnCurrentSetId {
      get { return unCurrentSetId_; }
      set {
        unCurrentSetId_ = value;
      }
    }

    /// <summary>Field number for the "unSetId" field.</summary>
    public const int UnSetIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_unSetId_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> unSetId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 套装id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnSetId {
      get { return unSetId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentSetQueryS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentSetQueryS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnCurrentSetId != other.UnCurrentSetId) return false;
      if(!unSetId_.Equals(other.unSetId_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnCurrentSetId != 0) hash ^= UnCurrentSetId.GetHashCode();
      hash ^= unSetId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnCurrentSetId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnCurrentSetId);
      }
      unSetId_.WriteTo(output, _repeated_unSetId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnCurrentSetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnCurrentSetId);
      }
      size += unSetId_.CalculateSize(_repeated_unSetId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentSetQueryS other) {
      if (other == null) {
        return;
      }
      if (other.UnCurrentSetId != 0) {
        UnCurrentSetId = other.UnCurrentSetId;
      }
      unSetId_.Add(other.unSetId_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnCurrentSetId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            unSetId_.AddEntriesFrom(input, _repeated_unSetId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：选择套装
  /// _MSG_EQUIPMENT_SET_SELECT_C
  /// </summary>
  public sealed partial class PMsgEquipmentSetSelectC : pb::IMessage<PMsgEquipmentSetSelectC> {
    private static readonly pb::MessageParser<PMsgEquipmentSetSelectC> _parser = new pb::MessageParser<PMsgEquipmentSetSelectC>(() => new PMsgEquipmentSetSelectC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentSetSelectC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetSelectC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetSelectC(PMsgEquipmentSetSelectC other) : this() {
      unSetId_ = other.unSetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetSelectC Clone() {
      return new PMsgEquipmentSetSelectC(this);
    }

    /// <summary>Field number for the "unSetId" field.</summary>
    public const int UnSetIdFieldNumber = 1;
    private int unSetId_;
    /// <summary>
    /// 套装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnSetId {
      get { return unSetId_; }
      set {
        unSetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentSetSelectC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentSetSelectC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnSetId != other.UnSetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnSetId != 0) hash ^= UnSetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnSetId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnSetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnSetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnSetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentSetSelectC other) {
      if (other == null) {
        return;
      }
      if (other.UnSetId != 0) {
        UnSetId = other.UnSetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnSetId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：选择套装回复
  /// _MSG_EQUIPMENT_SET_SELECT_S
  /// </summary>
  public sealed partial class PMsgEquipmentSetSelectS : pb::IMessage<PMsgEquipmentSetSelectS> {
    private static readonly pb::MessageParser<PMsgEquipmentSetSelectS> _parser = new pb::MessageParser<PMsgEquipmentSetSelectS>(() => new PMsgEquipmentSetSelectS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentSetSelectS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetSelectS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetSelectS(PMsgEquipmentSetSelectS other) : this() {
      unSetId_ = other.unSetId_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetSelectS Clone() {
      return new PMsgEquipmentSetSelectS(this);
    }

    /// <summary>Field number for the "unSetId" field.</summary>
    public const int UnSetIdFieldNumber = 1;
    private int unSetId_;
    /// <summary>
    /// 套装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnSetId {
      get { return unSetId_; }
      set {
        unSetId_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentSetSelectS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentSetSelectS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnSetId != other.UnSetId) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnSetId != 0) hash ^= UnSetId.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnSetId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnSetId);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnSetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnSetId);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentSetSelectS other) {
      if (other == null) {
        return;
      }
      if (other.UnSetId != 0) {
        UnSetId = other.UnSetId;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnSetId = input.ReadInt32();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：更改当前套装
  /// _MSG_EQUIPMENT_SET_CHANGE_C
  /// </summary>
  public sealed partial class PMsgEquipmentSetChangeC : pb::IMessage<PMsgEquipmentSetChangeC> {
    private static readonly pb::MessageParser<PMsgEquipmentSetChangeC> _parser = new pb::MessageParser<PMsgEquipmentSetChangeC>(() => new PMsgEquipmentSetChangeC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentSetChangeC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetChangeC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetChangeC(PMsgEquipmentSetChangeC other) : this() {
      unSetId_ = other.unSetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetChangeC Clone() {
      return new PMsgEquipmentSetChangeC(this);
    }

    /// <summary>Field number for the "unSetId" field.</summary>
    public const int UnSetIdFieldNumber = 1;
    private int unSetId_;
    /// <summary>
    /// 套装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnSetId {
      get { return unSetId_; }
      set {
        unSetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentSetChangeC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentSetChangeC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnSetId != other.UnSetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnSetId != 0) hash ^= UnSetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnSetId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnSetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnSetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnSetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentSetChangeC other) {
      if (other == null) {
        return;
      }
      if (other.UnSetId != 0) {
        UnSetId = other.UnSetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnSetId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：选择套装回复
  /// _MSG_EQUIPMENT_SET_CHANGE_S
  /// </summary>
  public sealed partial class PMsgEquipmentSetChangeS : pb::IMessage<PMsgEquipmentSetChangeS> {
    private static readonly pb::MessageParser<PMsgEquipmentSetChangeS> _parser = new pb::MessageParser<PMsgEquipmentSetChangeS>(() => new PMsgEquipmentSetChangeS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgEquipmentSetChangeS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgEquipmentReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetChangeS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetChangeS(PMsgEquipmentSetChangeS other) : this() {
      unSetId_ = other.unSetId_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgEquipmentSetChangeS Clone() {
      return new PMsgEquipmentSetChangeS(this);
    }

    /// <summary>Field number for the "unSetId" field.</summary>
    public const int UnSetIdFieldNumber = 1;
    private int unSetId_;
    /// <summary>
    /// 套装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnSetId {
      get { return unSetId_; }
      set {
        unSetId_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgEquipmentSetChangeS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgEquipmentSetChangeS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnSetId != other.UnSetId) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnSetId != 0) hash ^= UnSetId.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnSetId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnSetId);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnSetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnSetId);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgEquipmentSetChangeS other) {
      if (other == null) {
        return;
      }
      if (other.UnSetId != 0) {
        UnSetId = other.UnSetId;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnSetId = input.ReadInt32();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
