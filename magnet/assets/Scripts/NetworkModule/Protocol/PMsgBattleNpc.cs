// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/PMsgBattleNpc.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sw {

  /// <summary>Holder for reflection information generated from protos/PMsgBattleNpc.proto</summary>
  public static partial class PMsgBattleNpcReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/PMsgBattleNpc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PMsgBattleNpcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chpwcm90b3MvUE1zZ0JhdHRsZU5wYy5wcm90bxICc3cipgIKElBNc2dCYXR0",
            "bGVOcGNJbmZvUxIPCgd1bk1hcElkGAEgASgFEhAKCHVsbE5wY0lkGAIgASgD",
            "EhEKCXVuTnBjVHlwZRgDIAEoBRINCgVuUG9zWBgEIAEoBRINCgVuUG9zWRgF",
            "IAEoBRINCgV1bkRpchgGIAEoBRIMCgR1bkhwGAcgASgFEg8KB3VuTWF4SHAY",
            "CCABKAUSLgoFY0luZm8YCiADKAsyHy5zdy5QTXNnQmF0dGxlTnBjSW5mb1Mu",
            "QnVmZkluZm8SFAoMdW5TdXBlckFybW9yGAsgASgFEhcKD3VuTWF4U3VwZXJB",
            "cm1vchgMIAEoBRovCghCdWZmSW5mbxIQCgh1bkJ1ZmZJZBgBIAEoBRIRCglm",
            "QnVmZlRpbWUYAiABKAIiyAEKE1BNc2dCYXR0bGVQcm9wSW5mb1MSDwoHdW5N",
            "YXBJZBgBIAEoBRIRCgl1bGxQcm9wSWQYAiABKAMSEgoKdW5Qcm9wVHlwZRgD",
            "IAEoBRINCgVuUG9zWBgEIAEoBRINCgVuUG9zWRgFIAEoBRINCgV1bkRpchgG",
            "IAEoBRIMCgR1bkhwGAcgASgFEg8KB3VuTWF4SHAYCCABKAUSFAoMdW5TdXBl",
            "ckFybW9yGAkgASgFEhcKD3VuTWF4U3VwZXJBcm1vchgKIAEoBSLGAgoaUE1z",
            "Z0JhdHRsZVByb2plY3RUaWxlSW5mb1MSFwoPdW5Pd25lclJvbGVUeXBlGAEg",
            "ASgFEhYKDnVsbE93bmVyUm9sZUlkGAIgASgDEg8KB3VuTWFwSWQYAyABKAUS",
            "GAoQdWxsUHJvamVjdFRpbGVJZBgEIAEoAxIOCgZ1blR5cGUYBSABKAUSEQoJ",
            "dW5Ta2lsbElkGAYgASgFEhYKDnVuU2tpbGxOb3RpSWR4GAcgASgFEhIKCm5T",
            "dGFydFBvc1gYCCABKAUSEgoKblN0YXJ0UG9zWRgJIAEoBRIQCghuRW5kUG9z",
            "WBgKIAEoBRIQCghuRW5kUG9zWRgLIAEoBRISCgpmVG90YWxUaW1lGAwgASgC",
            "EhMKC2ZSZW1haW5UaW1lGA0gASgCEg4KBmZTcGVlZBgOIAEoAhIMCgRmRGly",
            "GA8gAygCIt8BChlQTXNnQmF0dGxlQWRkUHJvamVjdFRpbGVDEhEKCXVuU2tp",
            "bGxJZBgBIAEoBRIWCg51blNraWxsTm90aUlkeBgCIAEoBRIZChF1blByb2pl",
            "Y3RUaWxlVHlwZRgDIAEoBRISCgpuU3RhcnRQb3NYGAQgASgFEhIKCm5TdGFy",
            "dFBvc1kYBSABKAUSEAoIbkVuZFBvc1gYBiABKAUSEAoIbkVuZFBvc1kYByAB",
            "KAUSEgoKZlRvdGFsVGltZRgIIAEoAhIOCgZmU3BlZWQYCSABKAISDAoEZkRp",
            "chgKIAMoAiKOAgoZUE1zZ0JhdHRsZUFkZFByb2plY3RUaWxlUxIRCgl1blNr",
            "aWxsSWQYASABKAUSFgoOdW5Ta2lsbE5vdGlJZHgYAiABKAUSGQoRdW5Qcm9q",
            "ZWN0VGlsZVR5cGUYAyABKAUSEgoKblN0YXJ0UG9zWBgEIAEoBRISCgpuU3Rh",
            "cnRQb3NZGAUgASgFEhAKCG5FbmRQb3NYGAYgASgFEhAKCG5FbmRQb3NZGAcg",
            "ASgFEhIKCmZUb3RhbFRpbWUYCCABKAISDgoGZlNwZWVkGAkgASgCEgwKBGZE",
            "aXIYCiADKAISGAoQdWxsUHJvamVjdFRpbGVJZBgLIAEoAxITCgt1bkVycm9y",
            "Q29kZRhjIAEoBSI1ChlQTXNnQmF0dGxlRGVsUHJvamVjdFRpbGVDEhgKEHVs",
            "bFByb2plY3RUaWxlSWQYASABKAMiSgoZUE1zZ0JhdHRsZURlbFByb2plY3RU",
            "aWxlUxIYChB1bGxQcm9qZWN0VGlsZUlkGAEgASgDEhMKC3VuRXJyb3JDb2Rl",
            "GGMgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleNpcInfoS), global::Sw.PMsgBattleNpcInfoS.Parser, new[]{ "UnMapId", "UllNpcId", "UnNpcType", "NPosX", "NPosY", "UnDir", "UnHp", "UnMaxHp", "CInfo", "UnSuperArmor", "UnMaxSuperArmor" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleNpcInfoS.Types.BuffInfo), global::Sw.PMsgBattleNpcInfoS.Types.BuffInfo.Parser, new[]{ "UnBuffId", "FBuffTime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattlePropInfoS), global::Sw.PMsgBattlePropInfoS.Parser, new[]{ "UnMapId", "UllPropId", "UnPropType", "NPosX", "NPosY", "UnDir", "UnHp", "UnMaxHp", "UnSuperArmor", "UnMaxSuperArmor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleProjectTileInfoS), global::Sw.PMsgBattleProjectTileInfoS.Parser, new[]{ "UnOwnerRoleType", "UllOwnerRoleId", "UnMapId", "UllProjectTileId", "UnType", "UnSkillId", "UnSkillNotiIdx", "NStartPosX", "NStartPosY", "NEndPosX", "NEndPosY", "FTotalTime", "FRemainTime", "FSpeed", "FDir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleAddProjectTileC), global::Sw.PMsgBattleAddProjectTileC.Parser, new[]{ "UnSkillId", "UnSkillNotiIdx", "UnProjectTileType", "NStartPosX", "NStartPosY", "NEndPosX", "NEndPosY", "FTotalTime", "FSpeed", "FDir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleAddProjectTileS), global::Sw.PMsgBattleAddProjectTileS.Parser, new[]{ "UnSkillId", "UnSkillNotiIdx", "UnProjectTileType", "NStartPosX", "NStartPosY", "NEndPosX", "NEndPosY", "FTotalTime", "FSpeed", "FDir", "UllProjectTileId", "UnErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleDelProjectTileC), global::Sw.PMsgBattleDelProjectTileC.Parser, new[]{ "UllProjectTileId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgBattleDelProjectTileS), global::Sw.PMsgBattleDelProjectTileS.Parser, new[]{ "UllProjectTileId", "UnErrorCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 服务器：Npc信息
  /// _MSG_BATTLE_NPC_INFO_S
  /// </summary>
  public sealed partial class PMsgBattleNpcInfoS : pb::IMessage<PMsgBattleNpcInfoS> {
    private static readonly pb::MessageParser<PMsgBattleNpcInfoS> _parser = new pb::MessageParser<PMsgBattleNpcInfoS>(() => new PMsgBattleNpcInfoS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleNpcInfoS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleNpcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleNpcInfoS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleNpcInfoS(PMsgBattleNpcInfoS other) : this() {
      unMapId_ = other.unMapId_;
      ullNpcId_ = other.ullNpcId_;
      unNpcType_ = other.unNpcType_;
      nPosX_ = other.nPosX_;
      nPosY_ = other.nPosY_;
      unDir_ = other.unDir_;
      unHp_ = other.unHp_;
      unMaxHp_ = other.unMaxHp_;
      cInfo_ = other.cInfo_.Clone();
      unSuperArmor_ = other.unSuperArmor_;
      unMaxSuperArmor_ = other.unMaxSuperArmor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleNpcInfoS Clone() {
      return new PMsgBattleNpcInfoS(this);
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 1;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    /// <summary>Field number for the "ullNpcId" field.</summary>
    public const int UllNpcIdFieldNumber = 2;
    private long ullNpcId_;
    /// <summary>
    /// Npc_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllNpcId {
      get { return ullNpcId_; }
      set {
        ullNpcId_ = value;
      }
    }

    /// <summary>Field number for the "unNpcType" field.</summary>
    public const int UnNpcTypeFieldNumber = 3;
    private int unNpcType_;
    /// <summary>
    /// Npc类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnNpcType {
      get { return unNpcType_; }
      set {
        unNpcType_ = value;
      }
    }

    /// <summary>Field number for the "nPosX" field.</summary>
    public const int NPosXFieldNumber = 4;
    private int nPosX_;
    /// <summary>
    /// 坐标：X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPosX {
      get { return nPosX_; }
      set {
        nPosX_ = value;
      }
    }

    /// <summary>Field number for the "nPosY" field.</summary>
    public const int NPosYFieldNumber = 5;
    private int nPosY_;
    /// <summary>
    /// 坐标：Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPosY {
      get { return nPosY_; }
      set {
        nPosY_ = value;
      }
    }

    /// <summary>Field number for the "unDir" field.</summary>
    public const int UnDirFieldNumber = 6;
    private int unDir_;
    /// <summary>
    /// 朝向（sw::MAP_DIR）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnDir {
      get { return unDir_; }
      set {
        unDir_ = value;
      }
    }

    /// <summary>Field number for the "unHp" field.</summary>
    public const int UnHpFieldNumber = 7;
    private int unHp_;
    /// <summary>
    /// 血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnHp {
      get { return unHp_; }
      set {
        unHp_ = value;
      }
    }

    /// <summary>Field number for the "unMaxHp" field.</summary>
    public const int UnMaxHpFieldNumber = 8;
    private int unMaxHp_;
    /// <summary>
    /// 血量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMaxHp {
      get { return unMaxHp_; }
      set {
        unMaxHp_ = value;
      }
    }

    /// <summary>Field number for the "cInfo" field.</summary>
    public const int CInfoFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Sw.PMsgBattleNpcInfoS.Types.BuffInfo> _repeated_cInfo_codec
        = pb::FieldCodec.ForMessage(82, global::Sw.PMsgBattleNpcInfoS.Types.BuffInfo.Parser);
    private readonly pbc::RepeatedField<global::Sw.PMsgBattleNpcInfoS.Types.BuffInfo> cInfo_ = new pbc::RepeatedField<global::Sw.PMsgBattleNpcInfoS.Types.BuffInfo>();
    /// <summary>
    /// Buff信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.PMsgBattleNpcInfoS.Types.BuffInfo> CInfo {
      get { return cInfo_; }
    }

    /// <summary>Field number for the "unSuperArmor" field.</summary>
    public const int UnSuperArmorFieldNumber = 11;
    private int unSuperArmor_;
    /// <summary>
    /// 破防值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnSuperArmor {
      get { return unSuperArmor_; }
      set {
        unSuperArmor_ = value;
      }
    }

    /// <summary>Field number for the "unMaxSuperArmor" field.</summary>
    public const int UnMaxSuperArmorFieldNumber = 12;
    private int unMaxSuperArmor_;
    /// <summary>
    /// 破防值上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMaxSuperArmor {
      get { return unMaxSuperArmor_; }
      set {
        unMaxSuperArmor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleNpcInfoS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleNpcInfoS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnMapId != other.UnMapId) return false;
      if (UllNpcId != other.UllNpcId) return false;
      if (UnNpcType != other.UnNpcType) return false;
      if (NPosX != other.NPosX) return false;
      if (NPosY != other.NPosY) return false;
      if (UnDir != other.UnDir) return false;
      if (UnHp != other.UnHp) return false;
      if (UnMaxHp != other.UnMaxHp) return false;
      if(!cInfo_.Equals(other.cInfo_)) return false;
      if (UnSuperArmor != other.UnSuperArmor) return false;
      if (UnMaxSuperArmor != other.UnMaxSuperArmor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      if (UllNpcId != 0L) hash ^= UllNpcId.GetHashCode();
      if (UnNpcType != 0) hash ^= UnNpcType.GetHashCode();
      if (NPosX != 0) hash ^= NPosX.GetHashCode();
      if (NPosY != 0) hash ^= NPosY.GetHashCode();
      if (UnDir != 0) hash ^= UnDir.GetHashCode();
      if (UnHp != 0) hash ^= UnHp.GetHashCode();
      if (UnMaxHp != 0) hash ^= UnMaxHp.GetHashCode();
      hash ^= cInfo_.GetHashCode();
      if (UnSuperArmor != 0) hash ^= UnSuperArmor.GetHashCode();
      if (UnMaxSuperArmor != 0) hash ^= UnMaxSuperArmor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnMapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnMapId);
      }
      if (UllNpcId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UllNpcId);
      }
      if (UnNpcType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnNpcType);
      }
      if (NPosX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NPosX);
      }
      if (NPosY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NPosY);
      }
      if (UnDir != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UnDir);
      }
      if (UnHp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UnHp);
      }
      if (UnMaxHp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UnMaxHp);
      }
      cInfo_.WriteTo(output, _repeated_cInfo_codec);
      if (UnSuperArmor != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(UnSuperArmor);
      }
      if (UnMaxSuperArmor != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(UnMaxSuperArmor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      if (UllNpcId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllNpcId);
      }
      if (UnNpcType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnNpcType);
      }
      if (NPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPosX);
      }
      if (NPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPosY);
      }
      if (UnDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnDir);
      }
      if (UnHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnHp);
      }
      if (UnMaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMaxHp);
      }
      size += cInfo_.CalculateSize(_repeated_cInfo_codec);
      if (UnSuperArmor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnSuperArmor);
      }
      if (UnMaxSuperArmor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMaxSuperArmor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleNpcInfoS other) {
      if (other == null) {
        return;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
      if (other.UllNpcId != 0L) {
        UllNpcId = other.UllNpcId;
      }
      if (other.UnNpcType != 0) {
        UnNpcType = other.UnNpcType;
      }
      if (other.NPosX != 0) {
        NPosX = other.NPosX;
      }
      if (other.NPosY != 0) {
        NPosY = other.NPosY;
      }
      if (other.UnDir != 0) {
        UnDir = other.UnDir;
      }
      if (other.UnHp != 0) {
        UnHp = other.UnHp;
      }
      if (other.UnMaxHp != 0) {
        UnMaxHp = other.UnMaxHp;
      }
      cInfo_.Add(other.cInfo_);
      if (other.UnSuperArmor != 0) {
        UnSuperArmor = other.UnSuperArmor;
      }
      if (other.UnMaxSuperArmor != 0) {
        UnMaxSuperArmor = other.UnMaxSuperArmor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnMapId = input.ReadInt32();
            break;
          }
          case 16: {
            UllNpcId = input.ReadInt64();
            break;
          }
          case 24: {
            UnNpcType = input.ReadInt32();
            break;
          }
          case 32: {
            NPosX = input.ReadInt32();
            break;
          }
          case 40: {
            NPosY = input.ReadInt32();
            break;
          }
          case 48: {
            UnDir = input.ReadInt32();
            break;
          }
          case 56: {
            UnHp = input.ReadInt32();
            break;
          }
          case 64: {
            UnMaxHp = input.ReadInt32();
            break;
          }
          case 82: {
            cInfo_.AddEntriesFrom(input, _repeated_cInfo_codec);
            break;
          }
          case 88: {
            UnSuperArmor = input.ReadInt32();
            break;
          }
          case 96: {
            UnMaxSuperArmor = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PMsgBattleNpcInfoS message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Buff信息
      /// </summary>
      public sealed partial class BuffInfo : pb::IMessage<BuffInfo> {
        private static readonly pb::MessageParser<BuffInfo> _parser = new pb::MessageParser<BuffInfo>(() => new BuffInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BuffInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sw.PMsgBattleNpcInfoS.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuffInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuffInfo(BuffInfo other) : this() {
          unBuffId_ = other.unBuffId_;
          fBuffTime_ = other.fBuffTime_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuffInfo Clone() {
          return new BuffInfo(this);
        }

        /// <summary>Field number for the "unBuffId" field.</summary>
        public const int UnBuffIdFieldNumber = 1;
        private int unBuffId_;
        /// <summary>
        /// Buff id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int UnBuffId {
          get { return unBuffId_; }
          set {
            unBuffId_ = value;
          }
        }

        /// <summary>Field number for the "fBuffTime" field.</summary>
        public const int FBuffTimeFieldNumber = 2;
        private float fBuffTime_;
        /// <summary>
        /// buff持续时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float FBuffTime {
          get { return fBuffTime_; }
          set {
            fBuffTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BuffInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BuffInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UnBuffId != other.UnBuffId) return false;
          if (FBuffTime != other.FBuffTime) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (UnBuffId != 0) hash ^= UnBuffId.GetHashCode();
          if (FBuffTime != 0F) hash ^= FBuffTime.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (UnBuffId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(UnBuffId);
          }
          if (FBuffTime != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(FBuffTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (UnBuffId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnBuffId);
          }
          if (FBuffTime != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BuffInfo other) {
          if (other == null) {
            return;
          }
          if (other.UnBuffId != 0) {
            UnBuffId = other.UnBuffId;
          }
          if (other.FBuffTime != 0F) {
            FBuffTime = other.FBuffTime;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                UnBuffId = input.ReadInt32();
                break;
              }
              case 21: {
                FBuffTime = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 服务器：Prop信息
  /// _MSG_BATTLE_PROP_INFO_S
  /// </summary>
  public sealed partial class PMsgBattlePropInfoS : pb::IMessage<PMsgBattlePropInfoS> {
    private static readonly pb::MessageParser<PMsgBattlePropInfoS> _parser = new pb::MessageParser<PMsgBattlePropInfoS>(() => new PMsgBattlePropInfoS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattlePropInfoS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleNpcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattlePropInfoS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattlePropInfoS(PMsgBattlePropInfoS other) : this() {
      unMapId_ = other.unMapId_;
      ullPropId_ = other.ullPropId_;
      unPropType_ = other.unPropType_;
      nPosX_ = other.nPosX_;
      nPosY_ = other.nPosY_;
      unDir_ = other.unDir_;
      unHp_ = other.unHp_;
      unMaxHp_ = other.unMaxHp_;
      unSuperArmor_ = other.unSuperArmor_;
      unMaxSuperArmor_ = other.unMaxSuperArmor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattlePropInfoS Clone() {
      return new PMsgBattlePropInfoS(this);
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 1;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    /// <summary>Field number for the "ullPropId" field.</summary>
    public const int UllPropIdFieldNumber = 2;
    private long ullPropId_;
    /// <summary>
    /// Prop_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllPropId {
      get { return ullPropId_; }
      set {
        ullPropId_ = value;
      }
    }

    /// <summary>Field number for the "unPropType" field.</summary>
    public const int UnPropTypeFieldNumber = 3;
    private int unPropType_;
    /// <summary>
    /// Prop类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPropType {
      get { return unPropType_; }
      set {
        unPropType_ = value;
      }
    }

    /// <summary>Field number for the "nPosX" field.</summary>
    public const int NPosXFieldNumber = 4;
    private int nPosX_;
    /// <summary>
    /// 坐标：X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPosX {
      get { return nPosX_; }
      set {
        nPosX_ = value;
      }
    }

    /// <summary>Field number for the "nPosY" field.</summary>
    public const int NPosYFieldNumber = 5;
    private int nPosY_;
    /// <summary>
    /// 坐标：Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPosY {
      get { return nPosY_; }
      set {
        nPosY_ = value;
      }
    }

    /// <summary>Field number for the "unDir" field.</summary>
    public const int UnDirFieldNumber = 6;
    private int unDir_;
    /// <summary>
    /// 朝向（sw::MAP_DIR）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnDir {
      get { return unDir_; }
      set {
        unDir_ = value;
      }
    }

    /// <summary>Field number for the "unHp" field.</summary>
    public const int UnHpFieldNumber = 7;
    private int unHp_;
    /// <summary>
    /// 血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnHp {
      get { return unHp_; }
      set {
        unHp_ = value;
      }
    }

    /// <summary>Field number for the "unMaxHp" field.</summary>
    public const int UnMaxHpFieldNumber = 8;
    private int unMaxHp_;
    /// <summary>
    /// 血量上限	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMaxHp {
      get { return unMaxHp_; }
      set {
        unMaxHp_ = value;
      }
    }

    /// <summary>Field number for the "unSuperArmor" field.</summary>
    public const int UnSuperArmorFieldNumber = 9;
    private int unSuperArmor_;
    /// <summary>
    /// 破防值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnSuperArmor {
      get { return unSuperArmor_; }
      set {
        unSuperArmor_ = value;
      }
    }

    /// <summary>Field number for the "unMaxSuperArmor" field.</summary>
    public const int UnMaxSuperArmorFieldNumber = 10;
    private int unMaxSuperArmor_;
    /// <summary>
    /// 破防值上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMaxSuperArmor {
      get { return unMaxSuperArmor_; }
      set {
        unMaxSuperArmor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattlePropInfoS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattlePropInfoS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnMapId != other.UnMapId) return false;
      if (UllPropId != other.UllPropId) return false;
      if (UnPropType != other.UnPropType) return false;
      if (NPosX != other.NPosX) return false;
      if (NPosY != other.NPosY) return false;
      if (UnDir != other.UnDir) return false;
      if (UnHp != other.UnHp) return false;
      if (UnMaxHp != other.UnMaxHp) return false;
      if (UnSuperArmor != other.UnSuperArmor) return false;
      if (UnMaxSuperArmor != other.UnMaxSuperArmor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      if (UllPropId != 0L) hash ^= UllPropId.GetHashCode();
      if (UnPropType != 0) hash ^= UnPropType.GetHashCode();
      if (NPosX != 0) hash ^= NPosX.GetHashCode();
      if (NPosY != 0) hash ^= NPosY.GetHashCode();
      if (UnDir != 0) hash ^= UnDir.GetHashCode();
      if (UnHp != 0) hash ^= UnHp.GetHashCode();
      if (UnMaxHp != 0) hash ^= UnMaxHp.GetHashCode();
      if (UnSuperArmor != 0) hash ^= UnSuperArmor.GetHashCode();
      if (UnMaxSuperArmor != 0) hash ^= UnMaxSuperArmor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnMapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnMapId);
      }
      if (UllPropId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UllPropId);
      }
      if (UnPropType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnPropType);
      }
      if (NPosX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NPosX);
      }
      if (NPosY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NPosY);
      }
      if (UnDir != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UnDir);
      }
      if (UnHp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UnHp);
      }
      if (UnMaxHp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UnMaxHp);
      }
      if (UnSuperArmor != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(UnSuperArmor);
      }
      if (UnMaxSuperArmor != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UnMaxSuperArmor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      if (UllPropId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllPropId);
      }
      if (UnPropType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPropType);
      }
      if (NPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPosX);
      }
      if (NPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPosY);
      }
      if (UnDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnDir);
      }
      if (UnHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnHp);
      }
      if (UnMaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMaxHp);
      }
      if (UnSuperArmor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnSuperArmor);
      }
      if (UnMaxSuperArmor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMaxSuperArmor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattlePropInfoS other) {
      if (other == null) {
        return;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
      if (other.UllPropId != 0L) {
        UllPropId = other.UllPropId;
      }
      if (other.UnPropType != 0) {
        UnPropType = other.UnPropType;
      }
      if (other.NPosX != 0) {
        NPosX = other.NPosX;
      }
      if (other.NPosY != 0) {
        NPosY = other.NPosY;
      }
      if (other.UnDir != 0) {
        UnDir = other.UnDir;
      }
      if (other.UnHp != 0) {
        UnHp = other.UnHp;
      }
      if (other.UnMaxHp != 0) {
        UnMaxHp = other.UnMaxHp;
      }
      if (other.UnSuperArmor != 0) {
        UnSuperArmor = other.UnSuperArmor;
      }
      if (other.UnMaxSuperArmor != 0) {
        UnMaxSuperArmor = other.UnMaxSuperArmor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnMapId = input.ReadInt32();
            break;
          }
          case 16: {
            UllPropId = input.ReadInt64();
            break;
          }
          case 24: {
            UnPropType = input.ReadInt32();
            break;
          }
          case 32: {
            NPosX = input.ReadInt32();
            break;
          }
          case 40: {
            NPosY = input.ReadInt32();
            break;
          }
          case 48: {
            UnDir = input.ReadInt32();
            break;
          }
          case 56: {
            UnHp = input.ReadInt32();
            break;
          }
          case 64: {
            UnMaxHp = input.ReadInt32();
            break;
          }
          case 72: {
            UnSuperArmor = input.ReadInt32();
            break;
          }
          case 80: {
            UnMaxSuperArmor = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：发射体信息
  /// _MSG_BATTLE_PROJECTTILE_INFO_S
  /// </summary>
  public sealed partial class PMsgBattleProjectTileInfoS : pb::IMessage<PMsgBattleProjectTileInfoS> {
    private static readonly pb::MessageParser<PMsgBattleProjectTileInfoS> _parser = new pb::MessageParser<PMsgBattleProjectTileInfoS>(() => new PMsgBattleProjectTileInfoS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleProjectTileInfoS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleNpcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleProjectTileInfoS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleProjectTileInfoS(PMsgBattleProjectTileInfoS other) : this() {
      unOwnerRoleType_ = other.unOwnerRoleType_;
      ullOwnerRoleId_ = other.ullOwnerRoleId_;
      unMapId_ = other.unMapId_;
      ullProjectTileId_ = other.ullProjectTileId_;
      unType_ = other.unType_;
      unSkillId_ = other.unSkillId_;
      unSkillNotiIdx_ = other.unSkillNotiIdx_;
      nStartPosX_ = other.nStartPosX_;
      nStartPosY_ = other.nStartPosY_;
      nEndPosX_ = other.nEndPosX_;
      nEndPosY_ = other.nEndPosY_;
      fTotalTime_ = other.fTotalTime_;
      fRemainTime_ = other.fRemainTime_;
      fSpeed_ = other.fSpeed_;
      fDir_ = other.fDir_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleProjectTileInfoS Clone() {
      return new PMsgBattleProjectTileInfoS(this);
    }

    /// <summary>Field number for the "unOwnerRoleType" field.</summary>
    public const int UnOwnerRoleTypeFieldNumber = 1;
    private int unOwnerRoleType_;
    /// <summary>
    /// 宿主角色类型（ROLE_TYPE）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnOwnerRoleType {
      get { return unOwnerRoleType_; }
      set {
        unOwnerRoleType_ = value;
      }
    }

    /// <summary>Field number for the "ullOwnerRoleId" field.</summary>
    public const int UllOwnerRoleIdFieldNumber = 2;
    private long ullOwnerRoleId_;
    /// <summary>
    /// 宿主角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllOwnerRoleId {
      get { return ullOwnerRoleId_; }
      set {
        ullOwnerRoleId_ = value;
      }
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 3;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    /// <summary>Field number for the "ullProjectTileId" field.</summary>
    public const int UllProjectTileIdFieldNumber = 4;
    private long ullProjectTileId_;
    /// <summary>
    /// 发射体id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllProjectTileId {
      get { return ullProjectTileId_; }
      set {
        ullProjectTileId_ = value;
      }
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 5;
    private int unType_;
    /// <summary>
    /// 发射体类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    /// <summary>Field number for the "unSkillId" field.</summary>
    public const int UnSkillIdFieldNumber = 6;
    private int unSkillId_;
    /// <summary>
    /// 技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnSkillId {
      get { return unSkillId_; }
      set {
        unSkillId_ = value;
      }
    }

    /// <summary>Field number for the "unSkillNotiIdx" field.</summary>
    public const int UnSkillNotiIdxFieldNumber = 7;
    private int unSkillNotiIdx_;
    /// <summary>
    /// 技能分段id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnSkillNotiIdx {
      get { return unSkillNotiIdx_; }
      set {
        unSkillNotiIdx_ = value;
      }
    }

    /// <summary>Field number for the "nStartPosX" field.</summary>
    public const int NStartPosXFieldNumber = 8;
    private int nStartPosX_;
    /// <summary>
    /// 起始坐标：X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NStartPosX {
      get { return nStartPosX_; }
      set {
        nStartPosX_ = value;
      }
    }

    /// <summary>Field number for the "nStartPosY" field.</summary>
    public const int NStartPosYFieldNumber = 9;
    private int nStartPosY_;
    /// <summary>
    /// 起始坐标：Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NStartPosY {
      get { return nStartPosY_; }
      set {
        nStartPosY_ = value;
      }
    }

    /// <summary>Field number for the "nEndPosX" field.</summary>
    public const int NEndPosXFieldNumber = 10;
    private int nEndPosX_;
    /// <summary>
    /// 结束坐标：X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NEndPosX {
      get { return nEndPosX_; }
      set {
        nEndPosX_ = value;
      }
    }

    /// <summary>Field number for the "nEndPosY" field.</summary>
    public const int NEndPosYFieldNumber = 11;
    private int nEndPosY_;
    /// <summary>
    /// 结束坐标：Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NEndPosY {
      get { return nEndPosY_; }
      set {
        nEndPosY_ = value;
      }
    }

    /// <summary>Field number for the "fTotalTime" field.</summary>
    public const int FTotalTimeFieldNumber = 12;
    private float fTotalTime_;
    /// <summary>
    /// 时长(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FTotalTime {
      get { return fTotalTime_; }
      set {
        fTotalTime_ = value;
      }
    }

    /// <summary>Field number for the "fRemainTime" field.</summary>
    public const int FRemainTimeFieldNumber = 13;
    private float fRemainTime_;
    /// <summary>
    /// 剩余时长(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FRemainTime {
      get { return fRemainTime_; }
      set {
        fRemainTime_ = value;
      }
    }

    /// <summary>Field number for the "fSpeed" field.</summary>
    public const int FSpeedFieldNumber = 14;
    private float fSpeed_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FSpeed {
      get { return fSpeed_; }
      set {
        fSpeed_ = value;
      }
    }

    /// <summary>Field number for the "fDir" field.</summary>
    public const int FDirFieldNumber = 15;
    private static readonly pb::FieldCodec<float> _repeated_fDir_codec
        = pb::FieldCodec.ForFloat(122);
    private readonly pbc::RepeatedField<float> fDir_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FDir {
      get { return fDir_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleProjectTileInfoS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleProjectTileInfoS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnOwnerRoleType != other.UnOwnerRoleType) return false;
      if (UllOwnerRoleId != other.UllOwnerRoleId) return false;
      if (UnMapId != other.UnMapId) return false;
      if (UllProjectTileId != other.UllProjectTileId) return false;
      if (UnType != other.UnType) return false;
      if (UnSkillId != other.UnSkillId) return false;
      if (UnSkillNotiIdx != other.UnSkillNotiIdx) return false;
      if (NStartPosX != other.NStartPosX) return false;
      if (NStartPosY != other.NStartPosY) return false;
      if (NEndPosX != other.NEndPosX) return false;
      if (NEndPosY != other.NEndPosY) return false;
      if (FTotalTime != other.FTotalTime) return false;
      if (FRemainTime != other.FRemainTime) return false;
      if (FSpeed != other.FSpeed) return false;
      if(!fDir_.Equals(other.fDir_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnOwnerRoleType != 0) hash ^= UnOwnerRoleType.GetHashCode();
      if (UllOwnerRoleId != 0L) hash ^= UllOwnerRoleId.GetHashCode();
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      if (UllProjectTileId != 0L) hash ^= UllProjectTileId.GetHashCode();
      if (UnType != 0) hash ^= UnType.GetHashCode();
      if (UnSkillId != 0) hash ^= UnSkillId.GetHashCode();
      if (UnSkillNotiIdx != 0) hash ^= UnSkillNotiIdx.GetHashCode();
      if (NStartPosX != 0) hash ^= NStartPosX.GetHashCode();
      if (NStartPosY != 0) hash ^= NStartPosY.GetHashCode();
      if (NEndPosX != 0) hash ^= NEndPosX.GetHashCode();
      if (NEndPosY != 0) hash ^= NEndPosY.GetHashCode();
      if (FTotalTime != 0F) hash ^= FTotalTime.GetHashCode();
      if (FRemainTime != 0F) hash ^= FRemainTime.GetHashCode();
      if (FSpeed != 0F) hash ^= FSpeed.GetHashCode();
      hash ^= fDir_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnOwnerRoleType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnOwnerRoleType);
      }
      if (UllOwnerRoleId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UllOwnerRoleId);
      }
      if (UnMapId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnMapId);
      }
      if (UllProjectTileId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UllProjectTileId);
      }
      if (UnType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UnType);
      }
      if (UnSkillId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UnSkillId);
      }
      if (UnSkillNotiIdx != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UnSkillNotiIdx);
      }
      if (NStartPosX != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(NStartPosX);
      }
      if (NStartPosY != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(NStartPosY);
      }
      if (NEndPosX != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NEndPosX);
      }
      if (NEndPosY != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(NEndPosY);
      }
      if (FTotalTime != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(FTotalTime);
      }
      if (FRemainTime != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(FRemainTime);
      }
      if (FSpeed != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(FSpeed);
      }
      fDir_.WriteTo(output, _repeated_fDir_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnOwnerRoleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnOwnerRoleType);
      }
      if (UllOwnerRoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllOwnerRoleId);
      }
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      if (UllProjectTileId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllProjectTileId);
      }
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      if (UnSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnSkillId);
      }
      if (UnSkillNotiIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnSkillNotiIdx);
      }
      if (NStartPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NStartPosX);
      }
      if (NStartPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NStartPosY);
      }
      if (NEndPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NEndPosX);
      }
      if (NEndPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NEndPosY);
      }
      if (FTotalTime != 0F) {
        size += 1 + 4;
      }
      if (FRemainTime != 0F) {
        size += 1 + 4;
      }
      if (FSpeed != 0F) {
        size += 1 + 4;
      }
      size += fDir_.CalculateSize(_repeated_fDir_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleProjectTileInfoS other) {
      if (other == null) {
        return;
      }
      if (other.UnOwnerRoleType != 0) {
        UnOwnerRoleType = other.UnOwnerRoleType;
      }
      if (other.UllOwnerRoleId != 0L) {
        UllOwnerRoleId = other.UllOwnerRoleId;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
      if (other.UllProjectTileId != 0L) {
        UllProjectTileId = other.UllProjectTileId;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
      if (other.UnSkillId != 0) {
        UnSkillId = other.UnSkillId;
      }
      if (other.UnSkillNotiIdx != 0) {
        UnSkillNotiIdx = other.UnSkillNotiIdx;
      }
      if (other.NStartPosX != 0) {
        NStartPosX = other.NStartPosX;
      }
      if (other.NStartPosY != 0) {
        NStartPosY = other.NStartPosY;
      }
      if (other.NEndPosX != 0) {
        NEndPosX = other.NEndPosX;
      }
      if (other.NEndPosY != 0) {
        NEndPosY = other.NEndPosY;
      }
      if (other.FTotalTime != 0F) {
        FTotalTime = other.FTotalTime;
      }
      if (other.FRemainTime != 0F) {
        FRemainTime = other.FRemainTime;
      }
      if (other.FSpeed != 0F) {
        FSpeed = other.FSpeed;
      }
      fDir_.Add(other.fDir_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnOwnerRoleType = input.ReadInt32();
            break;
          }
          case 16: {
            UllOwnerRoleId = input.ReadInt64();
            break;
          }
          case 24: {
            UnMapId = input.ReadInt32();
            break;
          }
          case 32: {
            UllProjectTileId = input.ReadInt64();
            break;
          }
          case 40: {
            UnType = input.ReadInt32();
            break;
          }
          case 48: {
            UnSkillId = input.ReadInt32();
            break;
          }
          case 56: {
            UnSkillNotiIdx = input.ReadInt32();
            break;
          }
          case 64: {
            NStartPosX = input.ReadInt32();
            break;
          }
          case 72: {
            NStartPosY = input.ReadInt32();
            break;
          }
          case 80: {
            NEndPosX = input.ReadInt32();
            break;
          }
          case 88: {
            NEndPosY = input.ReadInt32();
            break;
          }
          case 101: {
            FTotalTime = input.ReadFloat();
            break;
          }
          case 109: {
            FRemainTime = input.ReadFloat();
            break;
          }
          case 117: {
            FSpeed = input.ReadFloat();
            break;
          }
          case 122:
          case 125: {
            fDir_.AddEntriesFrom(input, _repeated_fDir_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：新增发射体
  /// _MSG_BATTLE_ADD_PROJECTTILE_C
  /// </summary>
  public sealed partial class PMsgBattleAddProjectTileC : pb::IMessage<PMsgBattleAddProjectTileC> {
    private static readonly pb::MessageParser<PMsgBattleAddProjectTileC> _parser = new pb::MessageParser<PMsgBattleAddProjectTileC>(() => new PMsgBattleAddProjectTileC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleAddProjectTileC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleNpcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleAddProjectTileC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleAddProjectTileC(PMsgBattleAddProjectTileC other) : this() {
      unSkillId_ = other.unSkillId_;
      unSkillNotiIdx_ = other.unSkillNotiIdx_;
      unProjectTileType_ = other.unProjectTileType_;
      nStartPosX_ = other.nStartPosX_;
      nStartPosY_ = other.nStartPosY_;
      nEndPosX_ = other.nEndPosX_;
      nEndPosY_ = other.nEndPosY_;
      fTotalTime_ = other.fTotalTime_;
      fSpeed_ = other.fSpeed_;
      fDir_ = other.fDir_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleAddProjectTileC Clone() {
      return new PMsgBattleAddProjectTileC(this);
    }

    /// <summary>Field number for the "unSkillId" field.</summary>
    public const int UnSkillIdFieldNumber = 1;
    private int unSkillId_;
    /// <summary>
    /// 技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnSkillId {
      get { return unSkillId_; }
      set {
        unSkillId_ = value;
      }
    }

    /// <summary>Field number for the "unSkillNotiIdx" field.</summary>
    public const int UnSkillNotiIdxFieldNumber = 2;
    private int unSkillNotiIdx_;
    /// <summary>
    /// 技能分段id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnSkillNotiIdx {
      get { return unSkillNotiIdx_; }
      set {
        unSkillNotiIdx_ = value;
      }
    }

    /// <summary>Field number for the "unProjectTileType" field.</summary>
    public const int UnProjectTileTypeFieldNumber = 3;
    private int unProjectTileType_;
    /// <summary>
    /// 发射体类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnProjectTileType {
      get { return unProjectTileType_; }
      set {
        unProjectTileType_ = value;
      }
    }

    /// <summary>Field number for the "nStartPosX" field.</summary>
    public const int NStartPosXFieldNumber = 4;
    private int nStartPosX_;
    /// <summary>
    /// 起始坐标：X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NStartPosX {
      get { return nStartPosX_; }
      set {
        nStartPosX_ = value;
      }
    }

    /// <summary>Field number for the "nStartPosY" field.</summary>
    public const int NStartPosYFieldNumber = 5;
    private int nStartPosY_;
    /// <summary>
    /// 起始坐标：Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NStartPosY {
      get { return nStartPosY_; }
      set {
        nStartPosY_ = value;
      }
    }

    /// <summary>Field number for the "nEndPosX" field.</summary>
    public const int NEndPosXFieldNumber = 6;
    private int nEndPosX_;
    /// <summary>
    /// 结束坐标：X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NEndPosX {
      get { return nEndPosX_; }
      set {
        nEndPosX_ = value;
      }
    }

    /// <summary>Field number for the "nEndPosY" field.</summary>
    public const int NEndPosYFieldNumber = 7;
    private int nEndPosY_;
    /// <summary>
    /// 结束坐标：Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NEndPosY {
      get { return nEndPosY_; }
      set {
        nEndPosY_ = value;
      }
    }

    /// <summary>Field number for the "fTotalTime" field.</summary>
    public const int FTotalTimeFieldNumber = 8;
    private float fTotalTime_;
    /// <summary>
    /// 时长(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FTotalTime {
      get { return fTotalTime_; }
      set {
        fTotalTime_ = value;
      }
    }

    /// <summary>Field number for the "fSpeed" field.</summary>
    public const int FSpeedFieldNumber = 9;
    private float fSpeed_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FSpeed {
      get { return fSpeed_; }
      set {
        fSpeed_ = value;
      }
    }

    /// <summary>Field number for the "fDir" field.</summary>
    public const int FDirFieldNumber = 10;
    private static readonly pb::FieldCodec<float> _repeated_fDir_codec
        = pb::FieldCodec.ForFloat(82);
    private readonly pbc::RepeatedField<float> fDir_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FDir {
      get { return fDir_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleAddProjectTileC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleAddProjectTileC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnSkillId != other.UnSkillId) return false;
      if (UnSkillNotiIdx != other.UnSkillNotiIdx) return false;
      if (UnProjectTileType != other.UnProjectTileType) return false;
      if (NStartPosX != other.NStartPosX) return false;
      if (NStartPosY != other.NStartPosY) return false;
      if (NEndPosX != other.NEndPosX) return false;
      if (NEndPosY != other.NEndPosY) return false;
      if (FTotalTime != other.FTotalTime) return false;
      if (FSpeed != other.FSpeed) return false;
      if(!fDir_.Equals(other.fDir_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnSkillId != 0) hash ^= UnSkillId.GetHashCode();
      if (UnSkillNotiIdx != 0) hash ^= UnSkillNotiIdx.GetHashCode();
      if (UnProjectTileType != 0) hash ^= UnProjectTileType.GetHashCode();
      if (NStartPosX != 0) hash ^= NStartPosX.GetHashCode();
      if (NStartPosY != 0) hash ^= NStartPosY.GetHashCode();
      if (NEndPosX != 0) hash ^= NEndPosX.GetHashCode();
      if (NEndPosY != 0) hash ^= NEndPosY.GetHashCode();
      if (FTotalTime != 0F) hash ^= FTotalTime.GetHashCode();
      if (FSpeed != 0F) hash ^= FSpeed.GetHashCode();
      hash ^= fDir_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnSkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnSkillId);
      }
      if (UnSkillNotiIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnSkillNotiIdx);
      }
      if (UnProjectTileType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnProjectTileType);
      }
      if (NStartPosX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NStartPosX);
      }
      if (NStartPosY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NStartPosY);
      }
      if (NEndPosX != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NEndPosX);
      }
      if (NEndPosY != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NEndPosY);
      }
      if (FTotalTime != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(FTotalTime);
      }
      if (FSpeed != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(FSpeed);
      }
      fDir_.WriteTo(output, _repeated_fDir_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnSkillId);
      }
      if (UnSkillNotiIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnSkillNotiIdx);
      }
      if (UnProjectTileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnProjectTileType);
      }
      if (NStartPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NStartPosX);
      }
      if (NStartPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NStartPosY);
      }
      if (NEndPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NEndPosX);
      }
      if (NEndPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NEndPosY);
      }
      if (FTotalTime != 0F) {
        size += 1 + 4;
      }
      if (FSpeed != 0F) {
        size += 1 + 4;
      }
      size += fDir_.CalculateSize(_repeated_fDir_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleAddProjectTileC other) {
      if (other == null) {
        return;
      }
      if (other.UnSkillId != 0) {
        UnSkillId = other.UnSkillId;
      }
      if (other.UnSkillNotiIdx != 0) {
        UnSkillNotiIdx = other.UnSkillNotiIdx;
      }
      if (other.UnProjectTileType != 0) {
        UnProjectTileType = other.UnProjectTileType;
      }
      if (other.NStartPosX != 0) {
        NStartPosX = other.NStartPosX;
      }
      if (other.NStartPosY != 0) {
        NStartPosY = other.NStartPosY;
      }
      if (other.NEndPosX != 0) {
        NEndPosX = other.NEndPosX;
      }
      if (other.NEndPosY != 0) {
        NEndPosY = other.NEndPosY;
      }
      if (other.FTotalTime != 0F) {
        FTotalTime = other.FTotalTime;
      }
      if (other.FSpeed != 0F) {
        FSpeed = other.FSpeed;
      }
      fDir_.Add(other.fDir_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnSkillId = input.ReadInt32();
            break;
          }
          case 16: {
            UnSkillNotiIdx = input.ReadInt32();
            break;
          }
          case 24: {
            UnProjectTileType = input.ReadInt32();
            break;
          }
          case 32: {
            NStartPosX = input.ReadInt32();
            break;
          }
          case 40: {
            NStartPosY = input.ReadInt32();
            break;
          }
          case 48: {
            NEndPosX = input.ReadInt32();
            break;
          }
          case 56: {
            NEndPosY = input.ReadInt32();
            break;
          }
          case 69: {
            FTotalTime = input.ReadFloat();
            break;
          }
          case 77: {
            FSpeed = input.ReadFloat();
            break;
          }
          case 82:
          case 85: {
            fDir_.AddEntriesFrom(input, _repeated_fDir_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：新增发射体回复
  /// _MSG_BATTLE_ADD_PROJECTTILE_S
  /// </summary>
  public sealed partial class PMsgBattleAddProjectTileS : pb::IMessage<PMsgBattleAddProjectTileS> {
    private static readonly pb::MessageParser<PMsgBattleAddProjectTileS> _parser = new pb::MessageParser<PMsgBattleAddProjectTileS>(() => new PMsgBattleAddProjectTileS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleAddProjectTileS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleNpcReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleAddProjectTileS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleAddProjectTileS(PMsgBattleAddProjectTileS other) : this() {
      unSkillId_ = other.unSkillId_;
      unSkillNotiIdx_ = other.unSkillNotiIdx_;
      unProjectTileType_ = other.unProjectTileType_;
      nStartPosX_ = other.nStartPosX_;
      nStartPosY_ = other.nStartPosY_;
      nEndPosX_ = other.nEndPosX_;
      nEndPosY_ = other.nEndPosY_;
      fTotalTime_ = other.fTotalTime_;
      fSpeed_ = other.fSpeed_;
      fDir_ = other.fDir_.Clone();
      ullProjectTileId_ = other.ullProjectTileId_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleAddProjectTileS Clone() {
      return new PMsgBattleAddProjectTileS(this);
    }

    /// <summary>Field number for the "unSkillId" field.</summary>
    public const int UnSkillIdFieldNumber = 1;
    private int unSkillId_;
    /// <summary>
    /// 技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnSkillId {
      get { return unSkillId_; }
      set {
        unSkillId_ = value;
      }
    }

    /// <summary>Field number for the "unSkillNotiIdx" field.</summary>
    public const int UnSkillNotiIdxFieldNumber = 2;
    private int unSkillNotiIdx_;
    /// <summary>
    /// 技能分段id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnSkillNotiIdx {
      get { return unSkillNotiIdx_; }
      set {
        unSkillNotiIdx_ = value;
      }
    }

    /// <summary>Field number for the "unProjectTileType" field.</summary>
    public const int UnProjectTileTypeFieldNumber = 3;
    private int unProjectTileType_;
    /// <summary>
    /// 发射体类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnProjectTileType {
      get { return unProjectTileType_; }
      set {
        unProjectTileType_ = value;
      }
    }

    /// <summary>Field number for the "nStartPosX" field.</summary>
    public const int NStartPosXFieldNumber = 4;
    private int nStartPosX_;
    /// <summary>
    /// 起始坐标：X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NStartPosX {
      get { return nStartPosX_; }
      set {
        nStartPosX_ = value;
      }
    }

    /// <summary>Field number for the "nStartPosY" field.</summary>
    public const int NStartPosYFieldNumber = 5;
    private int nStartPosY_;
    /// <summary>
    /// 起始坐标：Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NStartPosY {
      get { return nStartPosY_; }
      set {
        nStartPosY_ = value;
      }
    }

    /// <summary>Field number for the "nEndPosX" field.</summary>
    public const int NEndPosXFieldNumber = 6;
    private int nEndPosX_;
    /// <summary>
    /// 结束坐标：X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NEndPosX {
      get { return nEndPosX_; }
      set {
        nEndPosX_ = value;
      }
    }

    /// <summary>Field number for the "nEndPosY" field.</summary>
    public const int NEndPosYFieldNumber = 7;
    private int nEndPosY_;
    /// <summary>
    /// 结束坐标：Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NEndPosY {
      get { return nEndPosY_; }
      set {
        nEndPosY_ = value;
      }
    }

    /// <summary>Field number for the "fTotalTime" field.</summary>
    public const int FTotalTimeFieldNumber = 8;
    private float fTotalTime_;
    /// <summary>
    /// 时长(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FTotalTime {
      get { return fTotalTime_; }
      set {
        fTotalTime_ = value;
      }
    }

    /// <summary>Field number for the "fSpeed" field.</summary>
    public const int FSpeedFieldNumber = 9;
    private float fSpeed_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FSpeed {
      get { return fSpeed_; }
      set {
        fSpeed_ = value;
      }
    }

    /// <summary>Field number for the "fDir" field.</summary>
    public const int FDirFieldNumber = 10;
    private static readonly pb::FieldCodec<float> _repeated_fDir_codec
        = pb::FieldCodec.ForFloat(82);
    private readonly pbc::RepeatedField<float> fDir_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FDir {
      get { return fDir_; }
    }

    /// <summary>Field number for the "ullProjectTileId" field.</summary>
    public const int UllProjectTileIdFieldNumber = 11;
    private long ullProjectTileId_;
    /// <summary>
    /// 发射体id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllProjectTileId {
      get { return ullProjectTileId_; }
      set {
        ullProjectTileId_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleAddProjectTileS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleAddProjectTileS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnSkillId != other.UnSkillId) return false;
      if (UnSkillNotiIdx != other.UnSkillNotiIdx) return false;
      if (UnProjectTileType != other.UnProjectTileType) return false;
      if (NStartPosX != other.NStartPosX) return false;
      if (NStartPosY != other.NStartPosY) return false;
      if (NEndPosX != other.NEndPosX) return false;
      if (NEndPosY != other.NEndPosY) return false;
      if (FTotalTime != other.FTotalTime) return false;
      if (FSpeed != other.FSpeed) return false;
      if(!fDir_.Equals(other.fDir_)) return false;
      if (UllProjectTileId != other.UllProjectTileId) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnSkillId != 0) hash ^= UnSkillId.GetHashCode();
      if (UnSkillNotiIdx != 0) hash ^= UnSkillNotiIdx.GetHashCode();
      if (UnProjectTileType != 0) hash ^= UnProjectTileType.GetHashCode();
      if (NStartPosX != 0) hash ^= NStartPosX.GetHashCode();
      if (NStartPosY != 0) hash ^= NStartPosY.GetHashCode();
      if (NEndPosX != 0) hash ^= NEndPosX.GetHashCode();
      if (NEndPosY != 0) hash ^= NEndPosY.GetHashCode();
      if (FTotalTime != 0F) hash ^= FTotalTime.GetHashCode();
      if (FSpeed != 0F) hash ^= FSpeed.GetHashCode();
      hash ^= fDir_.GetHashCode();
      if (UllProjectTileId != 0L) hash ^= UllProjectTileId.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnSkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnSkillId);
      }
      if (UnSkillNotiIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnSkillNotiIdx);
      }
      if (UnProjectTileType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnProjectTileType);
      }
      if (NStartPosX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NStartPosX);
      }
      if (NStartPosY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NStartPosY);
      }
      if (NEndPosX != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NEndPosX);
      }
      if (NEndPosY != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NEndPosY);
      }
      if (FTotalTime != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(FTotalTime);
      }
      if (FSpeed != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(FSpeed);
      }
      fDir_.WriteTo(output, _repeated_fDir_codec);
      if (UllProjectTileId != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(UllProjectTileId);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnSkillId);
      }
      if (UnSkillNotiIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnSkillNotiIdx);
      }
      if (UnProjectTileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnProjectTileType);
      }
      if (NStartPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NStartPosX);
      }
      if (NStartPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NStartPosY);
      }
      if (NEndPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NEndPosX);
      }
      if (NEndPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NEndPosY);
      }
      if (FTotalTime != 0F) {
        size += 1 + 4;
      }
      if (FSpeed != 0F) {
        size += 1 + 4;
      }
      size += fDir_.CalculateSize(_repeated_fDir_codec);
      if (UllProjectTileId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllProjectTileId);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleAddProjectTileS other) {
      if (other == null) {
        return;
      }
      if (other.UnSkillId != 0) {
        UnSkillId = other.UnSkillId;
      }
      if (other.UnSkillNotiIdx != 0) {
        UnSkillNotiIdx = other.UnSkillNotiIdx;
      }
      if (other.UnProjectTileType != 0) {
        UnProjectTileType = other.UnProjectTileType;
      }
      if (other.NStartPosX != 0) {
        NStartPosX = other.NStartPosX;
      }
      if (other.NStartPosY != 0) {
        NStartPosY = other.NStartPosY;
      }
      if (other.NEndPosX != 0) {
        NEndPosX = other.NEndPosX;
      }
      if (other.NEndPosY != 0) {
        NEndPosY = other.NEndPosY;
      }
      if (other.FTotalTime != 0F) {
        FTotalTime = other.FTotalTime;
      }
      if (other.FSpeed != 0F) {
        FSpeed = other.FSpeed;
      }
      fDir_.Add(other.fDir_);
      if (other.UllProjectTileId != 0L) {
        UllProjectTileId = other.UllProjectTileId;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnSkillId = input.ReadInt32();
            break;
          }
          case 16: {
            UnSkillNotiIdx = input.ReadInt32();
            break;
          }
          case 24: {
            UnProjectTileType = input.ReadInt32();
            break;
          }
          case 32: {
            NStartPosX = input.ReadInt32();
            break;
          }
          case 40: {
            NStartPosY = input.ReadInt32();
            break;
          }
          case 48: {
            NEndPosX = input.ReadInt32();
            break;
          }
          case 56: {
            NEndPosY = input.ReadInt32();
            break;
          }
          case 69: {
            FTotalTime = input.ReadFloat();
            break;
          }
          case 77: {
            FSpeed = input.ReadFloat();
            break;
          }
          case 82:
          case 85: {
            fDir_.AddEntriesFrom(input, _repeated_fDir_codec);
            break;
          }
          case 88: {
            UllProjectTileId = input.ReadInt64();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：删除发射体
  /// _MSG_BATTLE_DEL_PROJECTTILE_C
  /// </summary>
  public sealed partial class PMsgBattleDelProjectTileC : pb::IMessage<PMsgBattleDelProjectTileC> {
    private static readonly pb::MessageParser<PMsgBattleDelProjectTileC> _parser = new pb::MessageParser<PMsgBattleDelProjectTileC>(() => new PMsgBattleDelProjectTileC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleDelProjectTileC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleNpcReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleDelProjectTileC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleDelProjectTileC(PMsgBattleDelProjectTileC other) : this() {
      ullProjectTileId_ = other.ullProjectTileId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleDelProjectTileC Clone() {
      return new PMsgBattleDelProjectTileC(this);
    }

    /// <summary>Field number for the "ullProjectTileId" field.</summary>
    public const int UllProjectTileIdFieldNumber = 1;
    private long ullProjectTileId_;
    /// <summary>
    /// 发射体id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllProjectTileId {
      get { return ullProjectTileId_; }
      set {
        ullProjectTileId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleDelProjectTileC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleDelProjectTileC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UllProjectTileId != other.UllProjectTileId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UllProjectTileId != 0L) hash ^= UllProjectTileId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UllProjectTileId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UllProjectTileId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UllProjectTileId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllProjectTileId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleDelProjectTileC other) {
      if (other == null) {
        return;
      }
      if (other.UllProjectTileId != 0L) {
        UllProjectTileId = other.UllProjectTileId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UllProjectTileId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：删除发射体回复
  /// _MSG_BATTLE_DEL_PROJECTTILE_S
  /// </summary>
  public sealed partial class PMsgBattleDelProjectTileS : pb::IMessage<PMsgBattleDelProjectTileS> {
    private static readonly pb::MessageParser<PMsgBattleDelProjectTileS> _parser = new pb::MessageParser<PMsgBattleDelProjectTileS>(() => new PMsgBattleDelProjectTileS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgBattleDelProjectTileS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgBattleNpcReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleDelProjectTileS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleDelProjectTileS(PMsgBattleDelProjectTileS other) : this() {
      ullProjectTileId_ = other.ullProjectTileId_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgBattleDelProjectTileS Clone() {
      return new PMsgBattleDelProjectTileS(this);
    }

    /// <summary>Field number for the "ullProjectTileId" field.</summary>
    public const int UllProjectTileIdFieldNumber = 1;
    private long ullProjectTileId_;
    /// <summary>
    /// 发射体id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllProjectTileId {
      get { return ullProjectTileId_; }
      set {
        ullProjectTileId_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgBattleDelProjectTileS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgBattleDelProjectTileS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UllProjectTileId != other.UllProjectTileId) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UllProjectTileId != 0L) hash ^= UllProjectTileId.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UllProjectTileId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UllProjectTileId);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UllProjectTileId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllProjectTileId);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgBattleDelProjectTileS other) {
      if (other == null) {
        return;
      }
      if (other.UllProjectTileId != 0L) {
        UllProjectTileId = other.UllProjectTileId;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UllProjectTileId = input.ReadInt64();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
