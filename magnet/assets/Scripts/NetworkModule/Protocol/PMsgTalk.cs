// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/PMsgTalk.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sw {

  /// <summary>Holder for reflection information generated from protos/PMsgTalk.proto</summary>
  public static partial class PMsgTalkReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/PMsgTalk.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PMsgTalkReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVwcm90b3MvUE1zZ1RhbGsucHJvdG8SAnN3ImcKClBNc2dUYWxrQ1MSEQoJ",
            "dW5DaGFubmVsGAEgASgFEhEKCXVsbERlc3RJRBgCIAEoAxISCgpzekRlc3RO",
            "YW1lGAMgASgJEg0KBXN6TXNnGAQgASgJEhAKCHVuUmVzdWx0GAUgASgFIvMB",
            "Cg1QTXNnVGFsa1JlY3ZTEhEKCXVuQ2hhbm5lbBgBIAEoBRIRCgl1bGxEZXN0",
            "SUQYAiABKAMSEQoJdWxsU291cklEGAMgASgDEhIKCnN6U291ck5hbWUYBCAB",
            "KAkSEgoKdW5EYXRlVGltZRgFIAEoBRISCgp1blJvbGVUeXBlGAYgASgFEg8K",
            "B3VuTGV2ZWwYByABKAUSEAoIdW5WaXBMZXYYCCABKAUSEgoKdW5MYW5ndWFn",
            "ZRgJIAEoBRISCgp1bGxHdWlsZElEGAogASgDEhMKC3N6R3VpbGROYW1lGAsg",
            "ASgJEg0KBXN6TXNnGAwgASgJIikKElBNc2dUYWxrQmxhY2tMaXN0QxITCgt1",
            "blJlc2VydmVkMRgBIAEoBSJTCg1UYWxrQmxhY2tJbmZvEhEKCXVsbFJvbGVJ",
            "RBgBIAEoAxIOCgZzek5hbWUYAiABKAkSDgoGdW5Mb29rGAMgASgFEg8KB3Vu",
            "TGV2ZWwYBCABKAUiPwoSUE1zZ1RhbGtCbGFja0xpc3RTEikKDmNUYWxrQmxh",
            "Y2tJbmZvGAEgAygLMhEuc3cuVGFsa0JsYWNrSW5mbyI5ChJQTXNnVGFsa0Fk",
            "ZEJsYWNrQ1MSEQoJdWxsRGVzdElEGAEgASgDEhAKCHVuUmVzdWx0GAIgASgF",
            "IjkKElBNc2dUYWxrRGVsQmxhY2tDUxIRCgl1bGxEZXN0SUQYASABKAMSEAoI",
            "dW5SZXN1bHQYAiABKAUqvAEKEVRBTEtfQ0hBTk5FTF9UWVBFEhUKEVRBTEtf",
            "Q0hBTk5FTF9OVUxMEAASFgoSVEFMS19DSEFOTkVMX1dPUkxEEAESGAoUVEFM",
            "S19DSEFOTkVMX1BSSVZBVEUQAhIWChJUQUxLX0NIQU5ORUxfR1VJTEQQAxIX",
            "ChNUQUxLX0NIQU5ORUxfU1lTVEVNEAQSFAoQVEFMS19DSEFOTkVMX01BUBAF",
            "EhcKE1RBTEtfQ0hBTk5FTF9GUklFTkQQBmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Sw.TALK_CHANNEL_TYPE), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgTalkCS), global::Sw.PMsgTalkCS.Parser, new[]{ "UnChannel", "UllDestID", "SzDestName", "SzMsg", "UnResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgTalkRecvS), global::Sw.PMsgTalkRecvS.Parser, new[]{ "UnChannel", "UllDestID", "UllSourID", "SzSourName", "UnDateTime", "UnRoleType", "UnLevel", "UnVipLev", "UnLanguage", "UllGuildID", "SzGuildName", "SzMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgTalkBlackListC), global::Sw.PMsgTalkBlackListC.Parser, new[]{ "UnReserved1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.TalkBlackInfo), global::Sw.TalkBlackInfo.Parser, new[]{ "UllRoleID", "SzName", "UnLook", "UnLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgTalkBlackListS), global::Sw.PMsgTalkBlackListS.Parser, new[]{ "CTalkBlackInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgTalkAddBlackCS), global::Sw.PMsgTalkAddBlackCS.Parser, new[]{ "UllDestID", "UnResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgTalkDelBlackCS), global::Sw.PMsgTalkDelBlackCS.Parser, new[]{ "UllDestID", "UnResult" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// 聊天频道定义
  /// </summary>
  public enum TALK_CHANNEL_TYPE {
    /// <summary>
    /// </summary>
    [pbr::OriginalName("TALK_CHANNEL_NULL")] TALK_CHANNEL_NULL = 0,
    /// <summary>
    /// 世界频道
    /// </summary>
    [pbr::OriginalName("TALK_CHANNEL_WORLD")] TALK_CHANNEL_WORLD = 1,
    /// <summary>
    /// 私聊频道
    /// </summary>
    [pbr::OriginalName("TALK_CHANNEL_PRIVATE")] TALK_CHANNEL_PRIVATE = 2,
    /// <summary>
    /// 公会频道
    /// </summary>
    [pbr::OriginalName("TALK_CHANNEL_GUILD")] TALK_CHANNEL_GUILD = 3,
    /// <summary>
    /// 系统频道，发系统公告、全服广播消息，服务端主动发送，客户端不能发
    /// </summary>
    [pbr::OriginalName("TALK_CHANNEL_SYSTEM")] TALK_CHANNEL_SYSTEM = 4,
    /// <summary>
    /// 地图频道（副本）
    /// </summary>
    [pbr::OriginalName("TALK_CHANNEL_MAP")] TALK_CHANNEL_MAP = 5,
    /// <summary>
    /// 好友频道
    /// </summary>
    [pbr::OriginalName("TALK_CHANNEL_FRIEND")] TALK_CHANNEL_FRIEND = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 服务器&lt;->客户端：发送聊天消息
  /// _MSG_TALK_CS
  /// </summary>
  public sealed partial class PMsgTalkCS : pb::IMessage<PMsgTalkCS> {
    private static readonly pb::MessageParser<PMsgTalkCS> _parser = new pb::MessageParser<PMsgTalkCS>(() => new PMsgTalkCS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgTalkCS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTalkReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkCS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkCS(PMsgTalkCS other) : this() {
      unChannel_ = other.unChannel_;
      ullDestID_ = other.ullDestID_;
      szDestName_ = other.szDestName_;
      szMsg_ = other.szMsg_;
      unResult_ = other.unResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkCS Clone() {
      return new PMsgTalkCS(this);
    }

    /// <summary>Field number for the "unChannel" field.</summary>
    public const int UnChannelFieldNumber = 1;
    private int unChannel_;
    /// <summary>
    /// 聊天频道：TALK_CHANNEL_TYPE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnChannel {
      get { return unChannel_; }
      set {
        unChannel_ = value;
      }
    }

    /// <summary>Field number for the "ullDestID" field.</summary>
    public const int UllDestIDFieldNumber = 2;
    private long ullDestID_;
    /// <summary>
    /// 私聊接收方userid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllDestID {
      get { return ullDestID_; }
      set {
        ullDestID_ = value;
      }
    }

    /// <summary>Field number for the "szDestName" field.</summary>
    public const int SzDestNameFieldNumber = 3;
    private string szDestName_ = "";
    /// <summary>
    /// 接收方玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzDestName {
      get { return szDestName_; }
      set {
        szDestName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "szMsg" field.</summary>
    public const int SzMsgFieldNumber = 4;
    private string szMsg_ = "";
    /// <summary>
    /// 聊天内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzMsg {
      get { return szMsg_; }
      set {
        szMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unResult" field.</summary>
    public const int UnResultFieldNumber = 5;
    private int unResult_;
    /// <summary>
    /// 错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnResult {
      get { return unResult_; }
      set {
        unResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgTalkCS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgTalkCS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnChannel != other.UnChannel) return false;
      if (UllDestID != other.UllDestID) return false;
      if (SzDestName != other.SzDestName) return false;
      if (SzMsg != other.SzMsg) return false;
      if (UnResult != other.UnResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnChannel != 0) hash ^= UnChannel.GetHashCode();
      if (UllDestID != 0L) hash ^= UllDestID.GetHashCode();
      if (SzDestName.Length != 0) hash ^= SzDestName.GetHashCode();
      if (SzMsg.Length != 0) hash ^= SzMsg.GetHashCode();
      if (UnResult != 0) hash ^= UnResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnChannel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnChannel);
      }
      if (UllDestID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UllDestID);
      }
      if (SzDestName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SzDestName);
      }
      if (SzMsg.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SzMsg);
      }
      if (UnResult != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UnResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnChannel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnChannel);
      }
      if (UllDestID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllDestID);
      }
      if (SzDestName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzDestName);
      }
      if (SzMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzMsg);
      }
      if (UnResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgTalkCS other) {
      if (other == null) {
        return;
      }
      if (other.UnChannel != 0) {
        UnChannel = other.UnChannel;
      }
      if (other.UllDestID != 0L) {
        UllDestID = other.UllDestID;
      }
      if (other.SzDestName.Length != 0) {
        SzDestName = other.SzDestName;
      }
      if (other.SzMsg.Length != 0) {
        SzMsg = other.SzMsg;
      }
      if (other.UnResult != 0) {
        UnResult = other.UnResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnChannel = input.ReadInt32();
            break;
          }
          case 16: {
            UllDestID = input.ReadInt64();
            break;
          }
          case 26: {
            SzDestName = input.ReadString();
            break;
          }
          case 34: {
            SzMsg = input.ReadString();
            break;
          }
          case 40: {
            UnResult = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：聊天消息广播
  /// _MSG_TALK_RECV_S
  /// </summary>
  public sealed partial class PMsgTalkRecvS : pb::IMessage<PMsgTalkRecvS> {
    private static readonly pb::MessageParser<PMsgTalkRecvS> _parser = new pb::MessageParser<PMsgTalkRecvS>(() => new PMsgTalkRecvS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgTalkRecvS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTalkReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkRecvS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkRecvS(PMsgTalkRecvS other) : this() {
      unChannel_ = other.unChannel_;
      ullDestID_ = other.ullDestID_;
      ullSourID_ = other.ullSourID_;
      szSourName_ = other.szSourName_;
      unDateTime_ = other.unDateTime_;
      unRoleType_ = other.unRoleType_;
      unLevel_ = other.unLevel_;
      unVipLev_ = other.unVipLev_;
      unLanguage_ = other.unLanguage_;
      ullGuildID_ = other.ullGuildID_;
      szGuildName_ = other.szGuildName_;
      szMsg_ = other.szMsg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkRecvS Clone() {
      return new PMsgTalkRecvS(this);
    }

    /// <summary>Field number for the "unChannel" field.</summary>
    public const int UnChannelFieldNumber = 1;
    private int unChannel_;
    /// <summary>
    /// 聊天频道：TALK_CHANNEL_TYPE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnChannel {
      get { return unChannel_; }
      set {
        unChannel_ = value;
      }
    }

    /// <summary>Field number for the "ullDestID" field.</summary>
    public const int UllDestIDFieldNumber = 2;
    private long ullDestID_;
    /// <summary>
    /// 私聊接收方userid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllDestID {
      get { return ullDestID_; }
      set {
        ullDestID_ = value;
      }
    }

    /// <summary>Field number for the "ullSourID" field.</summary>
    public const int UllSourIDFieldNumber = 3;
    private long ullSourID_;
    /// <summary>
    /// 发送方userid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllSourID {
      get { return ullSourID_; }
      set {
        ullSourID_ = value;
      }
    }

    /// <summary>Field number for the "szSourName" field.</summary>
    public const int SzSourNameFieldNumber = 4;
    private string szSourName_ = "";
    /// <summary>
    /// 发送方玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzSourName {
      get { return szSourName_; }
      set {
        szSourName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unDateTime" field.</summary>
    public const int UnDateTimeFieldNumber = 5;
    private int unDateTime_;
    /// <summary>
    /// 时间戳，日期时间：DDHHMMSS(26 14:15:02)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnDateTime {
      get { return unDateTime_; }
      set {
        unDateTime_ = value;
      }
    }

    /// <summary>Field number for the "unRoleType" field.</summary>
    public const int UnRoleTypeFieldNumber = 6;
    private int unRoleType_;
    /// <summary>
    /// 发送方角色类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnRoleType {
      get { return unRoleType_; }
      set {
        unRoleType_ = value;
      }
    }

    /// <summary>Field number for the "unLevel" field.</summary>
    public const int UnLevelFieldNumber = 7;
    private int unLevel_;
    /// <summary>
    /// 发送方等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnLevel {
      get { return unLevel_; }
      set {
        unLevel_ = value;
      }
    }

    /// <summary>Field number for the "unVipLev" field.</summary>
    public const int UnVipLevFieldNumber = 8;
    private int unVipLev_;
    /// <summary>
    /// 发送方vip等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnVipLev {
      get { return unVipLev_; }
      set {
        unVipLev_ = value;
      }
    }

    /// <summary>Field number for the "unLanguage" field.</summary>
    public const int UnLanguageFieldNumber = 9;
    private int unLanguage_;
    /// <summary>
    /// 语种
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnLanguage {
      get { return unLanguage_; }
      set {
        unLanguage_ = value;
      }
    }

    /// <summary>Field number for the "ullGuildID" field.</summary>
    public const int UllGuildIDFieldNumber = 10;
    private long ullGuildID_;
    /// <summary>
    /// 发送方公会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllGuildID {
      get { return ullGuildID_; }
      set {
        ullGuildID_ = value;
      }
    }

    /// <summary>Field number for the "szGuildName" field.</summary>
    public const int SzGuildNameFieldNumber = 11;
    private string szGuildName_ = "";
    /// <summary>
    /// 发送方公会名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzGuildName {
      get { return szGuildName_; }
      set {
        szGuildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "szMsg" field.</summary>
    public const int SzMsgFieldNumber = 12;
    private string szMsg_ = "";
    /// <summary>
    /// 聊天内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzMsg {
      get { return szMsg_; }
      set {
        szMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgTalkRecvS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgTalkRecvS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnChannel != other.UnChannel) return false;
      if (UllDestID != other.UllDestID) return false;
      if (UllSourID != other.UllSourID) return false;
      if (SzSourName != other.SzSourName) return false;
      if (UnDateTime != other.UnDateTime) return false;
      if (UnRoleType != other.UnRoleType) return false;
      if (UnLevel != other.UnLevel) return false;
      if (UnVipLev != other.UnVipLev) return false;
      if (UnLanguage != other.UnLanguage) return false;
      if (UllGuildID != other.UllGuildID) return false;
      if (SzGuildName != other.SzGuildName) return false;
      if (SzMsg != other.SzMsg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnChannel != 0) hash ^= UnChannel.GetHashCode();
      if (UllDestID != 0L) hash ^= UllDestID.GetHashCode();
      if (UllSourID != 0L) hash ^= UllSourID.GetHashCode();
      if (SzSourName.Length != 0) hash ^= SzSourName.GetHashCode();
      if (UnDateTime != 0) hash ^= UnDateTime.GetHashCode();
      if (UnRoleType != 0) hash ^= UnRoleType.GetHashCode();
      if (UnLevel != 0) hash ^= UnLevel.GetHashCode();
      if (UnVipLev != 0) hash ^= UnVipLev.GetHashCode();
      if (UnLanguage != 0) hash ^= UnLanguage.GetHashCode();
      if (UllGuildID != 0L) hash ^= UllGuildID.GetHashCode();
      if (SzGuildName.Length != 0) hash ^= SzGuildName.GetHashCode();
      if (SzMsg.Length != 0) hash ^= SzMsg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnChannel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnChannel);
      }
      if (UllDestID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UllDestID);
      }
      if (UllSourID != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UllSourID);
      }
      if (SzSourName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SzSourName);
      }
      if (UnDateTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UnDateTime);
      }
      if (UnRoleType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UnRoleType);
      }
      if (UnLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UnLevel);
      }
      if (UnVipLev != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UnVipLev);
      }
      if (UnLanguage != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(UnLanguage);
      }
      if (UllGuildID != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(UllGuildID);
      }
      if (SzGuildName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SzGuildName);
      }
      if (SzMsg.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(SzMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnChannel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnChannel);
      }
      if (UllDestID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllDestID);
      }
      if (UllSourID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllSourID);
      }
      if (SzSourName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzSourName);
      }
      if (UnDateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnDateTime);
      }
      if (UnRoleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnRoleType);
      }
      if (UnLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnLevel);
      }
      if (UnVipLev != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnVipLev);
      }
      if (UnLanguage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnLanguage);
      }
      if (UllGuildID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllGuildID);
      }
      if (SzGuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzGuildName);
      }
      if (SzMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzMsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgTalkRecvS other) {
      if (other == null) {
        return;
      }
      if (other.UnChannel != 0) {
        UnChannel = other.UnChannel;
      }
      if (other.UllDestID != 0L) {
        UllDestID = other.UllDestID;
      }
      if (other.UllSourID != 0L) {
        UllSourID = other.UllSourID;
      }
      if (other.SzSourName.Length != 0) {
        SzSourName = other.SzSourName;
      }
      if (other.UnDateTime != 0) {
        UnDateTime = other.UnDateTime;
      }
      if (other.UnRoleType != 0) {
        UnRoleType = other.UnRoleType;
      }
      if (other.UnLevel != 0) {
        UnLevel = other.UnLevel;
      }
      if (other.UnVipLev != 0) {
        UnVipLev = other.UnVipLev;
      }
      if (other.UnLanguage != 0) {
        UnLanguage = other.UnLanguage;
      }
      if (other.UllGuildID != 0L) {
        UllGuildID = other.UllGuildID;
      }
      if (other.SzGuildName.Length != 0) {
        SzGuildName = other.SzGuildName;
      }
      if (other.SzMsg.Length != 0) {
        SzMsg = other.SzMsg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnChannel = input.ReadInt32();
            break;
          }
          case 16: {
            UllDestID = input.ReadInt64();
            break;
          }
          case 24: {
            UllSourID = input.ReadInt64();
            break;
          }
          case 34: {
            SzSourName = input.ReadString();
            break;
          }
          case 40: {
            UnDateTime = input.ReadInt32();
            break;
          }
          case 48: {
            UnRoleType = input.ReadInt32();
            break;
          }
          case 56: {
            UnLevel = input.ReadInt32();
            break;
          }
          case 64: {
            UnVipLev = input.ReadInt32();
            break;
          }
          case 72: {
            UnLanguage = input.ReadInt32();
            break;
          }
          case 80: {
            UllGuildID = input.ReadInt64();
            break;
          }
          case 90: {
            SzGuildName = input.ReadString();
            break;
          }
          case 98: {
            SzMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：查询黑名单列表
  /// _MSG_TALK_BLACK_LIST_C
  /// </summary>
  public sealed partial class PMsgTalkBlackListC : pb::IMessage<PMsgTalkBlackListC> {
    private static readonly pb::MessageParser<PMsgTalkBlackListC> _parser = new pb::MessageParser<PMsgTalkBlackListC>(() => new PMsgTalkBlackListC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgTalkBlackListC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTalkReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkBlackListC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkBlackListC(PMsgTalkBlackListC other) : this() {
      unReserved1_ = other.unReserved1_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkBlackListC Clone() {
      return new PMsgTalkBlackListC(this);
    }

    /// <summary>Field number for the "unReserved1" field.</summary>
    public const int UnReserved1FieldNumber = 1;
    private int unReserved1_;
    /// <summary>
    /// 保留
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnReserved1 {
      get { return unReserved1_; }
      set {
        unReserved1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgTalkBlackListC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgTalkBlackListC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnReserved1 != other.UnReserved1) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnReserved1 != 0) hash ^= UnReserved1.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnReserved1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnReserved1);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnReserved1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnReserved1);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgTalkBlackListC other) {
      if (other == null) {
        return;
      }
      if (other.UnReserved1 != 0) {
        UnReserved1 = other.UnReserved1;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnReserved1 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 黑名单信息
  /// </summary>
  public sealed partial class TalkBlackInfo : pb::IMessage<TalkBlackInfo> {
    private static readonly pb::MessageParser<TalkBlackInfo> _parser = new pb::MessageParser<TalkBlackInfo>(() => new TalkBlackInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TalkBlackInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTalkReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TalkBlackInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TalkBlackInfo(TalkBlackInfo other) : this() {
      ullRoleID_ = other.ullRoleID_;
      szName_ = other.szName_;
      unLook_ = other.unLook_;
      unLevel_ = other.unLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TalkBlackInfo Clone() {
      return new TalkBlackInfo(this);
    }

    /// <summary>Field number for the "ullRoleID" field.</summary>
    public const int UllRoleIDFieldNumber = 1;
    private long ullRoleID_;
    /// <summary>
    /// 对方角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllRoleID {
      get { return ullRoleID_; }
      set {
        ullRoleID_ = value;
      }
    }

    /// <summary>Field number for the "szName" field.</summary>
    public const int SzNameFieldNumber = 2;
    private string szName_ = "";
    /// <summary>
    /// 对方玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzName {
      get { return szName_; }
      set {
        szName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unLook" field.</summary>
    public const int UnLookFieldNumber = 3;
    private int unLook_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnLook {
      get { return unLook_; }
      set {
        unLook_ = value;
      }
    }

    /// <summary>Field number for the "unLevel" field.</summary>
    public const int UnLevelFieldNumber = 4;
    private int unLevel_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnLevel {
      get { return unLevel_; }
      set {
        unLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TalkBlackInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TalkBlackInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UllRoleID != other.UllRoleID) return false;
      if (SzName != other.SzName) return false;
      if (UnLook != other.UnLook) return false;
      if (UnLevel != other.UnLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UllRoleID != 0L) hash ^= UllRoleID.GetHashCode();
      if (SzName.Length != 0) hash ^= SzName.GetHashCode();
      if (UnLook != 0) hash ^= UnLook.GetHashCode();
      if (UnLevel != 0) hash ^= UnLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UllRoleID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UllRoleID);
      }
      if (SzName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SzName);
      }
      if (UnLook != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnLook);
      }
      if (UnLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UllRoleID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllRoleID);
      }
      if (SzName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzName);
      }
      if (UnLook != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnLook);
      }
      if (UnLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TalkBlackInfo other) {
      if (other == null) {
        return;
      }
      if (other.UllRoleID != 0L) {
        UllRoleID = other.UllRoleID;
      }
      if (other.SzName.Length != 0) {
        SzName = other.SzName;
      }
      if (other.UnLook != 0) {
        UnLook = other.UnLook;
      }
      if (other.UnLevel != 0) {
        UnLevel = other.UnLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UllRoleID = input.ReadInt64();
            break;
          }
          case 18: {
            SzName = input.ReadString();
            break;
          }
          case 24: {
            UnLook = input.ReadInt32();
            break;
          }
          case 32: {
            UnLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：查询黑名单列表回复
  /// _MSG_TALK_BLACK_LIST_S
  /// </summary>
  public sealed partial class PMsgTalkBlackListS : pb::IMessage<PMsgTalkBlackListS> {
    private static readonly pb::MessageParser<PMsgTalkBlackListS> _parser = new pb::MessageParser<PMsgTalkBlackListS>(() => new PMsgTalkBlackListS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgTalkBlackListS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTalkReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkBlackListS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkBlackListS(PMsgTalkBlackListS other) : this() {
      cTalkBlackInfo_ = other.cTalkBlackInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkBlackListS Clone() {
      return new PMsgTalkBlackListS(this);
    }

    /// <summary>Field number for the "cTalkBlackInfo" field.</summary>
    public const int CTalkBlackInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sw.TalkBlackInfo> _repeated_cTalkBlackInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Sw.TalkBlackInfo.Parser);
    private readonly pbc::RepeatedField<global::Sw.TalkBlackInfo> cTalkBlackInfo_ = new pbc::RepeatedField<global::Sw.TalkBlackInfo>();
    /// <summary>
    /// 黑名单列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.TalkBlackInfo> CTalkBlackInfo {
      get { return cTalkBlackInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgTalkBlackListS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgTalkBlackListS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cTalkBlackInfo_.Equals(other.cTalkBlackInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cTalkBlackInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cTalkBlackInfo_.WriteTo(output, _repeated_cTalkBlackInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cTalkBlackInfo_.CalculateSize(_repeated_cTalkBlackInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgTalkBlackListS other) {
      if (other == null) {
        return;
      }
      cTalkBlackInfo_.Add(other.cTalkBlackInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cTalkBlackInfo_.AddEntriesFrom(input, _repeated_cTalkBlackInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器&lt;->客户端：新增聊天黑名单
  /// _MSG_TALK_ADD_BLACK_CS
  /// </summary>
  public sealed partial class PMsgTalkAddBlackCS : pb::IMessage<PMsgTalkAddBlackCS> {
    private static readonly pb::MessageParser<PMsgTalkAddBlackCS> _parser = new pb::MessageParser<PMsgTalkAddBlackCS>(() => new PMsgTalkAddBlackCS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgTalkAddBlackCS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTalkReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkAddBlackCS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkAddBlackCS(PMsgTalkAddBlackCS other) : this() {
      ullDestID_ = other.ullDestID_;
      unResult_ = other.unResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkAddBlackCS Clone() {
      return new PMsgTalkAddBlackCS(this);
    }

    /// <summary>Field number for the "ullDestID" field.</summary>
    public const int UllDestIDFieldNumber = 1;
    private long ullDestID_;
    /// <summary>
    /// 对方角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllDestID {
      get { return ullDestID_; }
      set {
        ullDestID_ = value;
      }
    }

    /// <summary>Field number for the "unResult" field.</summary>
    public const int UnResultFieldNumber = 2;
    private int unResult_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnResult {
      get { return unResult_; }
      set {
        unResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgTalkAddBlackCS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgTalkAddBlackCS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UllDestID != other.UllDestID) return false;
      if (UnResult != other.UnResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UllDestID != 0L) hash ^= UllDestID.GetHashCode();
      if (UnResult != 0) hash ^= UnResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UllDestID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UllDestID);
      }
      if (UnResult != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UllDestID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllDestID);
      }
      if (UnResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgTalkAddBlackCS other) {
      if (other == null) {
        return;
      }
      if (other.UllDestID != 0L) {
        UllDestID = other.UllDestID;
      }
      if (other.UnResult != 0) {
        UnResult = other.UnResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UllDestID = input.ReadInt64();
            break;
          }
          case 16: {
            UnResult = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器&lt;->客户端：删除聊天黑名单
  /// _MSG_TALK_DEL_BLACK_CS
  /// </summary>
  public sealed partial class PMsgTalkDelBlackCS : pb::IMessage<PMsgTalkDelBlackCS> {
    private static readonly pb::MessageParser<PMsgTalkDelBlackCS> _parser = new pb::MessageParser<PMsgTalkDelBlackCS>(() => new PMsgTalkDelBlackCS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgTalkDelBlackCS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTalkReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkDelBlackCS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkDelBlackCS(PMsgTalkDelBlackCS other) : this() {
      ullDestID_ = other.ullDestID_;
      unResult_ = other.unResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTalkDelBlackCS Clone() {
      return new PMsgTalkDelBlackCS(this);
    }

    /// <summary>Field number for the "ullDestID" field.</summary>
    public const int UllDestIDFieldNumber = 1;
    private long ullDestID_;
    /// <summary>
    /// 对方角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllDestID {
      get { return ullDestID_; }
      set {
        ullDestID_ = value;
      }
    }

    /// <summary>Field number for the "unResult" field.</summary>
    public const int UnResultFieldNumber = 2;
    private int unResult_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnResult {
      get { return unResult_; }
      set {
        unResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgTalkDelBlackCS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgTalkDelBlackCS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UllDestID != other.UllDestID) return false;
      if (UnResult != other.UnResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UllDestID != 0L) hash ^= UllDestID.GetHashCode();
      if (UnResult != 0) hash ^= UnResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UllDestID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UllDestID);
      }
      if (UnResult != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UllDestID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllDestID);
      }
      if (UnResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgTalkDelBlackCS other) {
      if (other == null) {
        return;
      }
      if (other.UllDestID != 0L) {
        UllDestID = other.UllDestID;
      }
      if (other.UnResult != 0) {
        UnResult = other.UnResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UllDestID = input.ReadInt64();
            break;
          }
          case 16: {
            UnResult = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
