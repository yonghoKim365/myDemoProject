// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/PMsgActivePoints.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sw {

  /// <summary>Holder for reflection information generated from protos/PMsgActivePoints.proto</summary>
  public static partial class PMsgActivePointsReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/PMsgActivePoints.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PMsgActivePointsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1wcm90b3MvUE1zZ0FjdGl2ZVBvaW50cy5wcm90bxICc3ciLwoaUE1zZ0Fj",
            "dGl2ZVBvaW50c1F1ZXJ5SW5mb0MSEQoJblJlc2VydmVkGAEgASgFIn4KGlBN",
            "c2dBY3RpdmVQb2ludHNRdWVyeUluZm9TEhkKEXVuUmV3YXJkRmV0Y2hJbmZv",
            "GAEgASgNEhgKEHVuUmVzZXRMYXN0VGFkYXkYAiABKA0SFgoOdW5BY3RpdmVQ",
            "b2ludHMYAyABKA0SEwoLdW5FcnJvckNvZGUYYyABKA0iLwocUE1zZ0FjdGl2",
            "ZVBvaW50c0ZldGNoUmV3YXJkQxIPCgd1bkxldmVsGAEgASgNIk4KHFBNc2dB",
            "Y3RpdmVQb2ludHNGZXRjaFJld2FyZFMSGQoRdW5SZXdhcmRGZXRjaEluZm8Y",
            "ASABKA0SEwoLdW5FcnJvckNvZGUYYyABKA0iOQokUE1zZ0FjdGl2ZVBvaW50",
            "c1RvdGFsQ291bnRRdWVyeUluZm9DEhEKCW5SZXNlcnZlZBgBIAEoBSLcAgok",
            "UE1zZ0FjdGl2ZVBvaW50c1RvdGFsQ291bnRRdWVyeUluZm9TEhcKD3VuQ29t",
            "cGxldGVTdGFnZRgBIAEoDRIbChN1bkNvbXBsZXRlQ29pblN0YWdlGAIgASgN",
            "EhoKEnVuQ29tcGxldGVFeHBTdGFnZRgDIAEoDRIXCg91bkNvbXBsZXRlVG93",
            "ZXIYBCABKA0SEwoLdW5TaW5nbGVQdnAYBSABKA0SGQoRdW5Db21wbGV0ZVRl",
            "YW1QdmUYBiABKA0SHAoUdW5Db21wbGV0ZUZpdmVGbG93ZXIYByABKA0SHgoW",
            "dW5Db21wbGV0ZVRocmVlVGFsZW50MRgIIAEoDRIeChZ1bkNvbXBsZXRlVGhy",
            "ZWVUYWxlbnQyGAkgASgNEh4KFnVuQ29tcGxldGVUaHJlZVRhbGVudDMYCiAB",
            "KA0SGwoTdW5Db21wbGV0ZU11bHR5Qm9zcxgLIAEoDWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgActivePointsQueryInfoC), global::Sw.PMsgActivePointsQueryInfoC.Parser, new[]{ "NReserved" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgActivePointsQueryInfoS), global::Sw.PMsgActivePointsQueryInfoS.Parser, new[]{ "UnRewardFetchInfo", "UnResetLastTaday", "UnActivePoints", "UnErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgActivePointsFetchRewardC), global::Sw.PMsgActivePointsFetchRewardC.Parser, new[]{ "UnLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgActivePointsFetchRewardS), global::Sw.PMsgActivePointsFetchRewardS.Parser, new[]{ "UnRewardFetchInfo", "UnErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgActivePointsTotalCountQueryInfoC), global::Sw.PMsgActivePointsTotalCountQueryInfoC.Parser, new[]{ "NReserved" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgActivePointsTotalCountQueryInfoS), global::Sw.PMsgActivePointsTotalCountQueryInfoS.Parser, new[]{ "UnCompleteStage", "UnCompleteCoinStage", "UnCompleteExpStage", "UnCompleteTower", "UnSinglePvp", "UnCompleteTeamPve", "UnCompleteFiveFlower", "UnCompleteThreeTalent1", "UnCompleteThreeTalent2", "UnCompleteThreeTalent3", "UnCompleteMultyBoss" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 客户端：查询活跃度信息请求
  /// _MSG_ACTIVE_POINTS_QUERY_INFO_C
  /// </summary>
  public sealed partial class PMsgActivePointsQueryInfoC : pb::IMessage<PMsgActivePointsQueryInfoC> {
    private static readonly pb::MessageParser<PMsgActivePointsQueryInfoC> _parser = new pb::MessageParser<PMsgActivePointsQueryInfoC>(() => new PMsgActivePointsQueryInfoC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgActivePointsQueryInfoC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgActivePointsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsQueryInfoC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsQueryInfoC(PMsgActivePointsQueryInfoC other) : this() {
      nReserved_ = other.nReserved_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsQueryInfoC Clone() {
      return new PMsgActivePointsQueryInfoC(this);
    }

    /// <summary>Field number for the "nReserved" field.</summary>
    public const int NReservedFieldNumber = 1;
    private int nReserved_;
    /// <summary>
    /// 保留字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NReserved {
      get { return nReserved_; }
      set {
        nReserved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgActivePointsQueryInfoC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgActivePointsQueryInfoC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NReserved != other.NReserved) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NReserved != 0) hash ^= NReserved.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NReserved != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NReserved);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NReserved != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NReserved);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgActivePointsQueryInfoC other) {
      if (other == null) {
        return;
      }
      if (other.NReserved != 0) {
        NReserved = other.NReserved;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NReserved = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端：查询活跃度信息请求回复
  /// _MSG_ACTIVE_POINTS_QUERY_INFO_S
  /// </summary>
  public sealed partial class PMsgActivePointsQueryInfoS : pb::IMessage<PMsgActivePointsQueryInfoS> {
    private static readonly pb::MessageParser<PMsgActivePointsQueryInfoS> _parser = new pb::MessageParser<PMsgActivePointsQueryInfoS>(() => new PMsgActivePointsQueryInfoS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgActivePointsQueryInfoS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgActivePointsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsQueryInfoS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsQueryInfoS(PMsgActivePointsQueryInfoS other) : this() {
      unRewardFetchInfo_ = other.unRewardFetchInfo_;
      unResetLastTaday_ = other.unResetLastTaday_;
      unActivePoints_ = other.unActivePoints_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsQueryInfoS Clone() {
      return new PMsgActivePointsQueryInfoS(this);
    }

    /// <summary>Field number for the "unRewardFetchInfo" field.</summary>
    public const int UnRewardFetchInfoFieldNumber = 1;
    private uint unRewardFetchInfo_;
    /// <summary>
    /// 领取奖励情况,二进制位表示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnRewardFetchInfo {
      get { return unRewardFetchInfo_; }
      set {
        unRewardFetchInfo_ = value;
      }
    }

    /// <summary>Field number for the "unResetLastTaday" field.</summary>
    public const int UnResetLastTadayFieldNumber = 2;
    private uint unResetLastTaday_;
    /// <summary>
    /// 活跃度重置时间YYMMDD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnResetLastTaday {
      get { return unResetLastTaday_; }
      set {
        unResetLastTaday_ = value;
      }
    }

    /// <summary>Field number for the "unActivePoints" field.</summary>
    public const int UnActivePointsFieldNumber = 3;
    private uint unActivePoints_;
    /// <summary>
    /// 活跃度累积值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnActivePoints {
      get { return unActivePoints_; }
      set {
        unActivePoints_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private uint unErrorCode_;
    /// <summary>
    /// 返回错误码 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgActivePointsQueryInfoS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgActivePointsQueryInfoS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnRewardFetchInfo != other.UnRewardFetchInfo) return false;
      if (UnResetLastTaday != other.UnResetLastTaday) return false;
      if (UnActivePoints != other.UnActivePoints) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnRewardFetchInfo != 0) hash ^= UnRewardFetchInfo.GetHashCode();
      if (UnResetLastTaday != 0) hash ^= UnResetLastTaday.GetHashCode();
      if (UnActivePoints != 0) hash ^= UnActivePoints.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnRewardFetchInfo != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnRewardFetchInfo);
      }
      if (UnResetLastTaday != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnResetLastTaday);
      }
      if (UnActivePoints != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UnActivePoints);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteUInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnRewardFetchInfo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnRewardFetchInfo);
      }
      if (UnResetLastTaday != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnResetLastTaday);
      }
      if (UnActivePoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnActivePoints);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgActivePointsQueryInfoS other) {
      if (other == null) {
        return;
      }
      if (other.UnRewardFetchInfo != 0) {
        UnRewardFetchInfo = other.UnRewardFetchInfo;
      }
      if (other.UnResetLastTaday != 0) {
        UnResetLastTaday = other.UnResetLastTaday;
      }
      if (other.UnActivePoints != 0) {
        UnActivePoints = other.UnActivePoints;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnRewardFetchInfo = input.ReadUInt32();
            break;
          }
          case 16: {
            UnResetLastTaday = input.ReadUInt32();
            break;
          }
          case 24: {
            UnActivePoints = input.ReadUInt32();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：领取某阶段活跃度奖励请求
  /// _MSG_ACTIVE_POINTS_FETCHREWARD_C
  /// </summary>
  public sealed partial class PMsgActivePointsFetchRewardC : pb::IMessage<PMsgActivePointsFetchRewardC> {
    private static readonly pb::MessageParser<PMsgActivePointsFetchRewardC> _parser = new pb::MessageParser<PMsgActivePointsFetchRewardC>(() => new PMsgActivePointsFetchRewardC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgActivePointsFetchRewardC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgActivePointsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsFetchRewardC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsFetchRewardC(PMsgActivePointsFetchRewardC other) : this() {
      unLevel_ = other.unLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsFetchRewardC Clone() {
      return new PMsgActivePointsFetchRewardC(this);
    }

    /// <summary>Field number for the "unLevel" field.</summary>
    public const int UnLevelFieldNumber = 1;
    private uint unLevel_;
    /// <summary>
    /// 领取第几阶段活跃度奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnLevel {
      get { return unLevel_; }
      set {
        unLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgActivePointsFetchRewardC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgActivePointsFetchRewardC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnLevel != other.UnLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnLevel != 0) hash ^= UnLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgActivePointsFetchRewardC other) {
      if (other == null) {
        return;
      }
      if (other.UnLevel != 0) {
        UnLevel = other.UnLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端：领取某阶段活跃度奖励请求回复
  /// _MSG_ACTIVE_POINTS_FETCHREWARD_S
  /// </summary>
  public sealed partial class PMsgActivePointsFetchRewardS : pb::IMessage<PMsgActivePointsFetchRewardS> {
    private static readonly pb::MessageParser<PMsgActivePointsFetchRewardS> _parser = new pb::MessageParser<PMsgActivePointsFetchRewardS>(() => new PMsgActivePointsFetchRewardS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgActivePointsFetchRewardS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgActivePointsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsFetchRewardS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsFetchRewardS(PMsgActivePointsFetchRewardS other) : this() {
      unRewardFetchInfo_ = other.unRewardFetchInfo_;
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsFetchRewardS Clone() {
      return new PMsgActivePointsFetchRewardS(this);
    }

    /// <summary>Field number for the "unRewardFetchInfo" field.</summary>
    public const int UnRewardFetchInfoFieldNumber = 1;
    private uint unRewardFetchInfo_;
    /// <summary>
    /// 领取奖励情况,二进制位表示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnRewardFetchInfo {
      get { return unRewardFetchInfo_; }
      set {
        unRewardFetchInfo_ = value;
      }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private uint unErrorCode_;
    /// <summary>
    /// 返回错误码 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgActivePointsFetchRewardS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgActivePointsFetchRewardS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnRewardFetchInfo != other.UnRewardFetchInfo) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnRewardFetchInfo != 0) hash ^= UnRewardFetchInfo.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnRewardFetchInfo != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnRewardFetchInfo);
      }
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteUInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnRewardFetchInfo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnRewardFetchInfo);
      }
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgActivePointsFetchRewardS other) {
      if (other == null) {
        return;
      }
      if (other.UnRewardFetchInfo != 0) {
        UnRewardFetchInfo = other.UnRewardFetchInfo;
      }
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnRewardFetchInfo = input.ReadUInt32();
            break;
          }
          case 792: {
            UnErrorCode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：查询活跃度累积次数信息请求
  /// _MSG_ACTIVE_POINTS_TOTALCOUNT_QUERY_INFO_C
  /// </summary>
  public sealed partial class PMsgActivePointsTotalCountQueryInfoC : pb::IMessage<PMsgActivePointsTotalCountQueryInfoC> {
    private static readonly pb::MessageParser<PMsgActivePointsTotalCountQueryInfoC> _parser = new pb::MessageParser<PMsgActivePointsTotalCountQueryInfoC>(() => new PMsgActivePointsTotalCountQueryInfoC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgActivePointsTotalCountQueryInfoC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgActivePointsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsTotalCountQueryInfoC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsTotalCountQueryInfoC(PMsgActivePointsTotalCountQueryInfoC other) : this() {
      nReserved_ = other.nReserved_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsTotalCountQueryInfoC Clone() {
      return new PMsgActivePointsTotalCountQueryInfoC(this);
    }

    /// <summary>Field number for the "nReserved" field.</summary>
    public const int NReservedFieldNumber = 1;
    private int nReserved_;
    /// <summary>
    /// 保留字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NReserved {
      get { return nReserved_; }
      set {
        nReserved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgActivePointsTotalCountQueryInfoC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgActivePointsTotalCountQueryInfoC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NReserved != other.NReserved) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NReserved != 0) hash ^= NReserved.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NReserved != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NReserved);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NReserved != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NReserved);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgActivePointsTotalCountQueryInfoC other) {
      if (other == null) {
        return;
      }
      if (other.NReserved != 0) {
        NReserved = other.NReserved;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NReserved = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端：查询活跃度累积次数信息请求回复
  /// _MSG_ACTIVE_POINTS_TOTALCOUNT_QUERY_INFO_S
  /// </summary>
  public sealed partial class PMsgActivePointsTotalCountQueryInfoS : pb::IMessage<PMsgActivePointsTotalCountQueryInfoS> {
    private static readonly pb::MessageParser<PMsgActivePointsTotalCountQueryInfoS> _parser = new pb::MessageParser<PMsgActivePointsTotalCountQueryInfoS>(() => new PMsgActivePointsTotalCountQueryInfoS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgActivePointsTotalCountQueryInfoS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgActivePointsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsTotalCountQueryInfoS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsTotalCountQueryInfoS(PMsgActivePointsTotalCountQueryInfoS other) : this() {
      unCompleteStage_ = other.unCompleteStage_;
      unCompleteCoinStage_ = other.unCompleteCoinStage_;
      unCompleteExpStage_ = other.unCompleteExpStage_;
      unCompleteTower_ = other.unCompleteTower_;
      unSinglePvp_ = other.unSinglePvp_;
      unCompleteTeamPve_ = other.unCompleteTeamPve_;
      unCompleteFiveFlower_ = other.unCompleteFiveFlower_;
      unCompleteThreeTalent1_ = other.unCompleteThreeTalent1_;
      unCompleteThreeTalent2_ = other.unCompleteThreeTalent2_;
      unCompleteThreeTalent3_ = other.unCompleteThreeTalent3_;
      unCompleteMultyBoss_ = other.unCompleteMultyBoss_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgActivePointsTotalCountQueryInfoS Clone() {
      return new PMsgActivePointsTotalCountQueryInfoS(this);
    }

    /// <summary>Field number for the "unCompleteStage" field.</summary>
    public const int UnCompleteStageFieldNumber = 1;
    private uint unCompleteStage_;
    /// <summary>
    /// 完成剧情副本,已累积次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnCompleteStage {
      get { return unCompleteStage_; }
      set {
        unCompleteStage_ = value;
      }
    }

    /// <summary>Field number for the "unCompleteCoinStage" field.</summary>
    public const int UnCompleteCoinStageFieldNumber = 2;
    private uint unCompleteCoinStage_;
    /// <summary>
    /// 完成铜币副本(富贵堂),已累积次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnCompleteCoinStage {
      get { return unCompleteCoinStage_; }
      set {
        unCompleteCoinStage_ = value;
      }
    }

    /// <summary>Field number for the "unCompleteExpStage" field.</summary>
    public const int UnCompleteExpStageFieldNumber = 3;
    private uint unCompleteExpStage_;
    /// <summary>
    /// 完成经验值副本(武道阁),已累积次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnCompleteExpStage {
      get { return unCompleteExpStage_; }
      set {
        unCompleteExpStage_ = value;
      }
    }

    /// <summary>Field number for the "unCompleteTower" field.</summary>
    public const int UnCompleteTowerFieldNumber = 4;
    private uint unCompleteTower_;
    /// <summary>
    /// 完成紫禁之巅,已累积次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnCompleteTower {
      get { return unCompleteTower_; }
      set {
        unCompleteTower_ = value;
      }
    }

    /// <summary>Field number for the "unSinglePvp" field.</summary>
    public const int UnSinglePvpFieldNumber = 5;
    private uint unSinglePvp_;
    /// <summary>
    /// 进入1:1踢馆(以武会友),已累积次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnSinglePvp {
      get { return unSinglePvp_; }
      set {
        unSinglePvp_ = value;
      }
    }

    /// <summary>Field number for the "unCompleteTeamPve" field.</summary>
    public const int UnCompleteTeamPveFieldNumber = 6;
    private uint unCompleteTeamPve_;
    /// <summary>
    /// 完成组队PVE(完成荡寇剿匪),已累积次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnCompleteTeamPve {
      get { return unCompleteTeamPve_; }
      set {
        unCompleteTeamPve_ = value;
      }
    }

    /// <summary>Field number for the "unCompleteFiveFlower" field.</summary>
    public const int UnCompleteFiveFlowerFieldNumber = 7;
    private uint unCompleteFiveFlower_;
    /// <summary>
    /// 完成五花试炼,已累积次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnCompleteFiveFlower {
      get { return unCompleteFiveFlower_; }
      set {
        unCompleteFiveFlower_ = value;
      }
    }

    /// <summary>Field number for the "unCompleteThreeTalent1" field.</summary>
    public const int UnCompleteThreeTalent1FieldNumber = 8;
    private uint unCompleteThreeTalent1_;
    /// <summary>
    /// 完成三才试炼1(武德殿1次),已累积次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnCompleteThreeTalent1 {
      get { return unCompleteThreeTalent1_; }
      set {
        unCompleteThreeTalent1_ = value;
      }
    }

    /// <summary>Field number for the "unCompleteThreeTalent2" field.</summary>
    public const int UnCompleteThreeTalent2FieldNumber = 9;
    private uint unCompleteThreeTalent2_;
    /// <summary>
    /// 完成三才试炼2(文才殿1次),已累积次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnCompleteThreeTalent2 {
      get { return unCompleteThreeTalent2_; }
      set {
        unCompleteThreeTalent2_ = value;
      }
    }

    /// <summary>Field number for the "unCompleteThreeTalent3" field.</summary>
    public const int UnCompleteThreeTalent3FieldNumber = 10;
    private uint unCompleteThreeTalent3_;
    /// <summary>
    /// 完成三才试炼3(医圣殿1次),已累积次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnCompleteThreeTalent3 {
      get { return unCompleteThreeTalent3_; }
      set {
        unCompleteThreeTalent3_ = value;
      }
    }

    /// <summary>Field number for the "unCompleteMultyBoss" field.</summary>
    public const int UnCompleteMultyBossFieldNumber = 11;
    private uint unCompleteMultyBoss_;
    /// <summary>
    /// 完成多人BOSS对战(完成龙潭虎穴),已累积次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnCompleteMultyBoss {
      get { return unCompleteMultyBoss_; }
      set {
        unCompleteMultyBoss_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgActivePointsTotalCountQueryInfoS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgActivePointsTotalCountQueryInfoS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnCompleteStage != other.UnCompleteStage) return false;
      if (UnCompleteCoinStage != other.UnCompleteCoinStage) return false;
      if (UnCompleteExpStage != other.UnCompleteExpStage) return false;
      if (UnCompleteTower != other.UnCompleteTower) return false;
      if (UnSinglePvp != other.UnSinglePvp) return false;
      if (UnCompleteTeamPve != other.UnCompleteTeamPve) return false;
      if (UnCompleteFiveFlower != other.UnCompleteFiveFlower) return false;
      if (UnCompleteThreeTalent1 != other.UnCompleteThreeTalent1) return false;
      if (UnCompleteThreeTalent2 != other.UnCompleteThreeTalent2) return false;
      if (UnCompleteThreeTalent3 != other.UnCompleteThreeTalent3) return false;
      if (UnCompleteMultyBoss != other.UnCompleteMultyBoss) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnCompleteStage != 0) hash ^= UnCompleteStage.GetHashCode();
      if (UnCompleteCoinStage != 0) hash ^= UnCompleteCoinStage.GetHashCode();
      if (UnCompleteExpStage != 0) hash ^= UnCompleteExpStage.GetHashCode();
      if (UnCompleteTower != 0) hash ^= UnCompleteTower.GetHashCode();
      if (UnSinglePvp != 0) hash ^= UnSinglePvp.GetHashCode();
      if (UnCompleteTeamPve != 0) hash ^= UnCompleteTeamPve.GetHashCode();
      if (UnCompleteFiveFlower != 0) hash ^= UnCompleteFiveFlower.GetHashCode();
      if (UnCompleteThreeTalent1 != 0) hash ^= UnCompleteThreeTalent1.GetHashCode();
      if (UnCompleteThreeTalent2 != 0) hash ^= UnCompleteThreeTalent2.GetHashCode();
      if (UnCompleteThreeTalent3 != 0) hash ^= UnCompleteThreeTalent3.GetHashCode();
      if (UnCompleteMultyBoss != 0) hash ^= UnCompleteMultyBoss.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnCompleteStage != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnCompleteStage);
      }
      if (UnCompleteCoinStage != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnCompleteCoinStage);
      }
      if (UnCompleteExpStage != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UnCompleteExpStage);
      }
      if (UnCompleteTower != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UnCompleteTower);
      }
      if (UnSinglePvp != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(UnSinglePvp);
      }
      if (UnCompleteTeamPve != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(UnCompleteTeamPve);
      }
      if (UnCompleteFiveFlower != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(UnCompleteFiveFlower);
      }
      if (UnCompleteThreeTalent1 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(UnCompleteThreeTalent1);
      }
      if (UnCompleteThreeTalent2 != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(UnCompleteThreeTalent2);
      }
      if (UnCompleteThreeTalent3 != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(UnCompleteThreeTalent3);
      }
      if (UnCompleteMultyBoss != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(UnCompleteMultyBoss);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnCompleteStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnCompleteStage);
      }
      if (UnCompleteCoinStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnCompleteCoinStage);
      }
      if (UnCompleteExpStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnCompleteExpStage);
      }
      if (UnCompleteTower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnCompleteTower);
      }
      if (UnSinglePvp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnSinglePvp);
      }
      if (UnCompleteTeamPve != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnCompleteTeamPve);
      }
      if (UnCompleteFiveFlower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnCompleteFiveFlower);
      }
      if (UnCompleteThreeTalent1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnCompleteThreeTalent1);
      }
      if (UnCompleteThreeTalent2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnCompleteThreeTalent2);
      }
      if (UnCompleteThreeTalent3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnCompleteThreeTalent3);
      }
      if (UnCompleteMultyBoss != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnCompleteMultyBoss);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgActivePointsTotalCountQueryInfoS other) {
      if (other == null) {
        return;
      }
      if (other.UnCompleteStage != 0) {
        UnCompleteStage = other.UnCompleteStage;
      }
      if (other.UnCompleteCoinStage != 0) {
        UnCompleteCoinStage = other.UnCompleteCoinStage;
      }
      if (other.UnCompleteExpStage != 0) {
        UnCompleteExpStage = other.UnCompleteExpStage;
      }
      if (other.UnCompleteTower != 0) {
        UnCompleteTower = other.UnCompleteTower;
      }
      if (other.UnSinglePvp != 0) {
        UnSinglePvp = other.UnSinglePvp;
      }
      if (other.UnCompleteTeamPve != 0) {
        UnCompleteTeamPve = other.UnCompleteTeamPve;
      }
      if (other.UnCompleteFiveFlower != 0) {
        UnCompleteFiveFlower = other.UnCompleteFiveFlower;
      }
      if (other.UnCompleteThreeTalent1 != 0) {
        UnCompleteThreeTalent1 = other.UnCompleteThreeTalent1;
      }
      if (other.UnCompleteThreeTalent2 != 0) {
        UnCompleteThreeTalent2 = other.UnCompleteThreeTalent2;
      }
      if (other.UnCompleteThreeTalent3 != 0) {
        UnCompleteThreeTalent3 = other.UnCompleteThreeTalent3;
      }
      if (other.UnCompleteMultyBoss != 0) {
        UnCompleteMultyBoss = other.UnCompleteMultyBoss;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnCompleteStage = input.ReadUInt32();
            break;
          }
          case 16: {
            UnCompleteCoinStage = input.ReadUInt32();
            break;
          }
          case 24: {
            UnCompleteExpStage = input.ReadUInt32();
            break;
          }
          case 32: {
            UnCompleteTower = input.ReadUInt32();
            break;
          }
          case 40: {
            UnSinglePvp = input.ReadUInt32();
            break;
          }
          case 48: {
            UnCompleteTeamPve = input.ReadUInt32();
            break;
          }
          case 56: {
            UnCompleteFiveFlower = input.ReadUInt32();
            break;
          }
          case 64: {
            UnCompleteThreeTalent1 = input.ReadUInt32();
            break;
          }
          case 72: {
            UnCompleteThreeTalent2 = input.ReadUInt32();
            break;
          }
          case 80: {
            UnCompleteThreeTalent3 = input.ReadUInt32();
            break;
          }
          case 88: {
            UnCompleteMultyBoss = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
