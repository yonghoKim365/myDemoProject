// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/PMsgTask.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sw {

  /// <summary>Holder for reflection information generated from protos/PMsgTask.proto</summary>
  public static partial class PMsgTaskReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/PMsgTask.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PMsgTaskReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVwcm90b3MvUE1zZ1Rhc2sucHJvdG8SAnN3IigKElBNc2dUYXNrUXVlcnlJ",
            "bmZvQxISCgp1blJlc2VydmVkGAEgASgFIlsKCFRhc2tJbmZvEhAKCHVuVGFz",
            "a0lkGAEgASgNEhMKC3VuVGFyZ2V0TnVtGAIgASgNEhIKCnVuQ29tcGxldGUY",
            "BCABKA0SFAoMdW5GZXRjaEJvbnVzGAUgASgNIl8KElBNc2dUYXNrUXVlcnlJ",
            "bmZvUxITCgt1blRhc2tDb3VudBgBIAEoDRIgCgpjVGFza0luZm9zGAIgAygL",
            "Mgwuc3cuVGFza0luZm8SEgoKbkVycm9yQ29kZRhjIAEoBSIoChRQTXNnVGFz",
            "a1JlY2VpdmVUYXNrQxIQCgh1blRhc2tJZBgBIAEoDSI8ChRQTXNnVGFza1Jl",
            "Y2VpdmVUYXNrUxIQCgh1blRhc2tJZBgBIAEoDRISCgpuRXJyb3JDb2RlGGMg",
            "ASgFIiUKEVBNc2dUYXNrQ29tcGxldGVDEhAKCHVuVGFza0lkGAEgASgNIjkK",
            "EVBNc2dUYXNrQ29tcGxldGVTEhAKCHVuVGFza0lkGAEgASgNEhIKCm5FcnJv",
            "ckNvZGUYYyABKAUiJwoTUE1zZ1Rhc2tGZXRjaEJvbnVzQxIQCgh1blRhc2tJ",
            "ZBgBIAEoDSI7ChNQTXNnVGFza0ZldGNoQm9udXNTEhAKCHVuVGFza0lkGAEg",
            "ASgNEhIKCm5FcnJvckNvZGUYYyABKAUiLQoXUE1zZ0RhaWx5VGFza1F1ZXJ5",
            "SW5mb0MSEgoKdW5SZXNlcnZlZBgBIAEoBSJbCg1EYWlseVRhc2tJbmZvEhIK",
            "CnVuVGFza1R5cGUYASABKA0SFAoMdW5GZXRjaEJvbnVzGAUgASgNEg8KB3Vu",
            "VG9kYXkYAiABKA0SDwoHdW5Db3VudBgEIAEoDSJpChdQTXNnRGFpbHlUYXNr",
            "UXVlcnlJbmZvUxITCgt1blRhc2tDb3VudBgBIAEoDRIlCgpjVGFza0luZm9z",
            "GAIgAygLMhEuc3cuRGFpbHlUYXNrSW5mbxISCgpuRXJyb3JDb2RlGGMgASgF",
            "Ii4KGFBNc2dEYWlseVRhc2tGZXRjaEJvbnVzQxISCgp1blRhc2tUeXBlGAEg",
            "ASgNIkIKGFBNc2dEYWlseVRhc2tGZXRjaEJvbnVzUxISCgp1blRhc2tUeXBl",
            "GAEgASgNEhIKCm5FcnJvckNvZGUYYyABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgTaskQueryInfoC), global::Sw.PMsgTaskQueryInfoC.Parser, new[]{ "UnReserved" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.TaskInfo), global::Sw.TaskInfo.Parser, new[]{ "UnTaskId", "UnTargetNum", "UnComplete", "UnFetchBonus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgTaskQueryInfoS), global::Sw.PMsgTaskQueryInfoS.Parser, new[]{ "UnTaskCount", "CTaskInfos", "NErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgTaskReceiveTaskC), global::Sw.PMsgTaskReceiveTaskC.Parser, new[]{ "UnTaskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgTaskReceiveTaskS), global::Sw.PMsgTaskReceiveTaskS.Parser, new[]{ "UnTaskId", "NErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgTaskCompleteC), global::Sw.PMsgTaskCompleteC.Parser, new[]{ "UnTaskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgTaskCompleteS), global::Sw.PMsgTaskCompleteS.Parser, new[]{ "UnTaskId", "NErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgTaskFetchBonusC), global::Sw.PMsgTaskFetchBonusC.Parser, new[]{ "UnTaskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgTaskFetchBonusS), global::Sw.PMsgTaskFetchBonusS.Parser, new[]{ "UnTaskId", "NErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgDailyTaskQueryInfoC), global::Sw.PMsgDailyTaskQueryInfoC.Parser, new[]{ "UnReserved" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.DailyTaskInfo), global::Sw.DailyTaskInfo.Parser, new[]{ "UnTaskType", "UnFetchBonus", "UnToday", "UnCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgDailyTaskQueryInfoS), global::Sw.PMsgDailyTaskQueryInfoS.Parser, new[]{ "UnTaskCount", "CTaskInfos", "NErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgDailyTaskFetchBonusC), global::Sw.PMsgDailyTaskFetchBonusC.Parser, new[]{ "UnTaskType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgDailyTaskFetchBonusS), global::Sw.PMsgDailyTaskFetchBonusS.Parser, new[]{ "UnTaskType", "NErrorCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 客户端：查询任务信息
  /// _MSG_TASK_QUERY_INFO_C
  /// </summary>
  public sealed partial class PMsgTaskQueryInfoC : pb::IMessage<PMsgTaskQueryInfoC> {
    private static readonly pb::MessageParser<PMsgTaskQueryInfoC> _parser = new pb::MessageParser<PMsgTaskQueryInfoC>(() => new PMsgTaskQueryInfoC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgTaskQueryInfoC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTaskReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskQueryInfoC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskQueryInfoC(PMsgTaskQueryInfoC other) : this() {
      unReserved_ = other.unReserved_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskQueryInfoC Clone() {
      return new PMsgTaskQueryInfoC(this);
    }

    /// <summary>Field number for the "unReserved" field.</summary>
    public const int UnReservedFieldNumber = 1;
    private int unReserved_;
    /// <summary>
    /// 保留字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnReserved {
      get { return unReserved_; }
      set {
        unReserved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgTaskQueryInfoC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgTaskQueryInfoC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnReserved != other.UnReserved) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnReserved != 0) hash ^= UnReserved.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnReserved != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnReserved);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnReserved != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnReserved);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgTaskQueryInfoC other) {
      if (other == null) {
        return;
      }
      if (other.UnReserved != 0) {
        UnReserved = other.UnReserved;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnReserved = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 单个任务信息
  /// </summary>
  public sealed partial class TaskInfo : pb::IMessage<TaskInfo> {
    private static readonly pb::MessageParser<TaskInfo> _parser = new pb::MessageParser<TaskInfo>(() => new TaskInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTaskReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo(TaskInfo other) : this() {
      unTaskId_ = other.unTaskId_;
      unTargetNum_ = other.unTargetNum_;
      unComplete_ = other.unComplete_;
      unFetchBonus_ = other.unFetchBonus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo Clone() {
      return new TaskInfo(this);
    }

    /// <summary>Field number for the "unTaskId" field.</summary>
    public const int UnTaskIdFieldNumber = 1;
    private uint unTaskId_;
    /// <summary>
    /// 任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTaskId {
      get { return unTaskId_; }
      set {
        unTaskId_ = value;
      }
    }

    /// <summary>Field number for the "unTargetNum" field.</summary>
    public const int UnTargetNumFieldNumber = 2;
    private uint unTargetNum_;
    /// <summary>
    /// 任务目标数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTargetNum {
      get { return unTargetNum_; }
      set {
        unTargetNum_ = value;
      }
    }

    /// <summary>Field number for the "unComplete" field.</summary>
    public const int UnCompleteFieldNumber = 4;
    private uint unComplete_;
    /// <summary>
    /// 任务是否完成	0未完成,1完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnComplete {
      get { return unComplete_; }
      set {
        unComplete_ = value;
      }
    }

    /// <summary>Field number for the "unFetchBonus" field.</summary>
    public const int UnFetchBonusFieldNumber = 5;
    private uint unFetchBonus_;
    /// <summary>
    /// 任务奖励是否已领取任务奖励,0未领取,1已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnFetchBonus {
      get { return unFetchBonus_; }
      set {
        unFetchBonus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnTaskId != other.UnTaskId) return false;
      if (UnTargetNum != other.UnTargetNum) return false;
      if (UnComplete != other.UnComplete) return false;
      if (UnFetchBonus != other.UnFetchBonus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnTaskId != 0) hash ^= UnTaskId.GetHashCode();
      if (UnTargetNum != 0) hash ^= UnTargetNum.GetHashCode();
      if (UnComplete != 0) hash ^= UnComplete.GetHashCode();
      if (UnFetchBonus != 0) hash ^= UnFetchBonus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnTaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnTaskId);
      }
      if (UnTargetNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnTargetNum);
      }
      if (UnComplete != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UnComplete);
      }
      if (UnFetchBonus != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(UnFetchBonus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnTaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnTaskId);
      }
      if (UnTargetNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnTargetNum);
      }
      if (UnComplete != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnComplete);
      }
      if (UnFetchBonus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnFetchBonus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskInfo other) {
      if (other == null) {
        return;
      }
      if (other.UnTaskId != 0) {
        UnTaskId = other.UnTaskId;
      }
      if (other.UnTargetNum != 0) {
        UnTargetNum = other.UnTargetNum;
      }
      if (other.UnComplete != 0) {
        UnComplete = other.UnComplete;
      }
      if (other.UnFetchBonus != 0) {
        UnFetchBonus = other.UnFetchBonus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnTaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            UnTargetNum = input.ReadUInt32();
            break;
          }
          case 32: {
            UnComplete = input.ReadUInt32();
            break;
          }
          case 40: {
            UnFetchBonus = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端：查询任务信息回复
  /// _MSG_TASK_QUERY_INFO_S
  /// </summary>
  public sealed partial class PMsgTaskQueryInfoS : pb::IMessage<PMsgTaskQueryInfoS> {
    private static readonly pb::MessageParser<PMsgTaskQueryInfoS> _parser = new pb::MessageParser<PMsgTaskQueryInfoS>(() => new PMsgTaskQueryInfoS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgTaskQueryInfoS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTaskReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskQueryInfoS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskQueryInfoS(PMsgTaskQueryInfoS other) : this() {
      unTaskCount_ = other.unTaskCount_;
      cTaskInfos_ = other.cTaskInfos_.Clone();
      nErrorCode_ = other.nErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskQueryInfoS Clone() {
      return new PMsgTaskQueryInfoS(this);
    }

    /// <summary>Field number for the "unTaskCount" field.</summary>
    public const int UnTaskCountFieldNumber = 1;
    private uint unTaskCount_;
    /// <summary>
    /// 任务数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTaskCount {
      get { return unTaskCount_; }
      set {
        unTaskCount_ = value;
      }
    }

    /// <summary>Field number for the "cTaskInfos" field.</summary>
    public const int CTaskInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sw.TaskInfo> _repeated_cTaskInfos_codec
        = pb::FieldCodec.ForMessage(18, global::Sw.TaskInfo.Parser);
    private readonly pbc::RepeatedField<global::Sw.TaskInfo> cTaskInfos_ = new pbc::RepeatedField<global::Sw.TaskInfo>();
    /// <summary>
    /// 所有任务信息	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.TaskInfo> CTaskInfos {
      get { return cTaskInfos_; }
    }

    /// <summary>Field number for the "nErrorCode" field.</summary>
    public const int NErrorCodeFieldNumber = 99;
    private int nErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NErrorCode {
      get { return nErrorCode_; }
      set {
        nErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgTaskQueryInfoS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgTaskQueryInfoS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnTaskCount != other.UnTaskCount) return false;
      if(!cTaskInfos_.Equals(other.cTaskInfos_)) return false;
      if (NErrorCode != other.NErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnTaskCount != 0) hash ^= UnTaskCount.GetHashCode();
      hash ^= cTaskInfos_.GetHashCode();
      if (NErrorCode != 0) hash ^= NErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnTaskCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnTaskCount);
      }
      cTaskInfos_.WriteTo(output, _repeated_cTaskInfos_codec);
      if (NErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(NErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnTaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnTaskCount);
      }
      size += cTaskInfos_.CalculateSize(_repeated_cTaskInfos_codec);
      if (NErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgTaskQueryInfoS other) {
      if (other == null) {
        return;
      }
      if (other.UnTaskCount != 0) {
        UnTaskCount = other.UnTaskCount;
      }
      cTaskInfos_.Add(other.cTaskInfos_);
      if (other.NErrorCode != 0) {
        NErrorCode = other.NErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnTaskCount = input.ReadUInt32();
            break;
          }
          case 18: {
            cTaskInfos_.AddEntriesFrom(input, _repeated_cTaskInfos_codec);
            break;
          }
          case 792: {
            NErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：领取任务请求
  /// _MSG_TASK_RECEIVE_TASK_C
  /// </summary>
  public sealed partial class PMsgTaskReceiveTaskC : pb::IMessage<PMsgTaskReceiveTaskC> {
    private static readonly pb::MessageParser<PMsgTaskReceiveTaskC> _parser = new pb::MessageParser<PMsgTaskReceiveTaskC>(() => new PMsgTaskReceiveTaskC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgTaskReceiveTaskC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTaskReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskReceiveTaskC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskReceiveTaskC(PMsgTaskReceiveTaskC other) : this() {
      unTaskId_ = other.unTaskId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskReceiveTaskC Clone() {
      return new PMsgTaskReceiveTaskC(this);
    }

    /// <summary>Field number for the "unTaskId" field.</summary>
    public const int UnTaskIdFieldNumber = 1;
    private uint unTaskId_;
    /// <summary>
    /// 任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTaskId {
      get { return unTaskId_; }
      set {
        unTaskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgTaskReceiveTaskC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgTaskReceiveTaskC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnTaskId != other.UnTaskId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnTaskId != 0) hash ^= UnTaskId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnTaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnTaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnTaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnTaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgTaskReceiveTaskC other) {
      if (other == null) {
        return;
      }
      if (other.UnTaskId != 0) {
        UnTaskId = other.UnTaskId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnTaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端：领取任务回复
  /// _MSG_TASK_RECEIVE_TASK_S
  /// </summary>
  public sealed partial class PMsgTaskReceiveTaskS : pb::IMessage<PMsgTaskReceiveTaskS> {
    private static readonly pb::MessageParser<PMsgTaskReceiveTaskS> _parser = new pb::MessageParser<PMsgTaskReceiveTaskS>(() => new PMsgTaskReceiveTaskS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgTaskReceiveTaskS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTaskReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskReceiveTaskS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskReceiveTaskS(PMsgTaskReceiveTaskS other) : this() {
      unTaskId_ = other.unTaskId_;
      nErrorCode_ = other.nErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskReceiveTaskS Clone() {
      return new PMsgTaskReceiveTaskS(this);
    }

    /// <summary>Field number for the "unTaskId" field.</summary>
    public const int UnTaskIdFieldNumber = 1;
    private uint unTaskId_;
    /// <summary>
    /// 任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTaskId {
      get { return unTaskId_; }
      set {
        unTaskId_ = value;
      }
    }

    /// <summary>Field number for the "nErrorCode" field.</summary>
    public const int NErrorCodeFieldNumber = 99;
    private int nErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NErrorCode {
      get { return nErrorCode_; }
      set {
        nErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgTaskReceiveTaskS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgTaskReceiveTaskS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnTaskId != other.UnTaskId) return false;
      if (NErrorCode != other.NErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnTaskId != 0) hash ^= UnTaskId.GetHashCode();
      if (NErrorCode != 0) hash ^= NErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnTaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnTaskId);
      }
      if (NErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(NErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnTaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnTaskId);
      }
      if (NErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgTaskReceiveTaskS other) {
      if (other == null) {
        return;
      }
      if (other.UnTaskId != 0) {
        UnTaskId = other.UnTaskId;
      }
      if (other.NErrorCode != 0) {
        NErrorCode = other.NErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnTaskId = input.ReadUInt32();
            break;
          }
          case 792: {
            NErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：完成任务请求
  /// _MSG_TASK_COMPLETE_C
  /// </summary>
  public sealed partial class PMsgTaskCompleteC : pb::IMessage<PMsgTaskCompleteC> {
    private static readonly pb::MessageParser<PMsgTaskCompleteC> _parser = new pb::MessageParser<PMsgTaskCompleteC>(() => new PMsgTaskCompleteC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgTaskCompleteC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTaskReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskCompleteC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskCompleteC(PMsgTaskCompleteC other) : this() {
      unTaskId_ = other.unTaskId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskCompleteC Clone() {
      return new PMsgTaskCompleteC(this);
    }

    /// <summary>Field number for the "unTaskId" field.</summary>
    public const int UnTaskIdFieldNumber = 1;
    private uint unTaskId_;
    /// <summary>
    /// 任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTaskId {
      get { return unTaskId_; }
      set {
        unTaskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgTaskCompleteC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgTaskCompleteC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnTaskId != other.UnTaskId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnTaskId != 0) hash ^= UnTaskId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnTaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnTaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnTaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnTaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgTaskCompleteC other) {
      if (other == null) {
        return;
      }
      if (other.UnTaskId != 0) {
        UnTaskId = other.UnTaskId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnTaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端：完成任务回复
  /// _MSG_TASK_COMPLETE_S
  /// </summary>
  public sealed partial class PMsgTaskCompleteS : pb::IMessage<PMsgTaskCompleteS> {
    private static readonly pb::MessageParser<PMsgTaskCompleteS> _parser = new pb::MessageParser<PMsgTaskCompleteS>(() => new PMsgTaskCompleteS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgTaskCompleteS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTaskReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskCompleteS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskCompleteS(PMsgTaskCompleteS other) : this() {
      unTaskId_ = other.unTaskId_;
      nErrorCode_ = other.nErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskCompleteS Clone() {
      return new PMsgTaskCompleteS(this);
    }

    /// <summary>Field number for the "unTaskId" field.</summary>
    public const int UnTaskIdFieldNumber = 1;
    private uint unTaskId_;
    /// <summary>
    /// 任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTaskId {
      get { return unTaskId_; }
      set {
        unTaskId_ = value;
      }
    }

    /// <summary>Field number for the "nErrorCode" field.</summary>
    public const int NErrorCodeFieldNumber = 99;
    private int nErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NErrorCode {
      get { return nErrorCode_; }
      set {
        nErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgTaskCompleteS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgTaskCompleteS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnTaskId != other.UnTaskId) return false;
      if (NErrorCode != other.NErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnTaskId != 0) hash ^= UnTaskId.GetHashCode();
      if (NErrorCode != 0) hash ^= NErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnTaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnTaskId);
      }
      if (NErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(NErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnTaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnTaskId);
      }
      if (NErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgTaskCompleteS other) {
      if (other == null) {
        return;
      }
      if (other.UnTaskId != 0) {
        UnTaskId = other.UnTaskId;
      }
      if (other.NErrorCode != 0) {
        NErrorCode = other.NErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnTaskId = input.ReadUInt32();
            break;
          }
          case 792: {
            NErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：领取任务奖励请求
  /// _MSG_TASK_FETCH_BONUS_C
  /// </summary>
  public sealed partial class PMsgTaskFetchBonusC : pb::IMessage<PMsgTaskFetchBonusC> {
    private static readonly pb::MessageParser<PMsgTaskFetchBonusC> _parser = new pb::MessageParser<PMsgTaskFetchBonusC>(() => new PMsgTaskFetchBonusC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgTaskFetchBonusC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTaskReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskFetchBonusC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskFetchBonusC(PMsgTaskFetchBonusC other) : this() {
      unTaskId_ = other.unTaskId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskFetchBonusC Clone() {
      return new PMsgTaskFetchBonusC(this);
    }

    /// <summary>Field number for the "unTaskId" field.</summary>
    public const int UnTaskIdFieldNumber = 1;
    private uint unTaskId_;
    /// <summary>
    /// 任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTaskId {
      get { return unTaskId_; }
      set {
        unTaskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgTaskFetchBonusC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgTaskFetchBonusC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnTaskId != other.UnTaskId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnTaskId != 0) hash ^= UnTaskId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnTaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnTaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnTaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnTaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgTaskFetchBonusC other) {
      if (other == null) {
        return;
      }
      if (other.UnTaskId != 0) {
        UnTaskId = other.UnTaskId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnTaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端：领取任务奖励回复
  /// _MSG_TASK_FETCH_BONUS_S
  /// </summary>
  public sealed partial class PMsgTaskFetchBonusS : pb::IMessage<PMsgTaskFetchBonusS> {
    private static readonly pb::MessageParser<PMsgTaskFetchBonusS> _parser = new pb::MessageParser<PMsgTaskFetchBonusS>(() => new PMsgTaskFetchBonusS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgTaskFetchBonusS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTaskReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskFetchBonusS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskFetchBonusS(PMsgTaskFetchBonusS other) : this() {
      unTaskId_ = other.unTaskId_;
      nErrorCode_ = other.nErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgTaskFetchBonusS Clone() {
      return new PMsgTaskFetchBonusS(this);
    }

    /// <summary>Field number for the "unTaskId" field.</summary>
    public const int UnTaskIdFieldNumber = 1;
    private uint unTaskId_;
    /// <summary>
    /// 任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTaskId {
      get { return unTaskId_; }
      set {
        unTaskId_ = value;
      }
    }

    /// <summary>Field number for the "nErrorCode" field.</summary>
    public const int NErrorCodeFieldNumber = 99;
    private int nErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NErrorCode {
      get { return nErrorCode_; }
      set {
        nErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgTaskFetchBonusS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgTaskFetchBonusS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnTaskId != other.UnTaskId) return false;
      if (NErrorCode != other.NErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnTaskId != 0) hash ^= UnTaskId.GetHashCode();
      if (NErrorCode != 0) hash ^= NErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnTaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnTaskId);
      }
      if (NErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(NErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnTaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnTaskId);
      }
      if (NErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgTaskFetchBonusS other) {
      if (other == null) {
        return;
      }
      if (other.UnTaskId != 0) {
        UnTaskId = other.UnTaskId;
      }
      if (other.NErrorCode != 0) {
        NErrorCode = other.NErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnTaskId = input.ReadUInt32();
            break;
          }
          case 792: {
            NErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：查询每日任务信息
  /// _MSG_DAILY_TASK_QUERY_INFO_C
  /// </summary>
  public sealed partial class PMsgDailyTaskQueryInfoC : pb::IMessage<PMsgDailyTaskQueryInfoC> {
    private static readonly pb::MessageParser<PMsgDailyTaskQueryInfoC> _parser = new pb::MessageParser<PMsgDailyTaskQueryInfoC>(() => new PMsgDailyTaskQueryInfoC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgDailyTaskQueryInfoC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTaskReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgDailyTaskQueryInfoC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgDailyTaskQueryInfoC(PMsgDailyTaskQueryInfoC other) : this() {
      unReserved_ = other.unReserved_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgDailyTaskQueryInfoC Clone() {
      return new PMsgDailyTaskQueryInfoC(this);
    }

    /// <summary>Field number for the "unReserved" field.</summary>
    public const int UnReservedFieldNumber = 1;
    private int unReserved_;
    /// <summary>
    /// 保留字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnReserved {
      get { return unReserved_; }
      set {
        unReserved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgDailyTaskQueryInfoC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgDailyTaskQueryInfoC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnReserved != other.UnReserved) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnReserved != 0) hash ^= UnReserved.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnReserved != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnReserved);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnReserved != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnReserved);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgDailyTaskQueryInfoC other) {
      if (other == null) {
        return;
      }
      if (other.UnReserved != 0) {
        UnReserved = other.UnReserved;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnReserved = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 单个每日任务信息
  /// </summary>
  public sealed partial class DailyTaskInfo : pb::IMessage<DailyTaskInfo> {
    private static readonly pb::MessageParser<DailyTaskInfo> _parser = new pb::MessageParser<DailyTaskInfo>(() => new DailyTaskInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyTaskInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTaskReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyTaskInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyTaskInfo(DailyTaskInfo other) : this() {
      unTaskType_ = other.unTaskType_;
      unFetchBonus_ = other.unFetchBonus_;
      unToday_ = other.unToday_;
      unCount_ = other.unCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyTaskInfo Clone() {
      return new DailyTaskInfo(this);
    }

    /// <summary>Field number for the "unTaskType" field.</summary>
    public const int UnTaskTypeFieldNumber = 1;
    private uint unTaskType_;
    /// <summary>
    /// 任务类型(Mission表id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTaskType {
      get { return unTaskType_; }
      set {
        unTaskType_ = value;
      }
    }

    /// <summary>Field number for the "unFetchBonus" field.</summary>
    public const int UnFetchBonusFieldNumber = 5;
    private uint unFetchBonus_;
    /// <summary>
    /// 任务奖励是否已领取任务奖励,0未领取,1已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnFetchBonus {
      get { return unFetchBonus_; }
      set {
        unFetchBonus_ = value;
      }
    }

    /// <summary>Field number for the "unToday" field.</summary>
    public const int UnTodayFieldNumber = 2;
    private uint unToday_;
    /// <summary>
    /// 日期: YYMMDD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnToday {
      get { return unToday_; }
      set {
        unToday_ = value;
      }
    }

    /// <summary>Field number for the "unCount" field.</summary>
    public const int UnCountFieldNumber = 4;
    private uint unCount_;
    /// <summary>
    /// 次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnCount {
      get { return unCount_; }
      set {
        unCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyTaskInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyTaskInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnTaskType != other.UnTaskType) return false;
      if (UnFetchBonus != other.UnFetchBonus) return false;
      if (UnToday != other.UnToday) return false;
      if (UnCount != other.UnCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnTaskType != 0) hash ^= UnTaskType.GetHashCode();
      if (UnFetchBonus != 0) hash ^= UnFetchBonus.GetHashCode();
      if (UnToday != 0) hash ^= UnToday.GetHashCode();
      if (UnCount != 0) hash ^= UnCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnTaskType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnTaskType);
      }
      if (UnToday != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnToday);
      }
      if (UnCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UnCount);
      }
      if (UnFetchBonus != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(UnFetchBonus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnTaskType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnTaskType);
      }
      if (UnFetchBonus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnFetchBonus);
      }
      if (UnToday != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnToday);
      }
      if (UnCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyTaskInfo other) {
      if (other == null) {
        return;
      }
      if (other.UnTaskType != 0) {
        UnTaskType = other.UnTaskType;
      }
      if (other.UnFetchBonus != 0) {
        UnFetchBonus = other.UnFetchBonus;
      }
      if (other.UnToday != 0) {
        UnToday = other.UnToday;
      }
      if (other.UnCount != 0) {
        UnCount = other.UnCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnTaskType = input.ReadUInt32();
            break;
          }
          case 16: {
            UnToday = input.ReadUInt32();
            break;
          }
          case 32: {
            UnCount = input.ReadUInt32();
            break;
          }
          case 40: {
            UnFetchBonus = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端：查询每日任务信息回复
  /// _MSG_DAILY_TASK_QUERY_INFO_S
  /// </summary>
  public sealed partial class PMsgDailyTaskQueryInfoS : pb::IMessage<PMsgDailyTaskQueryInfoS> {
    private static readonly pb::MessageParser<PMsgDailyTaskQueryInfoS> _parser = new pb::MessageParser<PMsgDailyTaskQueryInfoS>(() => new PMsgDailyTaskQueryInfoS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgDailyTaskQueryInfoS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTaskReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgDailyTaskQueryInfoS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgDailyTaskQueryInfoS(PMsgDailyTaskQueryInfoS other) : this() {
      unTaskCount_ = other.unTaskCount_;
      cTaskInfos_ = other.cTaskInfos_.Clone();
      nErrorCode_ = other.nErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgDailyTaskQueryInfoS Clone() {
      return new PMsgDailyTaskQueryInfoS(this);
    }

    /// <summary>Field number for the "unTaskCount" field.</summary>
    public const int UnTaskCountFieldNumber = 1;
    private uint unTaskCount_;
    /// <summary>
    /// 任务数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTaskCount {
      get { return unTaskCount_; }
      set {
        unTaskCount_ = value;
      }
    }

    /// <summary>Field number for the "cTaskInfos" field.</summary>
    public const int CTaskInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sw.DailyTaskInfo> _repeated_cTaskInfos_codec
        = pb::FieldCodec.ForMessage(18, global::Sw.DailyTaskInfo.Parser);
    private readonly pbc::RepeatedField<global::Sw.DailyTaskInfo> cTaskInfos_ = new pbc::RepeatedField<global::Sw.DailyTaskInfo>();
    /// <summary>
    /// 所有任务信息	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.DailyTaskInfo> CTaskInfos {
      get { return cTaskInfos_; }
    }

    /// <summary>Field number for the "nErrorCode" field.</summary>
    public const int NErrorCodeFieldNumber = 99;
    private int nErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NErrorCode {
      get { return nErrorCode_; }
      set {
        nErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgDailyTaskQueryInfoS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgDailyTaskQueryInfoS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnTaskCount != other.UnTaskCount) return false;
      if(!cTaskInfos_.Equals(other.cTaskInfos_)) return false;
      if (NErrorCode != other.NErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnTaskCount != 0) hash ^= UnTaskCount.GetHashCode();
      hash ^= cTaskInfos_.GetHashCode();
      if (NErrorCode != 0) hash ^= NErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnTaskCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnTaskCount);
      }
      cTaskInfos_.WriteTo(output, _repeated_cTaskInfos_codec);
      if (NErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(NErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnTaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnTaskCount);
      }
      size += cTaskInfos_.CalculateSize(_repeated_cTaskInfos_codec);
      if (NErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgDailyTaskQueryInfoS other) {
      if (other == null) {
        return;
      }
      if (other.UnTaskCount != 0) {
        UnTaskCount = other.UnTaskCount;
      }
      cTaskInfos_.Add(other.cTaskInfos_);
      if (other.NErrorCode != 0) {
        NErrorCode = other.NErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnTaskCount = input.ReadUInt32();
            break;
          }
          case 18: {
            cTaskInfos_.AddEntriesFrom(input, _repeated_cTaskInfos_codec);
            break;
          }
          case 792: {
            NErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端：领取每日任务奖励请求
  /// _MSG_DAILY_TASK_FETCH_BONUS_C
  /// </summary>
  public sealed partial class PMsgDailyTaskFetchBonusC : pb::IMessage<PMsgDailyTaskFetchBonusC> {
    private static readonly pb::MessageParser<PMsgDailyTaskFetchBonusC> _parser = new pb::MessageParser<PMsgDailyTaskFetchBonusC>(() => new PMsgDailyTaskFetchBonusC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgDailyTaskFetchBonusC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTaskReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgDailyTaskFetchBonusC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgDailyTaskFetchBonusC(PMsgDailyTaskFetchBonusC other) : this() {
      unTaskType_ = other.unTaskType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgDailyTaskFetchBonusC Clone() {
      return new PMsgDailyTaskFetchBonusC(this);
    }

    /// <summary>Field number for the "unTaskType" field.</summary>
    public const int UnTaskTypeFieldNumber = 1;
    private uint unTaskType_;
    /// <summary>
    /// 任务类型(Mission表id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTaskType {
      get { return unTaskType_; }
      set {
        unTaskType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgDailyTaskFetchBonusC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgDailyTaskFetchBonusC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnTaskType != other.UnTaskType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnTaskType != 0) hash ^= UnTaskType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnTaskType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnTaskType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnTaskType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnTaskType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgDailyTaskFetchBonusC other) {
      if (other == null) {
        return;
      }
      if (other.UnTaskType != 0) {
        UnTaskType = other.UnTaskType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnTaskType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端：领取每日任务奖励回复
  /// _MSG_DAILY_TASK_FETCH_BONUS_S
  /// </summary>
  public sealed partial class PMsgDailyTaskFetchBonusS : pb::IMessage<PMsgDailyTaskFetchBonusS> {
    private static readonly pb::MessageParser<PMsgDailyTaskFetchBonusS> _parser = new pb::MessageParser<PMsgDailyTaskFetchBonusS>(() => new PMsgDailyTaskFetchBonusS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgDailyTaskFetchBonusS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgTaskReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgDailyTaskFetchBonusS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgDailyTaskFetchBonusS(PMsgDailyTaskFetchBonusS other) : this() {
      unTaskType_ = other.unTaskType_;
      nErrorCode_ = other.nErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgDailyTaskFetchBonusS Clone() {
      return new PMsgDailyTaskFetchBonusS(this);
    }

    /// <summary>Field number for the "unTaskType" field.</summary>
    public const int UnTaskTypeFieldNumber = 1;
    private uint unTaskType_;
    /// <summary>
    /// 任务类型(Mission表id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTaskType {
      get { return unTaskType_; }
      set {
        unTaskType_ = value;
      }
    }

    /// <summary>Field number for the "nErrorCode" field.</summary>
    public const int NErrorCodeFieldNumber = 99;
    private int nErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NErrorCode {
      get { return nErrorCode_; }
      set {
        nErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgDailyTaskFetchBonusS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgDailyTaskFetchBonusS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnTaskType != other.UnTaskType) return false;
      if (NErrorCode != other.NErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnTaskType != 0) hash ^= UnTaskType.GetHashCode();
      if (NErrorCode != 0) hash ^= NErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnTaskType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnTaskType);
      }
      if (NErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(NErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnTaskType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnTaskType);
      }
      if (NErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgDailyTaskFetchBonusS other) {
      if (other == null) {
        return;
      }
      if (other.UnTaskType != 0) {
        UnTaskType = other.UnTaskType;
      }
      if (other.NErrorCode != 0) {
        NErrorCode = other.NErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnTaskType = input.ReadUInt32();
            break;
          }
          case 792: {
            NErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
