// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/PMsgMap.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sw {

  /// <summary>Holder for reflection information generated from protos/PMsgMap.proto</summary>
  public static partial class PMsgMapReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/PMsgMap.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PMsgMapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRwcm90b3MvUE1zZ01hcC5wcm90bxICc3ciKAoVUE1zZ01hcEVudGVyTWFw",
            "UmVhZHlDEg8KB3VuTWFwSWQYASABKAUiVgoQUE1zZ01hcEVudGVyTWFwUxIP",
            "Cgd1bk1hcElkGAEgASgFEhEKCXVuTWFwVHlwZRgCIAEoBRIOCgZ1blBvc1gY",
            "AyABKAUSDgoGdW5Qb3NZGAQgASgFIkkKEFBNc2dNYXBMZWF2ZU1hcFMSDwoH",
            "dW5NYXBJZBgBIAEoBRIRCgl1bk1hcFR5cGUYAiABKAUSEQoJdWxsUm9sZUlk",
            "GAMgASgDIv8BChBQTXNnTWFwUm9sZUluZm9TEhEKCXVsbFJvbGVJZBgBIAEo",
            "AxIOCgZzek5hbWUYAiABKAkSDgoGdW5UeXBlGAMgASgFEg8KB3VuTGV2ZWwY",
            "BCABKAUSDgoGdW5Qb3NYGAUgASgFEg4KBnVuUG9zWRgGIAEoBRIVCg11blRp",
            "dGxlUHJlZml4GAcgASgNEhUKDXVuVGl0bGVTdWZmaXgYCCABKA0SEwoLdW5D",
            "b3N0dW1lSWQYCiABKAUSGQoRdW5Db3N0dW1lU2hvd0ZsYWcYCyABKAUSFQoN",
            "dW5FcXVpcG1lbnRJZBgMIAMoBRISCgp1blZpcExldmVsGA0gASgNIkgKBk1h",
            "cFBvcxIOCgZ1blBvc1gYASABKAUSDgoGdW5Qb3NZGAIgASgFEg4KBmZEYXRh",
            "MRgDIAEoAhIOCgZmRGF0YTIYBCABKAIiUgoNUE1zZ01hcE1vdmVDUxIPCgd1",
            "bk1hcElkGAEgASgFEhsKB2NNYXBQb3MYAiADKAsyCi5zdy5NYXBQb3MSEwoL",
            "dW5FcnJvckNvZGUYYyABKAUiUwoQUE1zZ01hcE1vdmVSZWN2UxIRCgl1bGxS",
            "b2xlSWQYASABKAMSDwoHdW5NYXBJZBgCIAEoBRIbCgdjTWFwUG9zGAMgAygL",
            "Mgouc3cuTWFwUG9zIj8KDFBNc2dNYXBLaWNrUxIPCgd1bk1hcElkGAEgASgF",
            "Eg4KBnVuTmV3WBgCIAEoBRIOCgZ1bk5ld1kYAyABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgMapEnterMapReadyC), global::Sw.PMsgMapEnterMapReadyC.Parser, new[]{ "UnMapId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgMapEnterMapS), global::Sw.PMsgMapEnterMapS.Parser, new[]{ "UnMapId", "UnMapType", "UnPosX", "UnPosY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgMapLeaveMapS), global::Sw.PMsgMapLeaveMapS.Parser, new[]{ "UnMapId", "UnMapType", "UllRoleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgMapRoleInfoS), global::Sw.PMsgMapRoleInfoS.Parser, new[]{ "UllRoleId", "SzName", "UnType", "UnLevel", "UnPosX", "UnPosY", "UnTitlePrefix", "UnTitleSuffix", "UnCostumeId", "UnCostumeShowFlag", "UnEquipmentId", "UnVipLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.MapPos), global::Sw.MapPos.Parser, new[]{ "UnPosX", "UnPosY", "FData1", "FData2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgMapMoveCS), global::Sw.PMsgMapMoveCS.Parser, new[]{ "UnMapId", "CMapPos", "UnErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgMapMoveRecvS), global::Sw.PMsgMapMoveRecvS.Parser, new[]{ "UllRoleId", "UnMapId", "CMapPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sw.PMsgMapKickS), global::Sw.PMsgMapKickS.Parser, new[]{ "UnMapId", "UnNewX", "UnNewY" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 客户端：准备完毕请求进入地图
  /// _MSG_MAP_ENTER_MAP_READY_C
  /// </summary>
  public sealed partial class PMsgMapEnterMapReadyC : pb::IMessage<PMsgMapEnterMapReadyC> {
    private static readonly pb::MessageParser<PMsgMapEnterMapReadyC> _parser = new pb::MessageParser<PMsgMapEnterMapReadyC>(() => new PMsgMapEnterMapReadyC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgMapEnterMapReadyC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgMapReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapEnterMapReadyC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapEnterMapReadyC(PMsgMapEnterMapReadyC other) : this() {
      unMapId_ = other.unMapId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapEnterMapReadyC Clone() {
      return new PMsgMapEnterMapReadyC(this);
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 1;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgMapEnterMapReadyC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgMapEnterMapReadyC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnMapId != other.UnMapId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnMapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnMapId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgMapEnterMapReadyC other) {
      if (other == null) {
        return;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnMapId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：进入地图（自己）
  /// _MSG_MAP_ENTER_MAP_S
  /// </summary>
  public sealed partial class PMsgMapEnterMapS : pb::IMessage<PMsgMapEnterMapS> {
    private static readonly pb::MessageParser<PMsgMapEnterMapS> _parser = new pb::MessageParser<PMsgMapEnterMapS>(() => new PMsgMapEnterMapS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgMapEnterMapS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgMapReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapEnterMapS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapEnterMapS(PMsgMapEnterMapS other) : this() {
      unMapId_ = other.unMapId_;
      unMapType_ = other.unMapType_;
      unPosX_ = other.unPosX_;
      unPosY_ = other.unPosY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapEnterMapS Clone() {
      return new PMsgMapEnterMapS(this);
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 1;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    /// <summary>Field number for the "unMapType" field.</summary>
    public const int UnMapTypeFieldNumber = 2;
    private int unMapType_;
    /// <summary>
    /// 地图类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapType {
      get { return unMapType_; }
      set {
        unMapType_ = value;
      }
    }

    /// <summary>Field number for the "unPosX" field.</summary>
    public const int UnPosXFieldNumber = 3;
    private int unPosX_;
    /// <summary>
    /// 坐标：X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPosX {
      get { return unPosX_; }
      set {
        unPosX_ = value;
      }
    }

    /// <summary>Field number for the "unPosY" field.</summary>
    public const int UnPosYFieldNumber = 4;
    private int unPosY_;
    /// <summary>
    /// 坐标：Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPosY {
      get { return unPosY_; }
      set {
        unPosY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgMapEnterMapS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgMapEnterMapS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnMapId != other.UnMapId) return false;
      if (UnMapType != other.UnMapType) return false;
      if (UnPosX != other.UnPosX) return false;
      if (UnPosY != other.UnPosY) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      if (UnMapType != 0) hash ^= UnMapType.GetHashCode();
      if (UnPosX != 0) hash ^= UnPosX.GetHashCode();
      if (UnPosY != 0) hash ^= UnPosY.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnMapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnMapId);
      }
      if (UnMapType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnMapType);
      }
      if (UnPosX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnPosX);
      }
      if (UnPosY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnPosY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      if (UnMapType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapType);
      }
      if (UnPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPosX);
      }
      if (UnPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPosY);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgMapEnterMapS other) {
      if (other == null) {
        return;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
      if (other.UnMapType != 0) {
        UnMapType = other.UnMapType;
      }
      if (other.UnPosX != 0) {
        UnPosX = other.UnPosX;
      }
      if (other.UnPosY != 0) {
        UnPosY = other.UnPosY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnMapId = input.ReadInt32();
            break;
          }
          case 16: {
            UnMapType = input.ReadInt32();
            break;
          }
          case 24: {
            UnPosX = input.ReadInt32();
            break;
          }
          case 32: {
            UnPosY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：离开地图
  /// _MSG_MAP_LEAVE_MAP_S
  /// </summary>
  public sealed partial class PMsgMapLeaveMapS : pb::IMessage<PMsgMapLeaveMapS> {
    private static readonly pb::MessageParser<PMsgMapLeaveMapS> _parser = new pb::MessageParser<PMsgMapLeaveMapS>(() => new PMsgMapLeaveMapS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgMapLeaveMapS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgMapReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapLeaveMapS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapLeaveMapS(PMsgMapLeaveMapS other) : this() {
      unMapId_ = other.unMapId_;
      unMapType_ = other.unMapType_;
      ullRoleId_ = other.ullRoleId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapLeaveMapS Clone() {
      return new PMsgMapLeaveMapS(this);
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 1;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    /// <summary>Field number for the "unMapType" field.</summary>
    public const int UnMapTypeFieldNumber = 2;
    private int unMapType_;
    /// <summary>
    /// 地图类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapType {
      get { return unMapType_; }
      set {
        unMapType_ = value;
      }
    }

    /// <summary>Field number for the "ullRoleId" field.</summary>
    public const int UllRoleIdFieldNumber = 3;
    private long ullRoleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllRoleId {
      get { return ullRoleId_; }
      set {
        ullRoleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgMapLeaveMapS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgMapLeaveMapS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnMapId != other.UnMapId) return false;
      if (UnMapType != other.UnMapType) return false;
      if (UllRoleId != other.UllRoleId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      if (UnMapType != 0) hash ^= UnMapType.GetHashCode();
      if (UllRoleId != 0L) hash ^= UllRoleId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnMapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnMapId);
      }
      if (UnMapType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnMapType);
      }
      if (UllRoleId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UllRoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      if (UnMapType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapType);
      }
      if (UllRoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllRoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgMapLeaveMapS other) {
      if (other == null) {
        return;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
      if (other.UnMapType != 0) {
        UnMapType = other.UnMapType;
      }
      if (other.UllRoleId != 0L) {
        UllRoleId = other.UllRoleId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnMapId = input.ReadInt32();
            break;
          }
          case 16: {
            UnMapType = input.ReadInt32();
            break;
          }
          case 24: {
            UllRoleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：角色信息地图广播
  /// _MSG_MAP_ROLE_INFO_S
  /// </summary>
  public sealed partial class PMsgMapRoleInfoS : pb::IMessage<PMsgMapRoleInfoS> {
    private static readonly pb::MessageParser<PMsgMapRoleInfoS> _parser = new pb::MessageParser<PMsgMapRoleInfoS>(() => new PMsgMapRoleInfoS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgMapRoleInfoS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgMapReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapRoleInfoS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapRoleInfoS(PMsgMapRoleInfoS other) : this() {
      ullRoleId_ = other.ullRoleId_;
      szName_ = other.szName_;
      unType_ = other.unType_;
      unLevel_ = other.unLevel_;
      unPosX_ = other.unPosX_;
      unPosY_ = other.unPosY_;
      unTitlePrefix_ = other.unTitlePrefix_;
      unTitleSuffix_ = other.unTitleSuffix_;
      unCostumeId_ = other.unCostumeId_;
      unCostumeShowFlag_ = other.unCostumeShowFlag_;
      unEquipmentId_ = other.unEquipmentId_.Clone();
      unVipLevel_ = other.unVipLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapRoleInfoS Clone() {
      return new PMsgMapRoleInfoS(this);
    }

    /// <summary>Field number for the "ullRoleId" field.</summary>
    public const int UllRoleIdFieldNumber = 1;
    private long ullRoleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllRoleId {
      get { return ullRoleId_; }
      set {
        ullRoleId_ = value;
      }
    }

    /// <summary>Field number for the "szName" field.</summary>
    public const int SzNameFieldNumber = 2;
    private string szName_ = "";
    /// <summary>
    /// 角色名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzName {
      get { return szName_; }
      set {
        szName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unType" field.</summary>
    public const int UnTypeFieldNumber = 3;
    private int unType_;
    /// <summary>
    /// 角色类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnType {
      get { return unType_; }
      set {
        unType_ = value;
      }
    }

    /// <summary>Field number for the "unLevel" field.</summary>
    public const int UnLevelFieldNumber = 4;
    private int unLevel_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnLevel {
      get { return unLevel_; }
      set {
        unLevel_ = value;
      }
    }

    /// <summary>Field number for the "unPosX" field.</summary>
    public const int UnPosXFieldNumber = 5;
    private int unPosX_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPosX {
      get { return unPosX_; }
      set {
        unPosX_ = value;
      }
    }

    /// <summary>Field number for the "unPosY" field.</summary>
    public const int UnPosYFieldNumber = 6;
    private int unPosY_;
    /// <summary>
    /// 地图类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPosY {
      get { return unPosY_; }
      set {
        unPosY_ = value;
      }
    }

    /// <summary>Field number for the "unTitlePrefix" field.</summary>
    public const int UnTitlePrefixFieldNumber = 7;
    private uint unTitlePrefix_;
    /// <summary>
    /// 头衔前缀
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTitlePrefix {
      get { return unTitlePrefix_; }
      set {
        unTitlePrefix_ = value;
      }
    }

    /// <summary>Field number for the "unTitleSuffix" field.</summary>
    public const int UnTitleSuffixFieldNumber = 8;
    private uint unTitleSuffix_;
    /// <summary>
    /// 头衔后缀
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnTitleSuffix {
      get { return unTitleSuffix_; }
      set {
        unTitleSuffix_ = value;
      }
    }

    /// <summary>Field number for the "unCostumeId" field.</summary>
    public const int UnCostumeIdFieldNumber = 10;
    private int unCostumeId_;
    /// <summary>
    /// 时装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnCostumeId {
      get { return unCostumeId_; }
      set {
        unCostumeId_ = value;
      }
    }

    /// <summary>Field number for the "unCostumeShowFlag" field.</summary>
    public const int UnCostumeShowFlagFieldNumber = 11;
    private int unCostumeShowFlag_;
    /// <summary>
    /// 时装显示状态(sw::COSTUME_FLAG_TYPE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnCostumeShowFlag {
      get { return unCostumeShowFlag_; }
      set {
        unCostumeShowFlag_ = value;
      }
    }

    /// <summary>Field number for the "unEquipmentId" field.</summary>
    public const int UnEquipmentIdFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_unEquipmentId_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> unEquipmentId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 装备id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnEquipmentId {
      get { return unEquipmentId_; }
    }

    /// <summary>Field number for the "unVipLevel" field.</summary>
    public const int UnVipLevelFieldNumber = 13;
    private uint unVipLevel_;
    /// <summary>
    /// VIP等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnVipLevel {
      get { return unVipLevel_; }
      set {
        unVipLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgMapRoleInfoS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgMapRoleInfoS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UllRoleId != other.UllRoleId) return false;
      if (SzName != other.SzName) return false;
      if (UnType != other.UnType) return false;
      if (UnLevel != other.UnLevel) return false;
      if (UnPosX != other.UnPosX) return false;
      if (UnPosY != other.UnPosY) return false;
      if (UnTitlePrefix != other.UnTitlePrefix) return false;
      if (UnTitleSuffix != other.UnTitleSuffix) return false;
      if (UnCostumeId != other.UnCostumeId) return false;
      if (UnCostumeShowFlag != other.UnCostumeShowFlag) return false;
      if(!unEquipmentId_.Equals(other.unEquipmentId_)) return false;
      if (UnVipLevel != other.UnVipLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UllRoleId != 0L) hash ^= UllRoleId.GetHashCode();
      if (SzName.Length != 0) hash ^= SzName.GetHashCode();
      if (UnType != 0) hash ^= UnType.GetHashCode();
      if (UnLevel != 0) hash ^= UnLevel.GetHashCode();
      if (UnPosX != 0) hash ^= UnPosX.GetHashCode();
      if (UnPosY != 0) hash ^= UnPosY.GetHashCode();
      if (UnTitlePrefix != 0) hash ^= UnTitlePrefix.GetHashCode();
      if (UnTitleSuffix != 0) hash ^= UnTitleSuffix.GetHashCode();
      if (UnCostumeId != 0) hash ^= UnCostumeId.GetHashCode();
      if (UnCostumeShowFlag != 0) hash ^= UnCostumeShowFlag.GetHashCode();
      hash ^= unEquipmentId_.GetHashCode();
      if (UnVipLevel != 0) hash ^= UnVipLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UllRoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UllRoleId);
      }
      if (SzName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SzName);
      }
      if (UnType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnType);
      }
      if (UnLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnLevel);
      }
      if (UnPosX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UnPosX);
      }
      if (UnPosY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UnPosY);
      }
      if (UnTitlePrefix != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(UnTitlePrefix);
      }
      if (UnTitleSuffix != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(UnTitleSuffix);
      }
      if (UnCostumeId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UnCostumeId);
      }
      if (UnCostumeShowFlag != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(UnCostumeShowFlag);
      }
      unEquipmentId_.WriteTo(output, _repeated_unEquipmentId_codec);
      if (UnVipLevel != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(UnVipLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UllRoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllRoleId);
      }
      if (SzName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzName);
      }
      if (UnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnType);
      }
      if (UnLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnLevel);
      }
      if (UnPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPosX);
      }
      if (UnPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPosY);
      }
      if (UnTitlePrefix != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnTitlePrefix);
      }
      if (UnTitleSuffix != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnTitleSuffix);
      }
      if (UnCostumeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnCostumeId);
      }
      if (UnCostumeShowFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnCostumeShowFlag);
      }
      size += unEquipmentId_.CalculateSize(_repeated_unEquipmentId_codec);
      if (UnVipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnVipLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgMapRoleInfoS other) {
      if (other == null) {
        return;
      }
      if (other.UllRoleId != 0L) {
        UllRoleId = other.UllRoleId;
      }
      if (other.SzName.Length != 0) {
        SzName = other.SzName;
      }
      if (other.UnType != 0) {
        UnType = other.UnType;
      }
      if (other.UnLevel != 0) {
        UnLevel = other.UnLevel;
      }
      if (other.UnPosX != 0) {
        UnPosX = other.UnPosX;
      }
      if (other.UnPosY != 0) {
        UnPosY = other.UnPosY;
      }
      if (other.UnTitlePrefix != 0) {
        UnTitlePrefix = other.UnTitlePrefix;
      }
      if (other.UnTitleSuffix != 0) {
        UnTitleSuffix = other.UnTitleSuffix;
      }
      if (other.UnCostumeId != 0) {
        UnCostumeId = other.UnCostumeId;
      }
      if (other.UnCostumeShowFlag != 0) {
        UnCostumeShowFlag = other.UnCostumeShowFlag;
      }
      unEquipmentId_.Add(other.unEquipmentId_);
      if (other.UnVipLevel != 0) {
        UnVipLevel = other.UnVipLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UllRoleId = input.ReadInt64();
            break;
          }
          case 18: {
            SzName = input.ReadString();
            break;
          }
          case 24: {
            UnType = input.ReadInt32();
            break;
          }
          case 32: {
            UnLevel = input.ReadInt32();
            break;
          }
          case 40: {
            UnPosX = input.ReadInt32();
            break;
          }
          case 48: {
            UnPosY = input.ReadInt32();
            break;
          }
          case 56: {
            UnTitlePrefix = input.ReadUInt32();
            break;
          }
          case 64: {
            UnTitleSuffix = input.ReadUInt32();
            break;
          }
          case 80: {
            UnCostumeId = input.ReadInt32();
            break;
          }
          case 88: {
            UnCostumeShowFlag = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            unEquipmentId_.AddEntriesFrom(input, _repeated_unEquipmentId_codec);
            break;
          }
          case 104: {
            UnVipLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 地图坐标信息
  /// </summary>
  public sealed partial class MapPos : pb::IMessage<MapPos> {
    private static readonly pb::MessageParser<MapPos> _parser = new pb::MessageParser<MapPos>(() => new MapPos());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapPos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgMapReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapPos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapPos(MapPos other) : this() {
      unPosX_ = other.unPosX_;
      unPosY_ = other.unPosY_;
      fData1_ = other.fData1_;
      fData2_ = other.fData2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapPos Clone() {
      return new MapPos(this);
    }

    /// <summary>Field number for the "unPosX" field.</summary>
    public const int UnPosXFieldNumber = 1;
    private int unPosX_;
    /// <summary>
    /// 坐标X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPosX {
      get { return unPosX_; }
      set {
        unPosX_ = value;
      }
    }

    /// <summary>Field number for the "unPosY" field.</summary>
    public const int UnPosYFieldNumber = 2;
    private int unPosY_;
    /// <summary>
    /// 坐标Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnPosY {
      get { return unPosY_; }
      set {
        unPosY_ = value;
      }
    }

    /// <summary>Field number for the "fData1" field.</summary>
    public const int FData1FieldNumber = 3;
    private float fData1_;
    /// <summary>
    /// 数据1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FData1 {
      get { return fData1_; }
      set {
        fData1_ = value;
      }
    }

    /// <summary>Field number for the "fData2" field.</summary>
    public const int FData2FieldNumber = 4;
    private float fData2_;
    /// <summary>
    /// 数据2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FData2 {
      get { return fData2_; }
      set {
        fData2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapPos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapPos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnPosX != other.UnPosX) return false;
      if (UnPosY != other.UnPosY) return false;
      if (FData1 != other.FData1) return false;
      if (FData2 != other.FData2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnPosX != 0) hash ^= UnPosX.GetHashCode();
      if (UnPosY != 0) hash ^= UnPosY.GetHashCode();
      if (FData1 != 0F) hash ^= FData1.GetHashCode();
      if (FData2 != 0F) hash ^= FData2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnPosX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnPosX);
      }
      if (UnPosY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnPosY);
      }
      if (FData1 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(FData1);
      }
      if (FData2 != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(FData2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPosX);
      }
      if (UnPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnPosY);
      }
      if (FData1 != 0F) {
        size += 1 + 4;
      }
      if (FData2 != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapPos other) {
      if (other == null) {
        return;
      }
      if (other.UnPosX != 0) {
        UnPosX = other.UnPosX;
      }
      if (other.UnPosY != 0) {
        UnPosY = other.UnPosY;
      }
      if (other.FData1 != 0F) {
        FData1 = other.FData1;
      }
      if (other.FData2 != 0F) {
        FData2 = other.FData2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnPosX = input.ReadInt32();
            break;
          }
          case 16: {
            UnPosY = input.ReadInt32();
            break;
          }
          case 29: {
            FData1 = input.ReadFloat();
            break;
          }
          case 37: {
            FData2 = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器&lt;->客户端：请求角色移动
  /// _MSG_MAP_MOVE_CS
  /// </summary>
  public sealed partial class PMsgMapMoveCS : pb::IMessage<PMsgMapMoveCS> {
    private static readonly pb::MessageParser<PMsgMapMoveCS> _parser = new pb::MessageParser<PMsgMapMoveCS>(() => new PMsgMapMoveCS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgMapMoveCS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgMapReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapMoveCS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapMoveCS(PMsgMapMoveCS other) : this() {
      unMapId_ = other.unMapId_;
      cMapPos_ = other.cMapPos_.Clone();
      unErrorCode_ = other.unErrorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapMoveCS Clone() {
      return new PMsgMapMoveCS(this);
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 1;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    /// <summary>Field number for the "cMapPos" field.</summary>
    public const int CMapPosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sw.MapPos> _repeated_cMapPos_codec
        = pb::FieldCodec.ForMessage(18, global::Sw.MapPos.Parser);
    private readonly pbc::RepeatedField<global::Sw.MapPos> cMapPos_ = new pbc::RepeatedField<global::Sw.MapPos>();
    /// <summary>
    /// 角色移动的路径坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.MapPos> CMapPos {
      get { return cMapPos_; }
    }

    /// <summary>Field number for the "unErrorCode" field.</summary>
    public const int UnErrorCodeFieldNumber = 99;
    private int unErrorCode_;
    /// <summary>
    /// 返回错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnErrorCode {
      get { return unErrorCode_; }
      set {
        unErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgMapMoveCS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgMapMoveCS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnMapId != other.UnMapId) return false;
      if(!cMapPos_.Equals(other.cMapPos_)) return false;
      if (UnErrorCode != other.UnErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      hash ^= cMapPos_.GetHashCode();
      if (UnErrorCode != 0) hash ^= UnErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnMapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnMapId);
      }
      cMapPos_.WriteTo(output, _repeated_cMapPos_codec);
      if (UnErrorCode != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(UnErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      size += cMapPos_.CalculateSize(_repeated_cMapPos_codec);
      if (UnErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgMapMoveCS other) {
      if (other == null) {
        return;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
      cMapPos_.Add(other.cMapPos_);
      if (other.UnErrorCode != 0) {
        UnErrorCode = other.UnErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnMapId = input.ReadInt32();
            break;
          }
          case 18: {
            cMapPos_.AddEntriesFrom(input, _repeated_cMapPos_codec);
            break;
          }
          case 792: {
            UnErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：广播角色移动
  /// _MSG_MAP_MOVE_REVC_S
  /// </summary>
  public sealed partial class PMsgMapMoveRecvS : pb::IMessage<PMsgMapMoveRecvS> {
    private static readonly pb::MessageParser<PMsgMapMoveRecvS> _parser = new pb::MessageParser<PMsgMapMoveRecvS>(() => new PMsgMapMoveRecvS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgMapMoveRecvS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgMapReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapMoveRecvS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapMoveRecvS(PMsgMapMoveRecvS other) : this() {
      ullRoleId_ = other.ullRoleId_;
      unMapId_ = other.unMapId_;
      cMapPos_ = other.cMapPos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapMoveRecvS Clone() {
      return new PMsgMapMoveRecvS(this);
    }

    /// <summary>Field number for the "ullRoleId" field.</summary>
    public const int UllRoleIdFieldNumber = 1;
    private long ullRoleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UllRoleId {
      get { return ullRoleId_; }
      set {
        ullRoleId_ = value;
      }
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 2;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    /// <summary>Field number for the "cMapPos" field.</summary>
    public const int CMapPosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Sw.MapPos> _repeated_cMapPos_codec
        = pb::FieldCodec.ForMessage(26, global::Sw.MapPos.Parser);
    private readonly pbc::RepeatedField<global::Sw.MapPos> cMapPos_ = new pbc::RepeatedField<global::Sw.MapPos>();
    /// <summary>
    /// 角色移动的路径坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sw.MapPos> CMapPos {
      get { return cMapPos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgMapMoveRecvS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgMapMoveRecvS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UllRoleId != other.UllRoleId) return false;
      if (UnMapId != other.UnMapId) return false;
      if(!cMapPos_.Equals(other.cMapPos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UllRoleId != 0L) hash ^= UllRoleId.GetHashCode();
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      hash ^= cMapPos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UllRoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UllRoleId);
      }
      if (UnMapId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnMapId);
      }
      cMapPos_.WriteTo(output, _repeated_cMapPos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UllRoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UllRoleId);
      }
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      size += cMapPos_.CalculateSize(_repeated_cMapPos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgMapMoveRecvS other) {
      if (other == null) {
        return;
      }
      if (other.UllRoleId != 0L) {
        UllRoleId = other.UllRoleId;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
      cMapPos_.Add(other.cMapPos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UllRoleId = input.ReadInt64();
            break;
          }
          case 16: {
            UnMapId = input.ReadInt32();
            break;
          }
          case 26: {
            cMapPos_.AddEntriesFrom(input, _repeated_cMapPos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器：踢回地图上某个坐标
  /// _MSG_MAP_KICK_S
  /// </summary>
  public sealed partial class PMsgMapKickS : pb::IMessage<PMsgMapKickS> {
    private static readonly pb::MessageParser<PMsgMapKickS> _parser = new pb::MessageParser<PMsgMapKickS>(() => new PMsgMapKickS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMsgMapKickS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sw.PMsgMapReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapKickS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapKickS(PMsgMapKickS other) : this() {
      unMapId_ = other.unMapId_;
      unNewX_ = other.unNewX_;
      unNewY_ = other.unNewY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMsgMapKickS Clone() {
      return new PMsgMapKickS(this);
    }

    /// <summary>Field number for the "unMapId" field.</summary>
    public const int UnMapIdFieldNumber = 1;
    private int unMapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnMapId {
      get { return unMapId_; }
      set {
        unMapId_ = value;
      }
    }

    /// <summary>Field number for the "unNewX" field.</summary>
    public const int UnNewXFieldNumber = 2;
    private int unNewX_;
    /// <summary>
    /// 新坐标X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnNewX {
      get { return unNewX_; }
      set {
        unNewX_ = value;
      }
    }

    /// <summary>Field number for the "unNewY" field.</summary>
    public const int UnNewYFieldNumber = 3;
    private int unNewY_;
    /// <summary>
    /// 新坐标Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnNewY {
      get { return unNewY_; }
      set {
        unNewY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMsgMapKickS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMsgMapKickS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnMapId != other.UnMapId) return false;
      if (UnNewX != other.UnNewX) return false;
      if (UnNewY != other.UnNewY) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnMapId != 0) hash ^= UnMapId.GetHashCode();
      if (UnNewX != 0) hash ^= UnNewX.GetHashCode();
      if (UnNewY != 0) hash ^= UnNewY.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnMapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnMapId);
      }
      if (UnNewX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnNewX);
      }
      if (UnNewY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnNewY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnMapId);
      }
      if (UnNewX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnNewX);
      }
      if (UnNewY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnNewY);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMsgMapKickS other) {
      if (other == null) {
        return;
      }
      if (other.UnMapId != 0) {
        UnMapId = other.UnMapId;
      }
      if (other.UnNewX != 0) {
        UnNewX = other.UnNewX;
      }
      if (other.UnNewY != 0) {
        UnNewY = other.UnNewY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnMapId = input.ReadInt32();
            break;
          }
          case 16: {
            UnNewX = input.ReadInt32();
            break;
          }
          case 24: {
            UnNewY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
